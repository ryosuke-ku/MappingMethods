1 String.valueOf(ifCondition)
2 String.valueOf(ifCondition)
3 String.valueOf(unlessCondition)
4 String.valueOf(unlessCondition)
5 formatters.addElement(elem)
6 destDir.getAbsolutePath()
7 add(fs)
8 fs.getProject()
9 fs.setProject(project)
10 resources.add(rc)
11 Collections.enumeration(Arrays.asList(createAllJUnitTest()))
12 Arrays.asList(createAllJUnitTest())
13 createAllJUnitTest()
14 createAllJUnitTest()
15 v.ensureCapacity(v.size()+tests.length)
16 v.size()
17 v.addElement(test)
18 Stream.of(getFilenames())
19 getFilenames()
20 Stream.of(getFilenames()).map(BatchTest::javaToClass)
21 Stream.of(getFilenames()).map(BatchTest::javaToClass).map(this::createJUnitTest)
22 Stream.of(getFilenames()).map(BatchTest::javaToClass).map(this::createJUnitTest).toArray(JUnitTest[]::new)
23 resources.stream()
24 resources.stream().filter(Resource::isExists)
25 resources.stream().filter(Resource::isExists).map(Resource::getName)
26 resources.stream().filter(Resource::isExists).map(Resource::getName).filter(name->name.endsWith(".java")||name.endsWith(".class"))
27 name.endsWith(".java")
28 name.endsWith(".class")
29 resources.stream().filter(Resource::isExists).map(Resource::getName).filter(name->name.endsWith(".java")||name.endsWith(".class")).map(name->name.substring(0,name.lastIndexOf('.')))
30 name.substring(0,name.lastIndexOf('.'))
31 name.lastIndexOf('.')
32 resources.stream().filter(Resource::isExists).map(Resource::getName).filter(name->name.endsWith(".java")||name.endsWith(".class")).map(name->name.substring(0,name.lastIndexOf('.'))).toArray(String[]::new)
33 filename.replace(File.separatorChar,'.')
34 filename.replace(File.separatorChar,'.').replace('/','.')
35 filename.replace(File.separatorChar,'.').replace('/','.').replace('\\','.')
36 test.setName(classname)
37 test.setHaltonerror(this.haltOnError)
38 test.setHaltonfailure(this.haltOnFail)
39 test.setFiltertrace(this.filtertrace)
40 test.setFork(this.fork)
41 test.setIf(getIfCondition())
42 getIfCondition()
43 test.setUnless(getUnlessCondition())
44 getUnlessCondition()
45 test.setTodir(this.destDir)
46 test.setFailureProperty(failureProperty)
47 test.setErrorProperty(errorProperty)
48 test.setSkipNonTests(isSkipNonTests())
49 isSkipNonTests()
50 this.formatters.forEach(test::addFormatter)
51 resolveMethods()
52 String.join(",",methods)
53 parseTestMethodNamesList(methodsList)
54 methodNames.trim()
55 methodNames.length()
56 methodNames.charAt(length-1)
57 methodNames.substring(0,length-1)
58 methodNames.substring(0,length-1).trim()
59 methodNames.length()
60 methodNames.toCharArray()
61 Character.isJavaIdentifierStart(c)
62 methodNames.substring(wordStartIndex,i)
63 methodNames.substring(wordStartIndex,i)
64 Character.isJavaIdentifierPart(c)
65 methodNames.substring(wordStartIndex,chars.length)
66 p.forEach(props::put)
67 PropertyHelper.getPropertyHelper(p)
68 ph.testIfCondition(getIfCondition())
69 getIfCondition()
70 ph.testUnlessCondition(getUnlessCondition())
71 getUnlessCondition()
72 formatters.size()
73 formatters.copyInto(fes)
74 formatters.size()
75 v.addElement(formatters.elementAt(i))
76 formatters.elementAt(i)
77 super.clone()
78 props.clone()
79 formatters.clone()
80 log(WARN_OVERRIDING+'<'+name+'>',Project.MSG_INFO)
81 logOverride("condition",condition)
82 logOverride("application",application)
83 logOverride("setup",setup)
84 logOverride("block",block)
85 logOverride("tests",tests)
86 logOverride("reporting",reporting)
87 logOverride("teardown",teardown)
88 unit.getMultiplier()
89 unit.getMultiplier()
90 task.bindToOwner(this)
91 task.init()
92 bind(par)
93 par.setFailOnAny(true)
94 par.setTimeout(parallelTimeout)
95 bind(par)
96 par.setFailOnAny(true)
97 par.setTimeout(parallelTimeout)
98 task.getProject()
99 validateTask(setup,"setup")
100 validateTask(application,"application")
101 validateTask(tests,"tests")
102 validateTask(reporting,"reporting")
103 validateTask(teardown,"teardown")
104 condition.eval()
105 log(SKIPPING_TESTS)
106 newParallel(timeoutMillis)
107 applicationRun.addTask(application)
108 bind(testRun)
109 ta.bindToOwner(this)
110 validateTask(ta,"block")
111 testRun.addTask(ta)
112 block.calculateMaxWaitMillis()
113 testRun.addTask(tests)
114 testRun.addTask(reporting)
115 newParallel(testRunTimeout,testRun)
116 newParallel(timeoutMillis,setup)
117 setupRun.execute()
118 worker.start()
119 timedTests.execute()
120 newParallel(timeoutMillis,teardown)
121 teardownRun.execute()
122 worker.waitUntilFinished(shutdownTimeMillis)
123 worker.isAlive()
124 log(APPLICATION_FORCIBLY_SHUT_DOWN,Project.MSG_WARN)
125 worker.interrupt()
126 worker.waitUntilFinished(shutdownTimeMillis)
127 log(SHUTDOWN_INTERRUPTED,e,Project.MSG_VERBOSE)
128 worker.getBuildException()
129 processExceptions()
130 ignoringThrowable(APPLICATION_EXCEPTION,applicationException)
131 ignoringThrowable(TEARDOWN_EXCEPTION,teardownException)
132 getProject()
133 getProject().getProperty(failureProperty)
134 log(failureMessage)
135 log(type+": "+thrown.toString(),thrown,Project.MSG_WARN)
136 thrown.toString()
137 countConditions()
138 getConditions()
139 getConditions().nextElement()
140 getConditions().nextElement().eval()
141 System.out.println("Hello From Test")
142 p.init()
143 System.getProperty("build.tests.value")
144 newFile(buildTestcases).isDirectory()
145 FILE_UTILS.toURI(buildTestcases)
146 Arrays.asList(urlFromParent,urlFromPath)
147 Collections.list(acl.getResources(TEST_RESOURCE))
148 acl.getResources(TEST_RESOURCE)
149 Arrays.asList(urlFromPath,urlFromParent)
150 Collections.list(acl.getResources(TEST_RESOURCE))
151 acl.getResources(TEST_RESOURCE)
152 System.getProperty("build.tests.value")
153 newFile(buildTestcases).isDirectory()
154 FILE_UTILS.toURI(buildTestcases)
155 acl.setIsolated(true)
156 Collections.singletonList(urlFromPath)
157 Collections.list(acl.getResources(TEST_RESOURCE))
158 acl.getResources(TEST_RESOURCE)
159 name.equals(TEST_RESOURCE)
160 Collections.enumeration(Collections.singleton(newURL("https://ant.apache.org/"+name)))
161 Collections.singleton(newURL("https://ant.apache.org/"+name))
162 Collections.enumeration(Collections.emptySet())
163 Collections.emptySet()
164 buildRule.configureProject("src/etc/testcases/core/antclassloader.xml")
165 buildRule.executeTarget("setUp")
166 loader.cleanup()
167 buildRule.getProject()
168 buildRule.getProject().getProperty("main.jar")
169 buildRule.getProject()
170 buildRule.getProject().getProperty("ext.jar")
171 buildRule.getProject()
172 myPath.setLocation(newFile(mainjarstring))
173 buildRule.getProject()
174 buildRule.getProject().setUserProperty("build.sysclasspath","ignore")
175 buildRule.getProject()
176 buildRule.getProject().createClassLoader(myPath)
177 loader.getClasspath()
178 buildRule.getProject()
179 buildRule.getProject().getProperty("main.jar.nonascii")
180 buildRule.getProject()
181 buildRule.getProject().getProperty("ext.jar.nonascii")
182 buildRule.getProject()
183 myPath.setLocation(newFile(mainjarstring))
184 buildRule.getProject()
185 buildRule.getProject().setUserProperty("build.sysclasspath","ignore")
186 buildRule.getProject()
187 buildRule.getProject().createClassLoader(myPath)
188 loader.getClasspath()
189 thrown.expect(ClassNotFoundException.class)
190 buildRule.getProject()
191 buildRule.getProject()
192 buildRule.getProject().createClassLoader(path)
193 loader.findClass("fubar")
194 loader.cleanup()
195 loader.findClass("fubar")
196 buildRule.getProject()
197 buildRule.getProject().fireBuildFinished(null)
198 loader.findClass("fubar")
199 buildRule.executeTarget("prepareGetPackageTest")
200 buildRule.getProject()
201 myPath.setLocation(newFile(buildRule.getProject().getProperty("test.jar")))
202 buildRule.getProject()
203 buildRule.getProject().getProperty("test.jar")
204 buildRule.getProject()
205 buildRule.getProject().setUserProperty("build.sysclasspath","ignore")
206 buildRule.getProject()
207 buildRule.getProject().createClassLoader(myPath)
208 loader.findClass("org.example.Foo")
209 newGetPackageWrapper(loader).getPackage("org.example")
210 buildRule.executeTarget("prepareGetPackageTest")
211 buildRule.getProject()
212 buildRule.getProject()
213 buildRule.getProject().getProperty("test.jar")
214 myPath.setLocation(testJar)
215 buildRule.getProject()
216 buildRule.getProject().setUserProperty("build.sysclasspath","ignore")
217 buildRule.getProject()
218 buildRule.getProject().createClassLoader(myPath)
219 loader.findClass("org.example.Foo")
220 foo.getProtectionDomain()
221 foo.getProtectionDomain().getCodeSource()
222 foo.getProtectionDomain().getCodeSource().getLocation()
223 FileUtils.getFileUtils()
224 FileUtils.getFileUtils().getFileURL(testJar)
225 buildRule.executeTarget("signTestJar")
226 buildRule.getProject()
227 buildRule.getProject().getProperty("test.jar")
228 buildRule.getProject()
229 myPath.setLocation(jar)
230 buildRule.getProject()
231 buildRule.getProject().setUserProperty("build.sysclasspath","ignore")
232 buildRule.getProject()
233 buildRule.getProject().createClassLoader(myPath)
234 loader.findClass("org.example.Foo")
235 foo.getProtectionDomain()
236 foo.getProtectionDomain().getCodeSource()
237 foo.getProtectionDomain().getCodeSource().getCertificates()
238 foo.getSigners()
239 buildRule.executeTarget("createNonJar")
240 buildRule.getProject()
241 buildRule.getProject().getProperty("tmp.dir")
242 buildRule.getProject()
243 myPath.setLocation(jar)
244 buildRule.getProject()
245 buildRule.getProject().setUserProperty("build.sysclasspath","ignore")
246 buildRule.getProject()
247 buildRule.getProject().createClassLoader(myPath)
248 System.setErr(err)
249 loader.getResource("foo.txt")
250 buildRule.getLog()
251 log.indexOf("CLASSPATH element ")
252 log.indexOf("foo.jar is not a JAR",startMessage)
253 System.setErr(sysErr)
254 acl.getResource("META-INF/MANIFEST.MF")
255 acl.getResources("META-INF/MANIFEST.MF")
256 acl.getResources("META-INF/MANIFEST.MF").hasMoreElements()
257 acl.getResource("META-INF/MANIFEST.MF")
258 acl.getResources("META-INF/MANIFEST.MF")
259 acl.getResources("META-INF/MANIFEST.MF").hasMoreElements()
260 AntClassLoader.newAntClassLoader(newEmptyLoader(),null,newPath(null),true)
261 acl.getResource("META-INF/MANIFEST.MF")
262 acl.getResources("META-INF/MANIFEST.MF")
263 acl.getResources("META-INF/MANIFEST.MF").hasMoreElements()
264 buildRule.executeTarget("testMRJar")
265 JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
266 buildRule.getOutput()
267 targetOutput.contains("mrjar test result = 9")
268 targetOutput.contains("mrjar test result = default")
269 Collections.emptyEnumeration()
270 super(parent)
271 super.getPackage(s)
272 project.getTargets()
273 project.getTargets().containsKey(tearDown)
274 project.executeTarget(tearDown)
275 expectSpecificBuildException(target,cause,null)
276 executeTarget(target)
277 getLog()
278 getLog()
279 realLog.contains(substring)
280 getLog()
281 realLog.contains(substring)
282 getOutput()
283 realOutput.contains(substring)
284 executeTarget(target)
285 executeTarget(target)
286 logBuffer.toString()
287 executeTarget(target)
288 getFullLog()
289 getFullLog()
290 realLog.contains(substring)
291 fullLogBuffer.toString()
292 executeTarget(target)
293 getOutput()
294 realOutput.trim()
295 executeTarget(target)
296 getOutput()
297 getError()
298 cleanBuffer(outBuffer)
299 cleanBuffer(errBuffer)
300 buffer.length()
301 buffer.charAt(i)
302 cleanedBuffer.append(ch)
303 cleanedBuffer.toString()
304 configureProject(filename,Project.MSG_DEBUG)
305 configureProject(filename,Project.MSG_DEBUG)
306 sysOut.flush()
307 sysErr.flush()
308 System.setOut(out)
309 System.setErr(err)
310 project.executeTarget(targetName)
311 System.setOut(sysOut)
312 System.setErr(sysErr)
313 project.getBaseDir()
314 project.getProperty("output")
315 executeTarget(target)
316 ex.getMessage()
317 ex.getMessage()
318 ex.getMessage().equals(msg)
319 fail("Should throw BuildException because: "+cause)
320 executeTarget(target)
321 ex.getMessage()
322 ex.getMessage()
323 ex.getMessage().contains(contains)
324 fail("Should throw BuildException because: "+cause)
325 executeTarget(target)
326 project.getProperty(property)
327 project.getProperty(property)
328 executeTarget(target)
329 expectPropertySet(target,property,null)
330 getClass()
331 getClass().getResource(resource)
332 buffer.append((char)b)
333 event.getPriority()
334 event.getPriority()
335 event.getPriority()
336 event.getPriority()
337 logBuffer.append(event.getMessage())
338 event.getMessage()
339 fullLogBuffer.append(event.getMessage())
340 event.getMessage()
341 buildRule.configureProject("src/etc/testcases/core/case.xml")
342 buildRule.executeTarget("case-sensitivity")
343 thrown.expect(BuildException.class)
344 thrown.expectMessage("Problem: failed to create task or type ecHO")
345 buildRule.executeTarget("taskcase")
346 DefaultLogger.throwableMessage(m,error,verbose)
347 m.toString()
348 w.println("problem")
349 w.println("  at p.C.m")
350 String.format("problem%n  at p.C.m%n")
351 msg(x,false)
352 String.format("build.xml:1: problem%n  at p.C.m%n")
353 msg(be,false)
354 ProjectHelper.addLocationToBuildException(be,newLocation("build.xml",2,0))
355 String.format("build.xml:2: The following error occurred while executing this line:%n"+"build.xml:1: problem%n  at p.C.m%n")
356 msg(be,false)
357 w.println("problem")
358 w.println("  at p.C.m")
359 String.format("problem%n  at p.C.m%n")
360 msg(x,false)
361 String.format("build.xml:1: problem%n  at p.C.m%n")
362 msg(be,false)
363 ProjectHelper.addLocationToBuildException(be,newLocation("build.xml",2,0))
364 String.format("build.xml:2: The following error occurred while executing this line:%n"+"build.xml:1: problem%n  at p.C.m%n")
365 msg(be,false)
366 buildRule.configureProject("src/etc/testcases/core/directoryscanner.xml")
367 buildRule.getProject()
368 buildRule.getProject().executeTarget("setUp")
369 ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
370 buildRule.getProject()
371 buildRule.getProject().getProperty("output")
372 ds.setIncludes(newString[]{"alpha"})
373 ds.scan()
374 compareFiles(ds,newString[]{},newString[]{"alpha"})
375 ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
376 buildRule.getProject()
377 buildRule.getProject().getProperty("output")
378 ds.setIncludes(newString[]{"alpha/"})
379 ds.scan()
380 compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
381 ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
382 buildRule.getProject()
383 buildRule.getProject().getProperty("output")
384 ds.scan()
385 compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"","alpha","alpha/beta","alpha/beta/gamma"})
386 ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
387 buildRule.getProject()
388 buildRule.getProject().getProperty("output")
389 ds.setIncludes(newString[]{"alpha/beta/gamma/GAMMA.XML"})
390 ds.scan()
391 compareFiles(ds,newString[]{},newString[]{})
392 ds.setCaseSensitive(false)
393 ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
394 buildRule.getProject()
395 buildRule.getProject().getProperty("output")
396 ds.setIncludes(newString[]{"alpha/beta/gamma/GAMMA.XML"})
397 ds.scan()
398 compareFiles(ds,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{})
399 ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
400 buildRule.getProject()
401 buildRule.getProject().getProperty("output")
402 ds.setIncludes(newString[]{"ALPHA/"})
403 ds.setCaseSensitive(false)
404 ds.scan()
405 compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
406 assumeTrue("Current system does not support Symlinks",supportsSymlinks)
407 buildRule.getProject()
408 buildRule.getProject().executeTarget("symlink-setup")
409 ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
410 buildRule.getProject()
411 buildRule.getProject().getProperty("output")
412 ds.setIncludes(newString[]{"alpha/beta/gamma/"})
413 ds.scan()
414 compareFiles(ds,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{"alpha/beta/gamma"})
415 assumeTrue("Current system does not support Symlinks",supportsSymlinks)
416 buildRule.getProject()
417 buildRule.getProject().executeTarget("symlink-setup")
418 ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
419 buildRule.getProject()
420 buildRule.getProject().getProperty("output")
421 ds.setIncludes(newString[]{"alpha/beta/gamma/"})
422 ds.setFollowSymlinks(false)
423 ds.scan()
424 compareFiles(ds,newString[]{},newString[]{})
425 ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
426 buildRule.getProject()
427 buildRule.getProject().getProperty("output")
428 ds.setIncludes(newString[]{"alpha/be?a/**","alpha/beta/gamma/"})
429 ds.scan()
430 compareFiles(ds,expectedFiles,expectedDirectories)
431 ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
432 buildRule.getProject()
433 buildRule.getProject().getProperty("output")
434 ds.setIncludes(newString[]{"alpha/beta/gamma/","alpha/be?a/**"})
435 ds.scan()
436 compareFiles(ds,expectedFiles,expectedDirectories)
437 ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
438 buildRule.getProject()
439 buildRule.getProject().getProperty("output")
440 ds.setIncludes(newString[]{"alpha/","ALPHA/"})
441 ds.scan()
442 compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
443 ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
444 buildRule.getProject()
445 buildRule.getProject().getProperty("output")
446 ds.setIncludes(newString[]{"alpha/","ALPHA/"})
447 ds.setCaseSensitive(false)
448 ds.scan()
449 compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
450 ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
451 buildRule.getProject()
452 buildRule.getProject().getProperty("output")
453 ds.setIncludes(newString[]{"alpha/beta/gamma/gamma.xml","alpha/beta/gamma/GAMMA.XML"})
454 ds.scan()
455 compareFiles(ds,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{})
456 ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
457 buildRule.getProject()
458 buildRule.getProject().getProperty("output")
459 ds.setIncludes(newString[]{"alpha/beta/gamma/gamma.xml","alpha/beta/gamma/GAMMA.XML"})
460 ds.setCaseSensitive(false)
461 ds.scan()
462 compareFiles(ds,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{})
463 ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
464 buildRule.getProject()
465 buildRule.getProject().getProperty("output")
466 ds.setIncludes(newString[]{"alpha/","ALPHA/beta/"})
467 ds.scan()
468 compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
469 ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
470 buildRule.getProject()
471 buildRule.getProject().getProperty("output")
472 ds.setIncludes(newString[]{"alpha/","ALPHA/beta/"})
473 ds.setCaseSensitive(false)
474 ds.scan()
475 compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
476 buildRule.getProject()
477 buildRule.getProject().getBaseDir()
478 linkFile.exists()
479 targetFile.exists()
480 targetFile.getAbsolutePath()
481 linkFile.getAbsolutePath()
482 Runtime.getRuntime()
483 Runtime.getRuntime().exec(command)
484 process.waitFor()
485 ds.setFollowSymlinks(true)
486 ds.setBasedir(dir)
487 ds.setExcludes(newString[]{"ant/**"})
488 ds.scan()
489 ds.getIncludedDirectories()
490 included.equals("zip")
491 included.equals("ThisIsALink"+File.separator+"taskdefs")
492 ds.setFollowSymlinks(false)
493 ds.setBasedir(dir)
494 ds.setExcludes(newString[]{"ant/**"})
495 ds.scan()
496 ds.getIncludedDirectories()
497 included.equals("zip")
498 included.equals("ThisIsALink"+File.separator+"taskdefs")
499 linkFile.delete()
500 ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
501 buildRule.getProject()
502 buildRule.getProject().getProperty("output")
503 ds.setIncludes(newString[]{"**/*.xml"})
504 ds.setExcludes(newString[]{"alpha/beta/b*xml"})
505 ds.scan()
506 compareFiles(ds,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{})
507 ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
508 buildRule.getProject()
509 buildRule.getProject().getProperty("output")
510 ds.setIncludes(newString[]{"alpha/**"})
511 ds.setExcludes(newString[]{"alpha/**"})
512 ds.scan()
513 compareFiles(ds,newString[]{},newString[]{})
514 ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
515 buildRule.getProject()
516 buildRule.getProject().getProperty("output")
517 ds.setIncludes(newString[]{"alpha/**","alpha/beta/gamma/**"})
518 ds.setExcludes(newString[]{"alpha/beta/**"})
519 ds.scan()
520 compareFiles(ds,newString[]{},newString[]{"alpha"})
521 ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
522 buildRule.getProject()
523 buildRule.getProject().getProperty("output")
524 ds.setExcludes(newString[]{"alpha/**","alpha/beta/gamma/**"})
525 ds.setIncludes(newString[]{"alpha/beta/**"})
526 ds.scan()
527 compareFiles(ds,newString[]{},newString[]{})
528 buildRule.getProject()
529 buildRule.getProject().executeTarget("children-of-excluded-dir-setup")
530 ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
531 buildRule.getProject()
532 buildRule.getProject().getProperty("output")
533 ds.setExcludes(newString[]{"alpha/**"})
534 ds.setFollowSymlinks(false)
535 ds.scan()
536 compareFiles(ds,newString[]{"delta/delta.xml"},newString[]{"","delta"})
537 buildRule.getProject()
538 buildRule.getProject().executeTarget("children-of-excluded-dir-setup")
539 ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
540 buildRule.getProject()
541 buildRule.getProject().getProperty("output")
542 ds.setExcludes(newString[]{"alpha"})
543 ds.setFollowSymlinks(false)
544 ds.scan()
545 compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml","delta/delta.xml"},newString[]{"","alpha/beta","alpha/beta/gamma","delta"})
546 buildRule.getProject()
547 buildRule.getProject().getProperty("tests.and.ant.share.classloader")
548 assumeFalse("cannot execute testIsExcludedDirectoryScanned when tests are forked, "+"package private method called",shareclassloader==null||shareclassloader.indexOf("${")==0)
549 shareclassloader.indexOf("${")
550 buildRule.getProject()
551 buildRule.getProject().executeTarget("children-of-excluded-dir-setup")
552 ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
553 buildRule.getProject()
554 buildRule.getProject().getProperty("output")
555 ds.setExcludes(newString[]{"**/gamma/**"})
556 ds.setFollowSymlinks(false)
557 ds.scan()
558 ds.getScannedDirs()
559 set.isEmpty()
560 "alpha/beta/gamma/".replace('/',File.separatorChar)
561 not(hasItem(s))
562 hasItem(s)
563 buildRule.getProject()
564 buildRule.getProject().executeTarget("extended-setup")
565 buildRule.getProject()
566 buildRule.getProject().getProperty("output")
567 buildRule.getProject().getProperty("output").replace(File.separatorChar,'/')
568 ds.setIncludes(newString[]{tmpdir+"/**/*"})
569 ds.scan()
570 compareFiles(ds,newString[]{tmpdir+"/alpha/beta/beta.xml",tmpdir+"/alpha/beta/gamma/gamma.xml",tmpdir+"/delta/delta.xml"},newString[]{tmpdir+"/alpha",tmpdir+"/alpha/beta",tmpdir+"/alpha/beta/gamma",tmpdir+"/delta"})
571 ds.setIncludes(newString[]{"alpha/**","alpha/beta/gamma/**"})
572 ds.scan()
573 compareFiles(ds,mt,mt)
574 buildRule.getProject()
575 buildRule.getProject().executeTarget("extended-setup")
576 buildRule.getProject()
577 buildRule.getProject().getProperty("output")
578 buildRule.getProject().getProperty("output").replace(File.separatorChar,'/')
579 ds.setIncludes(newString[]{tmpdir+"/**/*"})
580 ds.setExcludes(newString[]{"**/alpha","**/delta/*"})
581 ds.scan()
582 compareFiles(ds,newString[]{tmpdir+"/alpha/beta/beta.xml",tmpdir+"/alpha/beta/gamma/gamma.xml"},newString[]{tmpdir+"/alpha/beta",tmpdir+"/alpha/beta/gamma",tmpdir+"/delta"})
583 buildRule.getProject()
584 buildRule.getProject().executeTarget("extended-setup")
585 buildRule.getProject()
586 buildRule.getProject().getProperty("output")
587 buildRule.getProject().getProperty("output").replace(File.separatorChar,'/')
588 ds.setIncludes(newString[]{tmpdir+"/alpha/beta/**/*",tmpdir+"/delta/*"})
589 ds.setExcludes(newString[]{"**/beta.xml"})
590 ds.scan()
591 compareFiles(ds,newString[]{tmpdir+"/alpha/beta/gamma/gamma.xml",tmpdir+"/delta/delta.xml"},newString[]{tmpdir+"/alpha/beta/gamma"})
592 assumeTrue("Can't use drive letters on non DOS or Netware systems",Os.isFamily("dos")||Os.isFamily("netware"))
593 Os.isFamily("dos")
594 Os.isFamily("netware")
595 newFile(File.separator).getAbsolutePath()
596 newFile(File.separator).getAbsolutePath().toUpperCase()
597 ds.setIncludes(newString[]{pattern})
598 ds.scan()
599 ds.getIncludedFilesCount()
600 ds.getIncludedDirsCount()
601 ds.getIncludedFiles()
602 ds.getIncludedDirectories()
603 Arrays.stream(includedFiles)
604 Arrays.stream(includedFiles).map(includedFile->includedFile.replace(File.separatorChar,'/'))
605 includedFile.replace(File.separatorChar,'/')
606 Arrays.stream(includedFiles).map(includedFile->includedFile.replace(File.separatorChar,'/')).collect(Collectors.toCollection(TreeSet::new))
607 Collectors.toCollection(TreeSet::new)
608 Arrays.stream(includedDirectories)
609 Arrays.stream(includedDirectories).map(includedDirectory->includedDirectory.replace(File.separatorChar,'/'))
610 includedDirectory.replace(File.separatorChar,'/')
611 Arrays.stream(includedDirectories).map(includedDirectory->includedDirectory.replace(File.separatorChar,'/')).collect(Collectors.toCollection(TreeSet::new))
612 Collectors.toCollection(TreeSet::new)
613 ds.setBasedir(newFile(buildRule.getProject().getProperty("output")))
614 buildRule.getProject()
615 buildRule.getProject().getProperty("output")
616 ds.setExcludes(newString[]{"**/beta/**"})
617 ds.scan()
618 Arrays.asList(ds.getExcludedDirectories())
619 ds.getExcludedDirectories()
620 dirs.size()
621 hasItem("alpha/beta".replace('/',File.separatorChar))
622 "alpha/beta".replace('/',File.separatorChar)
623 hasItem("alpha/beta/gamma".replace('/',File.separatorChar))
624 "alpha/beta/gamma".replace('/',File.separatorChar)
625 Arrays.asList(ds.getExcludedFiles())
626 ds.getExcludedFiles()
627 files.size()
628 hasItem("alpha/beta/beta.xml".replace('/',File.separatorChar))
629 "alpha/beta/beta.xml".replace('/',File.separatorChar)
630 hasItem("alpha/beta/gamma/gamma.xml".replace('/',File.separatorChar))
631 "alpha/beta/gamma/gamma.xml".replace('/',File.separatorChar)
632 ds.setBasedir(newFile("."))
633 ds.setIncludes(newString[]{"**"})
634 ds.addDefaultExcludes()
635 ds.ensureNonPatternSetsReady()
636 f.getAbsolutePath()
637 ds.contentsExcluded(p)
638 buildRule.configureProject("src/etc/testcases/core/dispatch/dispatch.xml")
639 thrown.expect(BuildException.class)
640 thrown.expectMessage("list")
641 buildRule.executeTarget("disp")
642 buildRule.configureProject("src/etc/testcases/core/executor.xml")
643 buildRule.getProject()
644 buildRule.getProject().addBuildListener(this)
645 getProject(e,false)
646 getProject(e,false)
647 getProject(e,false)
648 buildRule.getProject()
649 buildRule.getProject().executeTargets(TARGET_NAMES)
650 getProject(SINGLE_CHECK)
651 getProject(SINGLE_CHECK).executeTargets(TARGET_NAMES)
652 getProject(IGNORE_DEPS)
653 getProject(IGNORE_DEPS).executeTargets(TARGET_NAMES)
654 thrown.expect(BuildException.class)
655 thrown.expectMessage("failfoo")
656 getProject(null,true)
657 getProject(null,true).executeTargets(TARGET_NAMES)
658 thrown.expect(BuildException.class)
659 thrown.expectMessage("failfoo")
660 getProject(SINGLE_CHECK,true)
661 getProject(SINGLE_CHECK,true).executeTargets(TARGET_NAMES)
662 getProject(IGNORE_DEPS,true)
663 getProject(IGNORE_DEPS,true).executeTargets(TARGET_NAMES)
664 thrown.expect(BuildException.class)
665 thrown.expectMessage("failfoo")
666 getProject(null,true,true)
667 getProject(null,true,true).executeTargets(TARGET_NAMES)
668 thrown.expect(BuildException.class)
669 thrown.expectMessage("failfoo")
670 getProject(SINGLE_CHECK,true,true)
671 getProject(SINGLE_CHECK,true,true).executeTargets(TARGET_NAMES)
672 thrown.expect(BuildException.class)
673 thrown.expectMessage("failfoo")
674 targetNames.add(0,"foo")
675 getProject(IGNORE_DEPS,true,true)
676 getProject(IGNORE_DEPS,true,true).executeTargets(targetNames)
677 buildRule.configureProject("src/etc/testcases/core/extended-taskdef.xml")
678 buildRule.executeTarget("teardown")
679 thrown.expect(BuildException.class)
680 thrown.expectMessage("executing the Foo task")
681 buildRule.executeTarget("testRun")
682 thrown.expect(BuildException.class)
683 thrown.expectMessage("executing the Foo task")
684 buildRule.executeTarget("testRun2")
685 buildRule.configureProject("src/etc/testcases/core/immutable.xml")
686 buildRule.executeTarget("test1")
687 buildRule.getProject()
688 buildRule.getProject().getProperty("test")
689 buildRule.executeTarget("test2")
690 buildRule.getProject()
691 buildRule.getProject().getProperty("DSTAMP")
692 buildRule.getProject()
693 buildRule.getProject().getProperty("start.DSTAMP")
694 buildRule.executeTarget("test3")
695 buildRule.getProject()
696 buildRule.getProject().getProperty("DSTAMP")
697 buildRule.executeTarget("test4")
698 buildRule.getProject()
699 buildRule.getProject().getProperty("test")
700 buildRule.executeTarget("test5")
701 buildRule.getProject()
702 buildRule.getProject().getProperty("test")
703 buildRule.executeTarget("test6")
704 buildRule.getProject()
705 buildRule.getProject().getProperty("test1")
706 buildRule.getProject()
707 buildRule.getProject().getProperty("test2")
708 buildRule.executeTarget("test7")
709 buildRule.getProject()
710 buildRule.getProject().getProperty("test")
711 buildRule.configureProject("src/etc/testcases/core/include/basic/include.xml")
712 buildRule.executeTarget("test1")
713 buildRule.getLog()
714 buildRule.configureProject("src/etc/testcases/core/include/frag#ment/include.xml")
715 buildRule.executeTarget("test1")
716 buildRule.getLog()
717 buildRule.configureProject("src/etc/testcases/core/include/frag#ment/simple.xml")
718 buildRule.executeTarget("test1")
719 buildRule.getLog()
720 buildRule.configureProject("src/etc/testcases/core/include/basic/relative.xml")
721 buildRule.executeTarget("test1")
722 buildRule.getLog()
723 buildRule.configureProject("src/etc/testcases/core/include/frag#ment/relative.xml")
724 buildRule.executeTarget("test1")
725 buildRule.getLog()
726 thrown.expect(BuildException.class)
727 thrown.expect(hasProperty("location",hasProperty("fileName",containsString("build.xml"))))
728 hasProperty("location",hasProperty("fileName",containsString("build.xml")))
729 hasProperty("fileName",containsString("build.xml"))
730 containsString("build.xml")
731 buildRule.configureProject("src/etc/testcases/core/include/including_file_parse_error/build.xml")
732 thrown.expect(BuildException.class)
733 thrown.expect(hasProperty("location",both(hasProperty("fileName",containsString("build.xml"))).and(hasProperty("lineNumber",equalTo(14)))))
734 hasProperty("location",both(hasProperty("fileName",containsString("build.xml"))).and(hasProperty("lineNumber",equalTo(14))))
735 both(hasProperty("fileName",containsString("build.xml")))
736 hasProperty("fileName",containsString("build.xml"))
737 containsString("build.xml")
738 both(hasProperty("fileName",containsString("build.xml"))).and(hasProperty("lineNumber",equalTo(14)))
739 hasProperty("lineNumber",equalTo(14))
740 equalTo(14)
741 thrown.expectMessage(startsWith("Warning: Could not find file "))
742 startsWith("Warning: Could not find file ")
743 buildRule.configureProject("src/etc/testcases/core/include/including_file_task_error/build.xml")
744 thrown.expect(BuildException.class)
745 thrown.expect(hasProperty("location",hasProperty("fileName",containsString("included_file.xml"))))
746 hasProperty("location",hasProperty("fileName",containsString("included_file.xml")))
747 hasProperty("fileName",containsString("included_file.xml"))
748 containsString("included_file.xml")
749 buildRule.configureProject("src/etc/testcases/core/include/included_file_parse_error/build.xml")
750 thrown.expect(BuildException.class)
751 thrown.expect(hasProperty("location",both(hasProperty("fileName",containsString("included_file.xml"))).and(hasProperty("lineNumber",equalTo(2)))))
752 hasProperty("location",both(hasProperty("fileName",containsString("included_file.xml"))).and(hasProperty("lineNumber",equalTo(2))))
753 both(hasProperty("fileName",containsString("included_file.xml")))
754 hasProperty("fileName",containsString("included_file.xml"))
755 containsString("included_file.xml")
756 both(hasProperty("fileName",containsString("included_file.xml"))).and(hasProperty("lineNumber",equalTo(2)))
757 hasProperty("lineNumber",equalTo(2))
758 equalTo(2)
759 thrown.expectMessage(startsWith("Warning: Could not find file "))
760 startsWith("Warning: Could not find file ")
761 buildRule.configureProject("src/etc/testcases/core/include/included_file_task_error/build.xml")
762 buildRule.executeTarget("test")
763 buildRule.configureProject("src/etc/testcases/core/include/with space/include.xml")
764 buildRule.executeTarget("test1")
765 buildRule.getLog()
766 buildRule.configureProject("src/etc/testcases/core/include/with space/simple.xml")
767 buildRule.executeTarget("test1")
768 buildRule.getLog()
769 buildRule.configureProject("src/etc/testcases/core/include/with space/relative.xml")
770 buildRule.executeTarget("test1")
771 buildRule.getLog()
772 p.setBasedir(projectBasedir)
773 IntrospectionHelper.getHelper(getClass())
774 getClass()
775 ih.isDynamic()
776 ih.isContainer()
777 thrown.expect(BuildException.class)
778 thrown.expect(hasProperty("cause",instanceOf(ComparisonFailure.class)))
779 hasProperty("cause",instanceOf(ComparisonFailure.class))
780 instanceOf(ComparisonFailure.class)
781 ih.addText(p,this,"test")
782 ih.addText(p,this,"test2")
783 IntrospectionHelper.getHelper(String.class)
784 ih.addText(p,"","test")
785 ih.getAddTextMethod()
786 IntrospectionHelper.getHelper(String.class)
787 IntrospectionHelper.getHelper(String.class).getAddTextMethod()
788 ih.supportsCharacters()
789 IntrospectionHelper.getHelper(String.class)
790 ih.supportsCharacters()
791 ih.getElementType("one")
792 ih.getElementType("two")
793 ih.getElementType("three")
794 ih.getElementType("four")
795 ih.getElementType("five")
796 ih.getElementType("six")
797 ih.createElement(p,this,"six")
798 ih.getElementType("seven")
799 ih.getElementType("eight")
800 ih.getElementType("nine")
801 ih.getElementType("ten")
802 ih.getElementType("eleven")
803 ih.getElementType("twelve")
804 ih.getElementType("thirteen")
805 ih.createElement(p,this,"thirteen")
806 ih.createElement(p,this,"thirteen").toString()
807 thrown.expect(BuildException.class)
808 thrown.expect(hasProperty("cause",instanceOf(NullPointerException.class)))
809 hasProperty("cause",instanceOf(NullPointerException.class))
810 instanceOf(NullPointerException.class)
811 ih.createElement(p,this,"fourteen")
812 thrown.expect(BuildException.class)
813 thrown.expect(hasProperty("cause",instanceOf(NullPointerException.class)))
814 hasProperty("cause",instanceOf(NullPointerException.class))
815 instanceOf(NullPointerException.class)
816 ih.createElement(p,this,"fifteen")
817 elemMap.put("six",String.class)
818 elemMap.put("thirteen",StringBuffer.class)
819 elemMap.put("fourteen",StringBuffer.class)
820 elemMap.put("fifteen",StringBuffer.class)
821 getExpectedNestedElements()
822 Collections.list(ih.getNestedElements())
823 ih.getNestedElements()
824 elemMap.get(name)
825 ih.getElementType(name)
826 elemMap.remove(name)
827 elemMap.isEmpty()
828 getExpectedNestedElements()
829 ih.getNestedElementMap()
830 elemMap.get(elemName)
831 elemMap.remove(elemName)
832 elemMap.isEmpty()
833 actualMap.clear()
834 ih.getElementMethod(elemName)
835 m.getName()
836 m.getReturnType()
837 m.getParameterTypes()
838 sb.append("test")
839 ih.setAttribute(p,this,"one","test")
840 ih.setAttribute(p,this,"two","test")
841 ih.setAttribute(p,this,"three","test")
842 ih.setAttribute(p,this,"four","test")
843 ih.setAttribute(p,this,"five","test")
844 ih.setAttribute(p,this,"six","test")
845 thrown.expect(BuildException.class)
846 thrown.expect(hasProperty("cause",instanceOf(ComparisonFailure.class)))
847 hasProperty("cause",instanceOf(ComparisonFailure.class))
848 instanceOf(ComparisonFailure.class)
849 ih.setAttribute(p,this,"seven","2")
850 ih.setAttribute(p,this,"seven","3")
851 thrown.expect(BuildException.class)
852 thrown.expect(hasProperty("cause",instanceOf(AssertionError.class)))
853 hasProperty("cause",instanceOf(AssertionError.class))
854 instanceOf(AssertionError.class)
855 ih.setAttribute(p,this,"eight","2")
856 ih.setAttribute(p,this,"eight","3")
857 thrown.expect(BuildException.class)
858 thrown.expect(hasProperty("cause",instanceOf(AssertionError.class)))
859 hasProperty("cause",instanceOf(AssertionError.class))
860 instanceOf(AssertionError.class)
861 ih.setAttribute(p,this,"nine","2")
862 ih.setAttribute(p,this,"nine","3")
863 thrown.expect(BuildException.class)
864 thrown.expect(hasProperty("cause",instanceOf(AssertionError.class)))
865 hasProperty("cause",instanceOf(AssertionError.class))
866 instanceOf(AssertionError.class)
867 ih.setAttribute(p,this,"ten","2")
868 ih.setAttribute(p,this,"ten","3")
869 thrown.expect(BuildException.class)
870 thrown.expect(hasProperty("cause",instanceOf(AssertionError.class)))
871 hasProperty("cause",instanceOf(AssertionError.class))
872 instanceOf(AssertionError.class)
873 ih.setAttribute(p,this,"eleven","2")
874 ih.setAttribute(p,this,"eleven","on")
875 thrown.expect(BuildException.class)
876 thrown.expect(hasProperty("cause",instanceOf(AssertionError.class)))
877 hasProperty("cause",instanceOf(AssertionError.class))
878 instanceOf(AssertionError.class)
879 ih.setAttribute(p,this,"twelve","2")
880 ih.setAttribute(p,this,"twelve","on")
881 thrown.expect(BuildException.class)
882 thrown.expect(hasProperty("cause",instanceOf(AssertionError.class)))
883 hasProperty("cause",instanceOf(AssertionError.class))
884 instanceOf(AssertionError.class)
885 ih.setAttribute(p,this,"thirteen","org.apache.tools.ant.Project")
886 ih.setAttribute(p,this,"thirteen","org.apache.tools.ant.ProjectHelper")
887 thrown.expect(BuildException.class)
888 thrown.expect(hasProperty("cause",instanceOf(ClassNotFoundException.class)))
889 hasProperty("cause",instanceOf(ClassNotFoundException.class))
890 instanceOf(ClassNotFoundException.class)
891 ih.setAttribute(p,this,"thirteen","org.apache.tools.ant.Project2")
892 thrown.expect(BuildException.class)
893 thrown.expect(hasProperty("cause",instanceOf(ComparisonFailure.class)))
894 hasProperty("cause",instanceOf(ComparisonFailure.class))
895 instanceOf(ComparisonFailure.class)
896 ih.setAttribute(p,this,"fourteen","2")
897 ih.setAttribute(p,this,"fourteen","on")
898 thrown.expect(BuildException.class)
899 thrown.expect(hasProperty("cause",instanceOf(AssertionError.class)))
900 hasProperty("cause",instanceOf(AssertionError.class))
901 instanceOf(AssertionError.class)
902 ih.setAttribute(p,this,"fifteen","abcd")
903 ih.setAttribute(p,this,"fifteen","on")
904 thrown.expect(BuildException.class)
905 thrown.expect(hasProperty("cause",instanceOf(AssertionError.class)))
906 hasProperty("cause",instanceOf(AssertionError.class))
907 instanceOf(AssertionError.class)
908 ih.setAttribute(p,this,"sixteen","abcd")
909 ih.setAttribute(p,this,"sixteen","on")
910 thrown.expect(BuildException.class)
911 thrown.expect(hasProperty("cause",instanceOf(AssertionError.class)))
912 hasProperty("cause",instanceOf(AssertionError.class))
913 instanceOf(AssertionError.class)
914 ih.setAttribute(p,this,"seventeen","17")
915 ih.setAttribute(p,this,"seventeen","3")
916 thrown.expect(BuildException.class)
917 thrown.expect(hasProperty("cause",instanceOf(AssertionError.class)))
918 hasProperty("cause",instanceOf(AssertionError.class))
919 instanceOf(AssertionError.class)
920 ih.setAttribute(p,this,"eightteen","18")
921 ih.setAttribute(p,this,"eightteen","3")
922 thrown.expect(BuildException.class)
923 thrown.expect(hasProperty("cause",instanceOf(AssertionError.class)))
924 hasProperty("cause",instanceOf(AssertionError.class))
925 instanceOf(AssertionError.class)
926 ih.setAttribute(p,this,"nineteen","19")
927 ih.setAttribute(p,this,"nineteen","3")
928 attrMap.put("seven",String.class)
929 attrMap.put("eight",Integer.TYPE)
930 attrMap.put("nine",Integer.class)
931 attrMap.put("ten",File.class)
932 attrMap.put("eleven",Boolean.TYPE)
933 attrMap.put("twelve",Boolean.class)
934 attrMap.put("thirteen",Class.class)
935 attrMap.put("fourteen",StringBuffer.class)
936 attrMap.put("fifteen",Character.TYPE)
937 attrMap.put("sixteen",Character.class)
938 attrMap.put("seventeen",Byte.TYPE)
939 attrMap.put("eightteen",Short.TYPE)
940 attrMap.put("nineteen",Double.TYPE)
941 attrMap.put("twenty",Path.class)
942 attrMap.put("name",String.class)
943 getExpectedAttributes()
944 Collections.list(ih.getAttributes())
945 ih.getAttributes()
946 attrMap.get(name)
947 ih.getAttributeType(name)
948 attrMap.remove(name)
949 attrMap.remove("name")
950 attrMap.isEmpty()
951 getExpectedAttributes()
952 ih.getAttributeMap()
953 attrMap.get(attrName)
954 attrMap.remove(attrName)
955 attrMap.remove("name")
956 attrMap.isEmpty()
957 thrown.expect(UnsupportedOperationException.class)
958 ih.getAttributeMap()
959 ih.getAttributeMap().clear()
960 newFile(projectBasedir+20).toPath()
961 Paths.get("toto")
962 thrown.expect(BuildException.class)
963 thrown.expectMessage("doesn't support the \"onehundred\" attribute.")
964 ih.getAttributeMethod(attrName)
965 i.intValue()
966 f.getAbsolutePath()
967 Os.isFamily("unix")
968 Os.isFamily("openvms")
969 Os.isFamily("netware")
970 path.toLowerCase(Locale.US)
971 path.toLowerCase(Locale.US)
972 path.toLowerCase(Locale.US).substring(1)
973 sb.toString()
974 c.charValue()
975 p.toAbsolutePath()
976 p.toAbsolutePath().toString()
977 Os.isFamily("unix")
978 Os.isFamily("openvms")
979 Os.isFamily("netware")
980 path.toLowerCase(Locale.US)
981 path.toLowerCase(Locale.US)
982 path.toLowerCase(Locale.US).substring(1)
983 ih.getExtensionPoints()
984 extensions.size()
985 extensions.get(adders-2)
986 makeTable("key","value")
987 makeTable("1","2")
988 extensions.get(adders-1)
989 makeTable("1","2")
990 m.getName()
991 m.getReturnType()
992 m.getParameterTypes()
993 m.invoke(this,arg)
994 m.invoke(this,badArg)
995 hasProperty("cause",instanceOf(AssertionError.class))
996 instanceOf(AssertionError.class)
997 m.isEmpty()
998 m.isEmpty()
999 table.put(key,value)
1000 buildRule.configureProject("src/etc/testcases/core/loaderref/loaderref.xml")
1001 buildRule.executeTarget("setUp")
1002 thrown.expect(BuildException.class)
1003 thrown.expectMessage("does not reference a class loader")
1004 buildRule.executeTarget("testbadref")
1005 buildRule.configureProject("src/etc/testcases/core/location.xml")
1006 buildRule.executeTarget("testPlainTask")
1007 buildRule.getProject()
1008 buildRule.getProject().getReference("echo")
1009 e.getLocation()
1010 e.getLocation()
1011 e.getLocation().getLineNumber()
1012 buildRule.executeTarget("testStandaloneType")
1013 buildRule.getProject()
1014 buildRule.getProject().getReference("echo2")
1015 buildRule.getProject()
1016 buildRule.getProject().getReference("fs")
1017 f.getLocation()
1018 e.getLocation()
1019 e.getLocation().getLineNumber()
1020 f.getLocation()
1021 f.getLocation().getLineNumber()
1022 buildRule.executeTarget("testConditionTask")
1023 buildRule.getProject()
1024 buildRule.getProject().getReference("cond")
1025 ta.getProxy()
1026 c.getLocation()
1027 c.getLocation()
1028 c.getLocation().getLineNumber()
1029 buildRule.executeTarget("testMacrodefWrappedTask")
1030 buildRule.getProject()
1031 buildRule.getProject().getReference("echo3")
1032 buildRule.getLog()
1033 containsString("Line: "+(e.getLocation().getLineNumber()+1))
1034 e.getLocation()
1035 e.getLocation().getLineNumber()
1036 buildRule.executeTarget("testPresetdefWrappedTask")
1037 buildRule.getProject()
1038 buildRule.getProject().getReference("echo4")
1039 buildRule.getLog()
1040 containsString("Line: "+(e.getLocation().getLineNumber()+1))
1041 e.getLocation()
1042 e.getLocation().getLineNumber()
1043 log("Line: "+getLocation().getLineNumber(),Project.MSG_INFO)
1044 getLocation()
1045 getLocation().getLineNumber()
1046 pc.setProject(expectedProject)
1047 pc.setLocation(expectedLocation)
1048 pc.setDescription(expectedDescription)
1049 pc.clone()
1050 cloned.getProject()
1051 cloned.getLocation()
1052 cloned.getDescription()
1053 buildFile.getName()
1054 buildFile.getName().endsWith(".myext")
1055 r.getName()
1056 r.getName().endsWith(".myext")
1057 ProjectHelperRepository.getInstance()
1058 repo.registerProjectHelper(SomeHelper.class)
1059 repo.getProjectHelperForBuildFile(r)
1060 instanceOf(ProjectHelper2.class)
1061 repo.getProjectHelperForAntlib(r)
1062 instanceOf(ProjectHelper2.class)
1063 repo.getProjectHelperForBuildFile(r)
1064 instanceOf(SomeHelper.class)
1065 repo.getProjectHelperForAntlib(r)
1066 instanceOf(SomeHelper.class)
1067 repo.getProjectHelperForBuildFile(r)
1068 instanceOf(ProjectHelper2.class)
1069 repo.getProjectHelperForAntlib(r)
1070 instanceOf(ProjectHelper2.class)
1071 repo.getProjectHelperForBuildFile(r)
1072 instanceOf(ProjectHelper2.class)
1073 repo.getProjectHelperForAntlib(r)
1074 instanceOf(ProjectHelper2.class)
1075 ProjectHelperRepository.getInstance()
1076 ProjectHelperRepository.getInstance().registerProjectHelper(IncorrectHelper.class)
1077 ProjectHelperRepository.getInstance()
1078 ProjectHelperRepository.getInstance().registerProjectHelper("xxx.yyy.zzz.UnknownHelper")
1079 p.init()
1080 newFile(File.separator).getAbsolutePath()
1081 newFile(File.separator).getAbsolutePath().toUpperCase()
1082 p.createDataType("dummy")
1083 p.createDataType("fileset")
1084 instanceOf(FileSet.class)
1085 p.createDataType("patternset")
1086 instanceOf(PatternSet.class)
1087 p.createDataType("path")
1088 instanceOf(Path.class)
1089 assumeTrue("Not DOS or Netware",Os.isFamily("netware")||Os.isFamily("dos"))
1090 Os.isFamily("netware")
1091 Os.isFamily("dos")
1092 localize(File.separator)
1093 p.resolveFile("/",null)
1094 p.resolveFile("/",null).getPath()
1095 localize(File.separator)
1096 p.resolveFile("\\",null)
1097 p.resolveFile("\\",null).getPath()
1098 p.resolveFile(driveSpec+"/",null)
1099 p.resolveFile(driveSpec+"/",null).getPath()
1100 p.resolveFile(driveSpec+"\\",null)
1101 p.resolveFile(driveSpec+"\\",null).getPath()
1102 p.resolveFile(driveSpecLower+"/",null)
1103 p.resolveFile(driveSpecLower+"/",null).getPath()
1104 p.resolveFile(driveSpecLower+"\\",null)
1105 p.resolveFile(driveSpecLower+"\\",null).getPath()
1106 p.resolveFile(driveSpec+"/////",null)
1107 p.resolveFile(driveSpec+"/////",null).getPath()
1108 p.resolveFile(driveSpec+"\\\\\\\\\\\\",null)
1109 p.resolveFile(driveSpec+"\\\\\\\\\\\\",null).getPath()
1110 assumeFalse("DOS or Netware",Os.isFamily("netware")||Os.isFamily("dos"))
1111 Os.isFamily("netware")
1112 Os.isFamily("dos")
1113 p.resolveFile("/",null)
1114 p.resolveFile("/",null).getPath()
1115 p.resolveFile("\\",null)
1116 p.resolveFile("\\",null).getPath()
1117 System.getProperty("user.dir")
1118 p.resolveFile(driveSpec+"/",null)
1119 p.resolveFile(driveSpec+"/",null).getPath()
1120 p.resolveFile(driveSpec+"\\",null)
1121 p.resolveFile(driveSpec+"\\",null).getPath()
1122 p.resolveFile(driveSpecLower+"/",null)
1123 p.resolveFile(driveSpecLower+"/",null).getPath()
1124 p.resolveFile(driveSpecLower+"\\",null)
1125 p.resolveFile(driveSpecLower+"\\",null).getPath()
1126 localize("/1/2/3/4")
1127 p.resolveFile("4",newFile(localize("/1/2/3")))
1128 localize("/1/2/3")
1129 p.resolveFile("4",newFile(localize("/1/2/3"))).getPath()
1130 localize("/1/2/3/4")
1131 p.resolveFile("./4",newFile(localize("/1/2/3")))
1132 localize("/1/2/3")
1133 p.resolveFile("./4",newFile(localize("/1/2/3"))).getPath()
1134 localize("/1/2/3/4")
1135 p.resolveFile(".\\4",newFile(localize("/1/2/3")))
1136 localize("/1/2/3")
1137 p.resolveFile(".\\4",newFile(localize("/1/2/3"))).getPath()
1138 localize("/1/2/3/4")
1139 p.resolveFile("./.\\4",newFile(localize("/1/2/3")))
1140 localize("/1/2/3")
1141 p.resolveFile("./.\\4",newFile(localize("/1/2/3"))).getPath()
1142 localize("/1/2/3/4")
1143 p.resolveFile("../3/4",newFile(localize("/1/2/3")))
1144 localize("/1/2/3")
1145 p.resolveFile("../3/4",newFile(localize("/1/2/3"))).getPath()
1146 localize("/1/2/3/4")
1147 p.resolveFile("..\\3\\4",newFile(localize("/1/2/3")))
1148 localize("/1/2/3")
1149 p.resolveFile("..\\3\\4",newFile(localize("/1/2/3"))).getPath()
1150 localize("/1/2/3/4")
1151 p.resolveFile("../../5/.././2/./3/6/../4",newFile(localize("/1/2/3")))
1152 localize("/1/2/3")
1153 p.resolveFile("../../5/.././2/./3/6/../4",newFile(localize("/1/2/3"))).getPath()
1154 localize("/1/2/3/4")
1155 p.resolveFile("..\\../5/..\\./2/./3/6\\../4",newFile(localize("/1/2/3")))
1156 localize("/1/2/3")
1157 p.resolveFile("..\\../5/..\\./2/./3/6\\../4",newFile(localize("/1/2/3"))).getPath()
1158 path.substring(1)
1159 path.replace('\\',File.separatorChar)
1160 path.replace('\\',File.separatorChar).replace('/',File.separatorChar)
1161 assumeTrue("Not DOS or Netware",Os.isFamily("netware")||Os.isFamily("dos"))
1162 Os.isFamily("netware")
1163 Os.isFamily("dos")
1164 s1.length()
1165 s2.length()
1166 sb1.setCharAt(0,Character.toUpperCase(s1.charAt(0)))
1167 Character.toUpperCase(s1.charAt(0))
1168 s1.charAt(0)
1169 sb2.setCharAt(0,Character.toUpperCase(s2.charAt(0)))
1170 Character.toUpperCase(s2.charAt(0))
1171 s2.charAt(0)
1172 sb1.toString()
1173 sb2.toString()
1174 thrown.expect(BuildException.class)
1175 thrown.expectMessage(message)
1176 mbl.addBuildEvent(message,Project.MSG_ERR)
1177 p.addTaskDefinition(dummyName,taskClass)
1178 p.getTaskDefinitions()
1179 not(hasKey(dummyName))
1180 hasKey(dummyName)
1181 p.addBuildListener(mbl)
1182 p.addTaskDefinition("Ok",DummyTaskOk.class)
1183 p.getTaskDefinitions()
1184 p.getTaskDefinitions().get("Ok")
1185 p.addTaskDefinition("OkNonTask",DummyTaskOkNonTask.class)
1186 p.getTaskDefinitions()
1187 p.getTaskDefinitions().get("OkNonTask")
1188 mbl.addBuildEvent("return type of execute() should be void but was \"int\" in "+DummyTaskWithNonVoidExecute.class,Project.MSG_WARN)
1189 p.addTaskDefinition("NonVoidExecute",DummyTaskWithNonVoidExecute.class)
1190 p.getTaskDefinitions()
1191 p.getTaskDefinitions().get("NonVoidExecute")
1192 p.getInputHandler()
1193 instanceOf(DefaultInputHandler.class)
1194 p.setInputHandler(pfih)
1195 p.getInputHandler()
1196 p.getTaskDefinitions()
1197 hasKey("echo")
1198 p.getTaskDefinitions()
1199 hasValue(org.apache.tools.ant.taskdefs.Echo.class)
1200 thrown.expect(BuildException.class)
1201 thrown.expectMessage("Duplicate target 'twice'")
1202 buildRule.configureProject("src/etc/testcases/core/duplicate-target.xml")
1203 buildRule.configureProject("src/etc/testcases/core/duplicate-target2.xml")
1204 buildRule.executeTarget("once")
1205 buildRule.getLog()
1206 containsString("once from buildfile")
1207 actual.getMessage()
1208 System.err.println(BAR)
1209 System.out.println(BAR)
1210 p.log(BAR,Project.MSG_INFO)
1211 p.log(FOO,Project.MSG_INFO)
1212 t.start()
1213 t.join(2000)
1214 actual.getMessage()
1215 System.err.println(BAR)
1216 System.out.println(BAR)
1217 p.log(BAR,Project.MSG_INFO)
1218 p.log(FOO,Project.MSG_INFO)
1219 t.start()
1220 t.join(2000)
1221 p.log(newTask(){},null,newThrowable(),Project.MSG_ERR)
1222 Arrays.asList(newObject[][]{{"",""},{"$","$"},{"$$-","$-"},{"$$","$"},{"a${expanded}b","aEXPANDEDb"},{"${expanded}${expanded}","EXPANDEDEXPANDED"},{"$$$","$$"},{"$$$$-","$$-"},{"",""},{"Class$$subclass","Class$subclass"},{"$-","$-"},{"Class$subclass","Class$subclass"},{"$$$-","$$-"},{"$$$$$","$$$"},{"${unassigned.property}","${unassigned.property}"},{"a$b","a$b"},{"$}}","$}}"}})
1223 buildRule.configureProject("src/etc/testcases/core/immutable.xml")
1224 buildRule.getProject()
1225 buildRule.getProject().setProperty("expanded","EXPANDED")
1226 buildRule.getProject()
1227 buildRule.getProject().replaceProperties(input)
1228 testFolder.newFile("propertyfilecli.properties")
1229 fw.write("w=world\nmessage=Hello, ${w}\n")
1230 testFolder.newFile("propertyfilecli.xml")
1231 fw.write("<project><echo>${message}</echo></project>")
1232 testFolder.newFile("propertyfilecli.log")
1233 m.startAnt(newString[]{"-propertyfile",props.getAbsolutePath(),"-f",build.getAbsolutePath(),"-l",log.getAbsolutePath()},null,null)
1234 props.getAbsolutePath()
1235 build.getAbsolutePath()
1236 log.getAbsolutePath()
1237 FileUtils.safeReadFully(fr)
1238 containsString("Hello, world")
1239 buildRule.configureProject("src/etc/testcases/core/taskcontainer.xml")
1240 buildRule.executeTarget("testPropertyExpansion")
1241 buildRule.getLog()
1242 containsString(("As attribute: it worked"))
1243 buildRule.getLog()
1244 containsString(("As nested text: it worked"))
1245 buildRule.executeTarget("testTaskdef")
1246 buildRule.getLog()
1247 containsString("As attribute: it worked")
1248 buildRule.getLog()
1249 containsString("As nested text: it worked")
1250 buildRule.executeTarget("testCaseInsensitive")
1251 buildRule.getLog()
1252 containsString("hello ")
1253 buildRule.getLog()
1254 containsString("world")
1255 Arrays.asList(newObject[][]{{"notarget",""},{"toplevelant",""},{"targetlevelant","foo"}})
1256 buildRule.configureProject("src/etc/testcases/core/topleveltasks/"+fileName+".xml")
1257 buildRule.executeTarget(targetName)
1258 buildRule.getLog()
1259 buildRule.configureProject("src/etc/testcases/core/unknownelement.xml")
1260 buildRule.executeTarget("testMaybeConfigure")
1261 event.getTask()
1262 event.getTask()
1263 instanceOf(UnknownElement.class)
1264 ((UnknownElement)ue).getTask()
1265 t.getClass()
1266 t.getClass().getName()
1267 buildRule.executeTarget("echo")
1268 instanceOf(UnknownElement.class)
1269 ((UnknownElement)ue).getTask()
1270 t.getClass()
1271 t.getClass().getName()
1272 buildRule.executeTarget("echo")
1273 parent.fromChild()
1274 children.add(t)
1275 log("fromchild")
1276 parent.fromChild()
1277 logger.buildStarted(event)
1278 logger.buildFinished(event)
1279 buildRule.configureProject("src/etc/testcases/filters/concat.xml")
1280 buildRule.executeTarget("testFilterReaderNoArgs")
1281 buildRule.getProject()
1282 buildRule.getProject().getProperty("output")
1283 buildRule.getProject()
1284 buildRule.getProject().getProperty("output")
1285 FileUtilities.getFileContents(expected)
1286 FileUtilities.getFileContents(result)
1287 doTest("testFilterReaderPrepend",FILE_PREPEND_WITH,FILE_APPEND)
1288 doTest("testFilterReaderAppend",FILE_PREPEND,FILE_APPEND_WITH)
1289 doTest("testFilterReaderPrependAppend",FILE_PREPEND_WITH,FILE_APPEND_WITH)
1290 doTest("testConcatFilter",FILE_PREPEND,FILE_APPEND)
1291 doTest("testConcatFilterPrepend",FILE_PREPEND_WITH,FILE_APPEND)
1292 doTest("testConcatFilterAppend",FILE_PREPEND,FILE_APPEND_WITH)
1293 doTest("testConcatFilterPrependAppend",FILE_PREPEND_WITH,FILE_APPEND_WITH)
1294 buildRule.executeTarget(target)
1295 FileUtilities.getFileContents(newFile(buildRule.getProject().getProperty("output")+"/concat."+target.substring(4)+".test"))
1296 buildRule.getProject()
1297 buildRule.getProject().getProperty("output")
1298 target.substring(4)
1299 startsWith(expectedStart)
1300 endsWith(expectedEnd)
1301 buildRule.configureProject("src/etc/testcases/filters/dynamicfilter.xml")
1302 buildRule.executeTarget("setUp")
1303 buildRule.executeTarget("dynamicfilter")
1304 FileUtilities.getFileContents(newFile(buildRule.getProject().getProperty("output")+"/dynamicfilter"))
1305 buildRule.getProject()
1306 buildRule.getProject().getProperty("output")
1307 containsString("hellO wOrld")
1308 in.read()
1309 in.read()
1310 buildRule.configureProject("src/etc/testcases/filters/build.xml")
1311 buildRule.executeTarget("testEscapeUnicode")
1312 buildRule.getProject()
1313 buildRule.getProject().resolveFile("expected/escapeunicode.test")
1314 buildRule.getProject()
1315 buildRule.getProject().getProperty("output")
1316 FileUtilities.getFileContents(expected)
1317 FileUtilities.getFileContents(result)
1318 Arrays.asList(newObject[][]{{"head","head"},{"headLines","headLines"},{"headSkip","headSkip"},{"headLinesSkip","headLinesSkip"},{"filterReaderHeadLinesSkip","headLinesSkip"},{"tail","tail"},{"tailSkip","tailSkip"},{"tailLines","tailLines"},{"tailLinesSkip","tailLinesSkip"},{"filterReaderTailLinesSkip","tailLinesSkip"},{"headTail","headtail"}})
1319 buildRule.configureProject("src/etc/testcases/filters/head-tail.xml")
1320 buildRule.executeTarget("test"+result.substring(0,1).toUpperCase()+result.substring(1))
1321 result.substring(0,1)
1322 result.substring(0,1).toUpperCase()
1323 result.substring(1)
1324 buildRule.getProject()
1325 buildRule.getProject().resolveFile("expected/head-tail."+input+".test")
1326 buildRule.getProject()
1327 buildRule.getProject().getProperty("output")
1328 FileUtilities.getFileContents(expected)
1329 FileUtilities.getFileContents(actual)
1330 buildRule.configureProject("src/etc/testcases/filters/build.xml")
1331 buildRule.executeTarget("testLineContains")
1332 buildRule.getProject()
1333 buildRule.getProject().resolveFile("expected/linecontains.test")
1334 buildRule.getProject()
1335 buildRule.getProject().getProperty("output")
1336 FileUtilities.getFileContents(expected)
1337 FileUtilities.getFileContents(result)
1338 buildRule.executeTarget("testNegateLineContains")
1339 buildRule.executeTarget("testMatchAny")
1340 buildRule.getProject()
1341 buildRule.getProject().resolveFile("expected/linecontains-matchany.test")
1342 buildRule.getProject()
1343 buildRule.getProject().getProperty("output")
1344 FileUtilities.getFileContents(expected)
1345 FileUtilities.getFileContents(result)
1346 buildRule.executeTarget("testMatchAnyNegate")
1347 buildRule.getProject()
1348 buildRule.getProject().resolveFile("expected/linecontains-matchany-negate.test")
1349 buildRule.getProject()
1350 buildRule.getProject().getProperty("output")
1351 FileUtilities.getFileContents(expected)
1352 FileUtilities.getFileContents(result)
1353 buildRule.configureProject("src/etc/testcases/filters/build.xml")
1354 buildRule.executeTarget("testNoAddNewLine")
1355 Arrays.asList(newObject[][]{{"replaceTokens","replacetokens"},{"replaceTokensPropertyFile","replacetokens"},{"replaceTokensDoubleEncoded","replacetokens.double"},{"replaceTokensDoubleEncodedToSimple","replacetokens"},{"replaceTokensMustacheStyle","replacetokens"}})
1356 buildRule.configureProject("src/etc/testcases/filters/build.xml")
1357 buildRule.executeTarget("test"+result.substring(0,1).toUpperCase()+result.substring(1))
1358 result.substring(0,1)
1359 result.substring(0,1).toUpperCase()
1360 result.substring(1)
1361 buildRule.getProject()
1362 buildRule.getProject().resolveFile("expected/"+input+".test")
1363 buildRule.getProject()
1364 buildRule.getProject().getProperty("output")
1365 FileUtilities.getFileContents(expected)
1366 FileUtilities.getFileContents(actual)
1367 buildRule.configureProject("src/etc/testcases/filters/build.xml")
1368 buildRule.executeTarget("testStripJavaComments")
1369 buildRule.getProject()
1370 buildRule.getProject().resolveFile("expected/stripjavacomments.test")
1371 buildRule.getProject()
1372 buildRule.getProject().getProperty("output")
1373 FileUtilities.getFileContents(expected)
1374 FileUtilities.getFileContents(result)
1375 buildRule.configureProject("src/etc/testcases/filters/tokenfilter.xml")
1376 buildRule.executeTarget("setUp")
1377 buildRule.executeTarget("tokenfilter")
1378 buildRule.executeTarget("trimignore")
1379 buildRule.getLog()
1380 containsString("Hello-World")
1381 buildRule.executeTarget("stringtokenizer")
1382 buildRule.getLog()
1383 containsString("#This#is#a#number#of#words#")
1384 buildRule.executeTarget("unixlineoutput")
1385 getFileString(buildRule.getProject().getProperty("output")+"/unixlineoutput")
1386 buildRule.getProject()
1387 buildRule.getProject().getProperty("output")
1388 containsString("\nThis\nis\na\nnumber\nof\nwords\n")
1389 buildRule.executeTarget("doslineoutput")
1390 getFileString(buildRule.getProject().getProperty("output")+"/doslineoutput")
1391 buildRule.getProject()
1392 buildRule.getProject().getProperty("output")
1393 containsString("\r\nThis\r\nis\r\na\r\nnumber\r\nof\r\nwords\r\n")
1394 buildRule.executeTarget("filetokenizer")
1395 getFileString(buildRule.getProject().getProperty("output")+"/filetokenizer")
1396 buildRule.getProject()
1397 buildRule.getProject().getProperty("output")
1398 both(containsString("   of words"))
1399 containsString("   of words")
1400 both(containsString("   of words")).and(not(containsString(" This is")))
1401 not(containsString(" This is"))
1402 containsString(" This is")
1403 buildRule.executeTarget("replacestring")
1404 getFileString(buildRule.getProject().getProperty("output")+"/replacestring")
1405 buildRule.getProject()
1406 buildRule.getProject().getProperty("output")
1407 containsString("this is the moon")
1408 buildRule.executeTarget("replacestrings")
1409 buildRule.getLog()
1410 containsString("bar bar bar")
1411 buildRule.executeTarget("containsstring")
1412 getFileString(buildRule.getProject().getProperty("output")+"/containsstring")
1413 buildRule.getProject()
1414 buildRule.getProject().getProperty("output")
1415 both(containsString("this is a line contains foo"))
1416 containsString("this is a line contains foo")
1417 both(containsString("this is a line contains foo")).and(not(containsString("this line does not")))
1418 not(containsString("this line does not"))
1419 containsString("this line does not")
1420 buildRule.executeTarget("hasregex")
1421 assumeThat("Regex not present",getFileString(buildRule.getProject().getProperty("output")+"/replaceregexp"),containsString("bye world"))
1422 getFileString(buildRule.getProject().getProperty("output")+"/replaceregexp")
1423 buildRule.getProject()
1424 buildRule.getProject().getProperty("output")
1425 containsString("bye world")
1426 buildRule.executeTarget("replaceregex")
1427 getFileString(buildRule.getProject().getProperty("output")+"/replaceregex")
1428 buildRule.getProject()
1429 buildRule.getProject().getProperty("output")
1430 containsString("world world world world")
1431 containsString("dog Cat dog")
1432 containsString("moon Sun Sun")
1433 containsString("found WhiteSpace")
1434 containsString("Found digits [1234]")
1435 not(containsString("This is a line with digits"))
1436 containsString("This is a line with digits")
1437 buildRule.executeTarget("hasregex")
1438 assumeThat("Regex not present",getFileString(buildRule.getProject().getProperty("output")+"/replaceregexp"),containsString("bye world"))
1439 getFileString(buildRule.getProject().getProperty("output")+"/replaceregexp")
1440 buildRule.getProject()
1441 buildRule.getProject().getProperty("output")
1442 containsString("bye world")
1443 buildRule.executeTarget("filterreplaceregex")
1444 getFileString(buildRule.getProject().getProperty("output")+"/filterreplaceregex")
1445 buildRule.getProject()
1446 buildRule.getProject().getProperty("output")
1447 containsString("world world world world")
1448 buildRule.executeTarget("hasregex")
1449 assumeThat("Regex not present",getFileString(buildRule.getProject().getProperty("output")+"/replaceregexp"),containsString("bye world"))
1450 getFileString(buildRule.getProject().getProperty("output")+"/replaceregexp")
1451 buildRule.getProject()
1452 buildRule.getProject().getProperty("output")
1453 containsString("bye world")
1454 buildRule.executeTarget("dollermatch")
1455 buildRule.executeTarget("trimfile")
1456 getFileString(buildRule.getProject().getProperty("output")+"/trimfile")
1457 buildRule.getProject()
1458 buildRule.getProject().getProperty("output")
1459 startsWith("This is th")
1460 endsWith("second line.")
1461 containsString("  This is the second")
1462 buildRule.executeTarget("trimfilebyline")
1463 getFileString(buildRule.getProject().getProperty("output")+"/trimfilebyline")
1464 buildRule.getProject()
1465 buildRule.getProject().getProperty("output")
1466 not(startsWith("This is th"))
1467 startsWith("This is th")
1468 not(endsWith("second line."))
1469 endsWith("second line.")
1470 not(containsString("  This is the second"))
1471 containsString("  This is the second")
1472 containsString("file.\nThis is the second")
1473 buildRule.executeTarget("filterreplacestring")
1474 getFileString(buildRule.getProject().getProperty("output")+"/filterreplacestring")
1475 buildRule.getProject()
1476 buildRule.getProject().getProperty("output")
1477 containsString("This is the moon")
1478 buildRule.executeTarget("filterreplacestrings")
1479 buildRule.getLog()
1480 containsString("bar bar bar")
1481 buildRule.executeTarget("hasregex")
1482 assumeThat("Regex not present",getFileString(buildRule.getProject().getProperty("output")+"/replaceregexp"),containsString("bye world"))
1483 getFileString(buildRule.getProject().getProperty("output")+"/replaceregexp")
1484 buildRule.getProject()
1485 buildRule.getProject().getProperty("output")
1486 containsString("bye world")
1487 buildRule.executeTarget("containsregex")
1488 getFileString(buildRule.getProject().getProperty("output")+"/containsregex")
1489 buildRule.getProject()
1490 buildRule.getProject().getProperty("output")
1491 containsString("hello world")
1492 not(containsString("this is the moon"))
1493 containsString("this is the moon")
1494 containsString("World here")
1495 buildRule.executeTarget("hasregex")
1496 assumeThat("Regex not present",getFileString(buildRule.getProject().getProperty("output")+"/replaceregexp"),containsString("bye world"))
1497 getFileString(buildRule.getProject().getProperty("output")+"/replaceregexp")
1498 buildRule.getProject()
1499 buildRule.getProject().getProperty("output")
1500 containsString("bye world")
1501 buildRule.executeTarget("filtercontainsregex")
1502 getFileString(buildRule.getProject().getProperty("output")+"/filtercontainsregex")
1503 buildRule.getProject()
1504 buildRule.getProject().getProperty("output")
1505 containsString("hello world")
1506 not(containsString("this is the moon"))
1507 containsString("this is the moon")
1508 containsString("World here")
1509 buildRule.executeTarget("hasregex")
1510 assumeThat("Regex not present",getFileString(buildRule.getProject().getProperty("output")+"/replaceregexp"),containsString("bye world"))
1511 getFileString(buildRule.getProject().getProperty("output")+"/replaceregexp")
1512 buildRule.getProject()
1513 buildRule.getProject().getProperty("output")
1514 containsString("bye world")
1515 buildRule.executeTarget("containsregex2")
1516 getFileString(buildRule.getProject().getProperty("output")+"/containsregex2")
1517 buildRule.getProject()
1518 buildRule.getProject().getProperty("output")
1519 containsString("void register_bits();")
1520 buildRule.executeTarget("deletecharacters")
1521 getFileString(buildRule.getProject().getProperty("output")+"/deletechars")
1522 buildRule.getProject()
1523 buildRule.getProject().getProperty("output")
1524 not(containsString("#"))
1525 containsString("#")
1526 not(containsString("*"))
1527 containsString("*")
1528 containsString("This is some ")
1529 assumeThat("Project does not have 'testScriptFilter' target",buildRule.getProject().getTargets(),hasKey("testScriptFilter"))
1530 buildRule.getProject()
1531 buildRule.getProject().getTargets()
1532 hasKey("testScriptFilter")
1533 buildRule.executeTarget("scriptfilter")
1534 getFileString(buildRule.getProject().getProperty("output")+"/scriptfilter")
1535 buildRule.getProject()
1536 buildRule.getProject().getProperty("output")
1537 containsString("HELLO WORLD")
1538 assumeThat("Project does not have 'testScriptFilter' target",buildRule.getProject().getTargets(),hasKey("testScriptFilter"))
1539 buildRule.getProject()
1540 buildRule.getProject().getTargets()
1541 hasKey("testScriptFilter")
1542 buildRule.executeTarget("scriptfilter2")
1543 getFileString(buildRule.getProject().getProperty("output")+"/scriptfilter2")
1544 buildRule.getProject()
1545 buildRule.getProject().getProperty("output")
1546 containsString("HELLO MOON")
1547 buildRule.executeTarget("customtokenfilter")
1548 getFileString(buildRule.getProject().getProperty("output")+"/custom")
1549 buildRule.getProject()
1550 buildRule.getProject().getProperty("output")
1551 containsString("Hello World")
1552 buildRule.getProject()
1553 buildRule.getProject().resolveFile(filename)
1554 readFully(r)
1555 token.isEmpty()
1556 token.substring(0,1)
1557 token.substring(0,1).toUpperCase()
1558 token.substring(1)
1559 Os.isFamily(Os.FAMILY_DOS)
1560 Os.isFamily(Os.FAMILY_UNIX)
1561 Locator.fromURI(uri)
1562 expectedResult.isEmpty()
1563 newFile(path).toURI()
1564 newFile(path).toURI().toASCIIString()
1565 System.getProperty("user.dir")
1566 resolveTo(asuri,fullpath,fullpath)
1567 result.substring(result.lastIndexOf(File.separatorChar)+1)
1568 result.lastIndexOf(File.separatorChar)
1569 resolveTo("file:\\\\PC03\\jclasses\\lib\\ant-1.7.0.jar",""+"\\\\PC03\\jclasses\\lib\\ant-1.7.0.jar","\\\\PC03\\jclasses\\lib\\ant-1.7.0.jar")
1570 resolveTo("file:///PC03/jclasses/lib/ant-1.7.0.jar","///PC03/jclasses/lib/ant-1.7.0.jar","\\\\PC03\\jclasses\\lib\\ant-1.7.0.jar")
1571 resolveTo("file://cluster/home/ant/lib","//cluster/home/ant/lib","\\\\cluster\\home\\ant\\lib")
1572 resolveTo("file:/home/ant/lib","/home/ant/lib",null)
1573 resolveTo("file:C:\\Program Files\\Ant\\lib","C:\\Program Files\\Ant\\lib","C:\\Program Files\\Ant\\lib")
1574 Locator.fromJarURI(SHARED_JAR_URI)
1575 LAUNCHER_JAR.replace('/','\\')
1576 assumeTrue("not Windows",windows)
1577 Locator.fromJarURI(SHARED_JAR_URI)
1578 f.getAbsolutePath()
1579 path.indexOf("\\\\")
1580 thrown.expect(IllegalArgumentException.class)
1581 thrown.expectMessage(Locator.ERROR_NOT_FILE_URI+url)
1582 Locator.fromURI(url)
1583 result.charAt(1)
1584 Integer.toHexString(umlauted)
1585 Locator.encodeURI("file:/tmp/a\u00E7a\u00ED berry")
1586 Locator.decodeUri("file:/tmp/a%C3%A7a%C3%AD%20berry")
1587 Locator.decodeUri("file:/tmp/a\u00E7a\u00ED%20berry")
1588 Locator.decodeUri("file:/tmp/hezky%20\u010Desky")
1589 buildRule.configureProject("src/etc/testcases/taskdefs/abstractcvstask.xml")
1590 buildRule.executeTarget("setUp")
1591 buildRule.executeTarget("cleanup")
1592 buildRule.executeTarget("all")
1593 buildRule.getProject()
1594 buildRule.getProject().getProperty("output")
1595 f.exists()
1596 buildRule.executeTarget("package-attribute")
1597 buildRule.getLog()
1598 containsString("U src/Makefile")
1599 f.exists()
1600 buildRule.getProject()
1601 buildRule.getProject().getProperty("output")
1602 f.exists()
1603 buildRule.executeTarget("tag-attribute")
1604 buildRule.getLog()
1605 containsString("OPENBSD_5_3")
1606 f.exists()
1607 buildRule.configureProject("src/etc/testcases/taskdefs/antlib.xml")
1608 System.getProperty("tests.and.ant.share.classloader")
1609 Project.toBoolean(property)
1610 buildRule.executeTarget("antlib.file")
1611 buildRule.getLog()
1612 System.getProperty("build.tests.value")
1613 buildRule.executeTarget("antlib.resource")
1614 buildRule.getLog()
1615 buildRule.executeTarget("ns.current")
1616 buildRule.getLog()
1617 assumeTrue("Test requires shared JVM",isSharedJVM())
1618 isSharedJVM()
1619 buildRule.executeTarget("antlib_uri")
1620 assumeTrue("Test requires shared JVM",isSharedJVM())
1621 isSharedJVM()
1622 buildRule.executeTarget("antlib_uri_auto")
1623 assumeTrue("Test requires shared JVM",isSharedJVM())
1624 isSharedJVM()
1625 buildRule.executeTarget("antlib_uri_auto2")
1626 log("MyTask called")
1627 log("MyTask called")
1628 thrown.expect(BuildException.class)
1629 thrown.expectMessage("ant task at the top level must not invoke its own build file.")
1630 buildRule.configureProject("src/etc/testcases/taskdefs/toplevelant.xml")
1631 thrown.expect(BuildException.class)
1632 thrown.expectMessage("subant task at the top level must not invoke its own build file.")
1633 buildRule.configureProject("src/etc/testcases/taskdefs/toplevelsubant.xml")
1634 thrown.expect(BuildException.class)
1635 thrown.expectMessage("antcall must not be used at the top level.")
1636 buildRule.configureProject("src/etc/testcases/taskdefs/toplevelantcall.xml")
1637 buildRule.configureProject("src/etc/testcases/taskdefs/antstructure.xml")
1638 buildRule.executeTarget("tearDown")
1639 buildRule.executeTarget("test1")
1640 buildRule.executeTarget("testCustomPrinter")
1641 buildRule.getLog()
1642 containsString(MyPrinter.TAIL_CALLED)
1643 p.log(TAIL_CALLED)
1644 buildRule.configureProject("src/etc/testcases/taskdefs/ant.xml")
1645 buildRule.executeTarget("cleanup")
1646 buildRule.executeTarget("test1")
1647 buildRule.executeTarget("test2")
1648 buildRule.executeTarget("test3")
1649 buildRule.executeTarget("test4")
1650 buildRule.executeTarget("test4b")
1651 buildRule.executeTarget("test5")
1652 buildRule.executeTarget("test6")
1653 buildRule.getProject()
1654 buildRule.getProject().getBaseDir()
1655 buildRule.getProject()
1656 buildRule.getProject().resolveFile("..")
1657 testBaseDirs("explicitBasedir1",newString[]{dir1.getAbsolutePath(),dir2.getAbsolutePath()})
1658 dir1.getAbsolutePath()
1659 dir2.getAbsolutePath()
1660 buildRule.getProject()
1661 buildRule.getProject().getBaseDir()
1662 buildRule.getProject()
1663 buildRule.getProject().resolveFile("..")
1664 testBaseDirs("explicitBasedir2",newString[]{dir1.getAbsolutePath(),dir2.getAbsolutePath()})
1665 dir1.getAbsolutePath()
1666 dir2.getAbsolutePath()
1667 buildRule.getProject()
1668 buildRule.getProject().getBaseDir()
1669 buildRule.getProject().getBaseDir().getAbsolutePath()
1670 testBaseDirs("inheritBasedir",newString[]{basedir,basedir})
1671 buildRule.getProject()
1672 buildRule.getProject().getBaseDir()
1673 buildRule.getProject()
1674 buildRule.getProject().resolveFile("ant")
1675 testBaseDirs("doNotInheritBasedir",newString[]{dir1.getAbsolutePath(),dir2.getAbsolutePath()})
1676 dir1.getAbsolutePath()
1677 dir2.getAbsolutePath()
1678 buildRule.getProject()
1679 buildRule.getProject().getBaseDir()
1680 buildRule.getProject()
1681 buildRule.getProject().resolveFile("ant")
1682 testBaseDirs("tripleCall",newString[]{dir1.getAbsolutePath(),dir2.getAbsolutePath(),dir1.getAbsolutePath()})
1683 dir1.getAbsolutePath()
1684 dir2.getAbsolutePath()
1685 dir1.getAbsolutePath()
1686 buildRule.getProject()
1687 buildRule.getProject().addBuildListener(bc)
1688 buildRule.executeTarget(target)
1689 bc.getError()
1690 buildRule.getProject()
1691 buildRule.getProject().removeBuildListener(bc)
1692 p.setProject(buildRule.getProject())
1693 buildRule.getProject()
1694 buildRule.getProject()
1695 buildRule.getProject().addReference("path",p)
1696 buildRule.getProject()
1697 buildRule.getProject().addReference("no-override",p)
1698 testReference("testInherit",newString[]{"path","path"},newboolean[]{true,true},p)
1699 testReference("testInherit",newString[]{"no-override","no-override"},newboolean[]{true,false},p)
1700 testReference("testInherit",newString[]{"no-override","no-override"},newboolean[]{false,false},null)
1701 p.setProject(buildRule.getProject())
1702 buildRule.getProject()
1703 buildRule.getProject()
1704 buildRule.getProject().addReference("path",p)
1705 buildRule.getProject()
1706 buildRule.getProject().addReference("no-override",p)
1707 testReference("testNoInherit",newString[]{"path","path"},newboolean[]{true,false},p)
1708 testReference("testNoInherit",newString[]{"path","path"},newboolean[]{false,true},null)
1709 testReference("testInherit",newString[]{"no-override","no-override"},newboolean[]{true,false},p)
1710 testReference("testInherit",newString[]{"no-override","no-override"},newboolean[]{false,false},null)
1711 p.setProject(buildRule.getProject())
1712 buildRule.getProject()
1713 buildRule.getProject()
1714 buildRule.getProject().addReference("path",p)
1715 testReference("testRename",newString[]{"path","path"},newboolean[]{true,false},p)
1716 testReference("testRename",newString[]{"path","path"},newboolean[]{false,true},null)
1717 testReference("testRename",newString[]{"newpath","newpath"},newboolean[]{false,true},p)
1718 buildRule.executeTarget("testInheritPath")
1719 buildRule.getProject()
1720 buildRule.getProject().addBuildListener(rc)
1721 buildRule.executeTarget(target)
1722 rc.getError()
1723 buildRule.getProject()
1724 buildRule.getProject().removeBuildListener(rc)
1725 Arrays.asList(buildRule.getProject().resolveFile("test1.log"),buildRule.getProject().resolveFile("test2.log"),buildRule.getProject().resolveFile("ant/test3.log"),buildRule.getProject().resolveFile("ant/test4.log"))
1726 buildRule.getProject()
1727 buildRule.getProject().resolveFile("test1.log")
1728 buildRule.getProject()
1729 buildRule.getProject().resolveFile("test2.log")
1730 buildRule.getProject()
1731 buildRule.getProject().resolveFile("ant/test3.log")
1732 buildRule.getProject()
1733 buildRule.getProject().resolveFile("ant/test4.log")
1734 logFile.getName()
1735 logFile.exists()
1736 buildRule.executeTarget("testLogfilePlacement")
1737 logFile.getName()
1738 logFile.exists()
1739 buildRule.getProject()
1740 buildRule.getProject().setInputHandler(ih)
1741 buildRule.getProject()
1742 buildRule.getProject().addBuildListener(ic)
1743 buildRule.executeTarget("tripleCall")
1744 ic.getError()
1745 buildRule.getProject()
1746 buildRule.getProject().removeBuildListener(ic)
1747 buildRule.getProject()
1748 testPath.createPath()
1749 testPath.createPath().setPath(System.getProperty("java.class.path"))
1750 System.getProperty("java.class.path")
1751 testPath.toString()
1752 buildRule.getProject()
1753 buildRule.getProject().addBuildListener(pc)
1754 buildRule.executeTarget("testRefid")
1755 pc.getError()
1756 buildRule.getProject()
1757 buildRule.getProject().removeBuildListener(pc)
1758 buildRule.getProject()
1759 buildRule.getProject().setUserProperty("test","7")
1760 buildRule.executeTarget("test-property-override-inheritall-start")
1761 buildRule.getLog()
1762 containsString("The value of test is 7")
1763 buildRule.getProject()
1764 buildRule.getProject().setUserProperty("test","7")
1765 buildRule.executeTarget("test-property-override-no-inheritall-start")
1766 buildRule.getLog()
1767 containsString("The value of test is 7")
1768 buildRule.executeTarget("test-property-override-inheritall-start")
1769 buildRule.getLog()
1770 containsString("The value of test is 4")
1771 buildRule.executeTarget("test-property-override-no-inheritall-start")
1772 buildRule.getLog()
1773 containsString("The value of test is 4")
1774 buildRule.executeTarget("test-propertyset")
1775 buildRule.getLog()
1776 containsString("test1 is ${test1}")
1777 buildRule.getLog()
1778 containsString("test2 is ${test2}")
1779 buildRule.getLog()
1780 containsString("test1.x is 1")
1781 buildRule.executeTarget("infinite-loop-via-depends")
1782 buildRule.executeTarget("multi-same-property")
1783 buildRule.getLog()
1784 buildRule.executeTarget("topleveltarget")
1785 buildRule.getLog()
1786 buildRule.getProject()
1787 buildRule.getProject().addBuildListener(pcBar)
1788 buildRule.getProject()
1789 buildRule.getProject().addBuildListener(pcFoo)
1790 buildRule.executeTarget("multiple-property-file-children")
1791 pcBar.getError()
1792 pcFoo.getError()
1793 buildRule.getProject()
1794 buildRule.getProject().removeBuildListener(pcBar)
1795 buildRule.getProject()
1796 buildRule.getProject().removeBuildListener(pcFoo)
1797 buildRule.executeTarget("blank-target")
1798 buildRule.executeTarget("multiple-targets")
1799 buildRule.getLog()
1800 buildRule.executeTarget("multiple-targets-2")
1801 buildRule.getLog()
1802 buildRule.executeTarget("sub-show-ant.core.lib")
1803 buildRule.getLog()
1804 realLog.matches(".*(ant[.]jar|ant.classes|build.classes).*")
1805 event.getTarget()
1806 event.getTarget().getName()
1807 event.getTarget().getName().isEmpty()
1808 event.getProject()
1809 event.getProject().getBaseDir()
1810 event.getProject().getBaseDir().getAbsolutePath()
1811 event.getTarget()
1812 event.getTarget().getName()
1813 event.getTarget().getName().isEmpty()
1814 event.getProject()
1815 event.getProject().getBaseDir()
1816 event.getProject().getBaseDir().getAbsolutePath()
1817 event.getTarget()
1818 event.getTarget().getName()
1819 event.getTarget().getName().isEmpty()
1820 event.getProject()
1821 event.getProject().getBaseDir()
1822 event.getProject().getBaseDir().getAbsolutePath()
1823 event.getProject()
1824 event.getProject().getInputHandler()
1825 event.getProject()
1826 event.getProject().getInputHandler()
1827 event.getTarget()
1828 event.getTarget().getName()
1829 event.getTarget().getName().isEmpty()
1830 event.getProject()
1831 event.getProject().getBaseDir()
1832 event.getProject().getBaseDir().getAbsolutePath()
1833 buildRule.configureProject("src/etc/testcases/taskdefs/available.xml")
1834 buildRule.executeTarget("setUp")
1835 buildRule.executeTarget("test1")
1836 buildRule.executeTarget("test2")
1837 buildRule.executeTarget("test3")
1838 buildRule.executeTarget("test4")
1839 buildRule.getProject()
1840 buildRule.getProject().getProperty("test")
1841 buildRule.executeTarget("test5")
1842 buildRule.getProject()
1843 buildRule.getProject().getProperty("test")
1844 buildRule.executeTarget("test6")
1845 buildRule.getProject()
1846 buildRule.getProject().getProperty("test")
1847 buildRule.executeTarget("test7")
1848 buildRule.getProject()
1849 buildRule.getProject().getProperty("test")
1850 buildRule.executeTarget("test8")
1851 buildRule.getProject()
1852 buildRule.getProject().getProperty("test")
1853 buildRule.executeTarget("test9")
1854 buildRule.getProject()
1855 buildRule.getProject().getProperty("test")
1856 buildRule.executeTarget("test10")
1857 buildRule.getProject()
1858 buildRule.getProject().getProperty("test")
1859 buildRule.executeTarget("test11")
1860 buildRule.getProject()
1861 buildRule.getProject().getProperty("test")
1862 buildRule.executeTarget("test12")
1863 buildRule.getProject()
1864 buildRule.getProject().getProperty("test")
1865 buildRule.getProject()
1866 buildRule.getProject().getProperty("")
1867 buildRule.executeTarget("test13")
1868 buildRule.getProject()
1869 buildRule.getProject().getProperty("test")
1870 buildRule.executeTarget("test13b")
1871 buildRule.getProject()
1872 buildRule.getProject().getProperty("test")
1873 buildRule.executeTarget("test14")
1874 buildRule.getProject()
1875 buildRule.getProject().getProperty("test")
1876 buildRule.executeTarget("test15")
1877 buildRule.getProject()
1878 buildRule.getProject().getProperty("test")
1879 buildRule.executeTarget("test16")
1880 buildRule.getProject()
1881 buildRule.getProject().getProperty("test")
1882 buildRule.executeTarget("test17")
1883 buildRule.getProject()
1884 buildRule.getProject().getProperty("test")
1885 buildRule.executeTarget("test18")
1886 buildRule.getProject()
1887 buildRule.getProject().getProperty("test")
1888 buildRule.executeTarget("test19")
1889 buildRule.executeTarget("test20")
1890 buildRule.getProject()
1891 buildRule.getProject().getProperty("test")
1892 buildRule.executeTarget("test21")
1893 buildRule.getProject()
1894 buildRule.getProject().getProperty("test")
1895 buildRule.executeTarget("test22")
1896 buildRule.getProject()
1897 buildRule.getProject().getProperty("test")
1898 buildRule.executeTarget("test23")
1899 buildRule.getProject()
1900 buildRule.getProject().getProperty("test")
1901 buildRule.executeTarget("test24")
1902 buildRule.getProject()
1903 buildRule.getProject().getProperty("test")
1904 buildRule.executeTarget("searchInPathNotThere")
1905 buildRule.getProject()
1906 buildRule.getProject().getProperty("test")
1907 buildRule.executeTarget("searchInPathIsThere")
1908 buildRule.getProject()
1909 buildRule.getProject().getProperty("test")
1910 buildRule.executeTarget("testDoubleBasedir")
1911 buildRule.executeTarget("search-parents")
1912 buildRule.executeTarget("search-parents-not")
1913 buildRule.configureProject("src/etc/testcases/taskdefs/basename.xml")
1914 buildRule.executeTarget("test1")
1915 buildRule.executeTarget("test2")
1916 buildRule.executeTarget("test3")
1917 buildRule.executeTarget("test4")
1918 buildRule.getProject()
1919 buildRule.getProject().getProperty("file.w.suf")
1920 buildRule.executeTarget("test5")
1921 buildRule.getProject()
1922 buildRule.getProject().getProperty("file.wo.suf")
1923 buildRule.executeTarget("testMultipleDots")
1924 buildRule.getProject()
1925 buildRule.getProject().getProperty("file.wo.suf")
1926 buildRule.executeTarget("testNoDots")
1927 buildRule.getProject()
1928 buildRule.getProject().getProperty("file.wo.suf")
1929 buildRule.executeTarget("testValueEqualsSuffixWithDot")
1930 buildRule.getProject()
1931 buildRule.getProject().getProperty("file.wo.suf")
1932 buildRule.executeTarget("testValueEqualsSuffixWithoutDot")
1933 buildRule.getProject()
1934 buildRule.getProject().getProperty("file.wo.suf")
1935 buildRule.configureProject("src/etc/testcases/taskdefs/bunzip2.xml")
1936 buildRule.getProject()
1937 buildRule.getProject().getProperty("output")
1938 buildRule.executeTarget("prepare")
1939 testRealTest("realTest")
1940 testRealTest("realTestWithResource")
1941 testRealTest("realTest")
1942 testRealTest("testDocumentationClaimsOnCopy")
1943 buildRule.configureProject("src/etc/testcases/taskdefs/bzip2.xml")
1944 buildRule.getProject()
1945 buildRule.getProject().getProperty("output")
1946 buildRule.executeTarget("prepare")
1947 buildRule.executeTarget("realTest")
1948 buildRule.getProject()
1949 buildRule.getProject().resolveFile("expected/asf-logo-huge.tar.bz2")
1950 Files.newInputStream(originalFile.toPath())
1951 originalFile.toPath()
1952 originalIn.read()
1953 originalIn.read()
1954 Files.newInputStream(actualFile.toPath())
1955 actualFile.toPath()
1956 actualIn.read()
1957 actualIn.read()
1958 originalIn.read()
1959 actualIn.read()
1960 originalIn.close()
1961 actualIn.close()
1962 buildRule.executeTarget("realTestWithResource")
1963 buildRule.executeTarget("testDateCheck")
1964 buildRule.getLog()
1965 endsWith("asf-logo.gif.bz2 is up to date.")
1966 buildRule.configureProject("src/etc/testcases/taskdefs/calltarget.xml")
1967 buildRule.executeTarget("setUp")
1968 buildRule.executeTarget("testinheritreffileset")
1969 buildRule.getLog()
1970 containsString("calltarget.xml")
1971 buildRule.getProject()
1972 buildRule.getProject().executeTarget("testinheritreffilterset")
1973 v.add("call-multi")
1974 v.add("call-multi")
1975 buildRule.getProject()
1976 buildRule.getProject().executeTargets(v)
1977 buildRule.getLog()
1978 containsString("multi is SETmulti is SET")
1979 buildRule.executeTarget("blank-target")
1980 buildRule.executeTarget("multiple-targets")
1981 buildRule.getLog()
1982 buildRule.executeTarget("multiple-targets-2")
1983 buildRule.getLog()
1984 buildRule.configureProject("src/etc/testcases/taskdefs/checksum.xml")
1985 buildRule.executeTarget("cleanup")
1986 buildRule.executeTarget("createMd5")
1987 buildRule.executeTarget("createMD5SUMformat")
1988 buildRule.executeTarget("createSVFformat")
1989 buildRule.executeTarget("createPattern")
1990 buildRule.executeTarget("setProperty")
1991 buildRule.executeTarget("verifyTotal")
1992 buildRule.executeTarget("verifyTotalRC")
1993 buildRule.executeTarget("verifyChecksumdir")
1994 buildRule.executeTarget("verifyAsTask")
1995 buildRule.executeTarget("verifyMD5SUMAsTask")
1996 buildRule.executeTarget("verifyAsCondition")
1997 buildRule.executeTarget("verifyFromProperty")
1998 buildRule.executeTarget("verifyChecksumdirNoTotal")
1999 buildRule.configureProject("src/etc/testcases/taskdefs/concat.xml")
2000 buildRule.executeTarget("cleanup")
2001 buildRule.executeTarget("test1")
2002 buildRule.executeTarget("test2")
2003 buildRule.getProject()
2004 buildRule.getProject().getBaseDir()
2005 file.exists()
2006 file.delete()
2007 buildRule.executeTarget("test3")
2008 file.exists()
2009 test3()
2010 buildRule.getProject()
2011 buildRule.getProject().getBaseDir()
2012 file.length()
2013 buildRule.executeTarget("test4")
2014 buildRule.getProject()
2015 buildRule.getProject().getBaseDir()
2016 file2.length()
2017 buildRule.executeTarget("test5")
2018 buildRule.getLog()
2019 "src/etc/testcases/taskdefs/thisfiledoesnotexist".replace('/',File.separatorChar)
2020 buildRule.executeTarget("test6")
2021 buildRule.getLog()
2022 containsString(filename+" does not exist")
2023 buildRule.executeTarget("testConcatNoNewline")
2024 buildRule.getLog()
2025 buildRule.executeTarget("testConcatNoNewlineEncoding")
2026 buildRule.getLog()
2027 test3()
2028 buildRule.getProject()
2029 buildRule.getProject().getBaseDir()
2030 file.length()
2031 buildRule.executeTarget("testPath")
2032 buildRule.getProject()
2033 buildRule.getProject().getBaseDir()
2034 file2.length()
2035 test3()
2036 buildRule.getProject()
2037 buildRule.getProject().getBaseDir()
2038 file.length()
2039 buildRule.executeTarget("testAppend")
2040 buildRule.getProject()
2041 buildRule.getProject().getBaseDir()
2042 file2.length()
2043 buildRule.executeTarget("testfilter")
2044 buildRule.getLog()
2045 containsString("REPLACED")
2046 buildRule.executeTarget("testnooverwrite")
2047 buildRule.getProject()
2048 buildRule.getProject().getBaseDir()
2049 file2.length()
2050 buildRule.executeTarget("testoverwrite")
2051 buildRule.getProject()
2052 buildRule.getProject().getBaseDir()
2053 file2.length()
2054 test3()
2055 buildRule.executeTarget("testheaderfooter")
2056 buildRule.getLog()
2057 test3()
2058 buildRule.executeTarget("testfileheader")
2059 buildRule.getLog()
2060 buildRule.executeTarget("samefile")
2061 buildRule.executeTarget("testfilterinline")
2062 buildRule.getLog()
2063 containsString("REPLACED")
2064 buildRule.executeTarget("testmultireader")
2065 buildRule.getLog()
2066 containsString("Bye")
2067 buildRule.getLog()
2068 not(containsString("Hello"))
2069 containsString("Hello")
2070 buildRule.executeTarget("testfixlastline")
2071 FileUtilities.getFileContents(buildRule.getProject(),"concat.line4")
2072 buildRule.getProject()
2073 containsString("end of line"+System.lineSeparator()+"This has")
2074 System.lineSeparator()
2075 buildRule.executeTarget("testfixlastlineeol")
2076 FileUtilities.getFileContents(buildRule.getProject(),"concat.linecr")
2077 buildRule.getProject()
2078 containsString("end of line\rThis has")
2079 buildRule.executeTarget("testTranscoding")
2080 buildRule.getProject()
2081 buildRule.getProject().resolveFile("copy/expected/utf-8")
2082 buildRule.getProject()
2083 buildRule.getProject().resolveFile("concat.utf8")
2084 f1.toString()
2085 f2.toString()
2086 FileUtilities.getFileContents(f1)
2087 FileUtilities.getFileContents(f2)
2088 buildRule.configureProject("src/etc/testcases/taskdefs/condition.xml")
2089 buildRule.executeTarget("cleanup")
2090 buildRule.executeTarget("basic")
2091 buildRule.getProject()
2092 buildRule.getProject().getProperty("basic")
2093 thrown.expect(BuildException.class)
2094 thrown.expectMessage("The property attribute is required.")
2095 buildRule.executeTarget("condition-incomplete")
2096 thrown.expect(BuildException.class)
2097 thrown.expectMessage("You must nest a condition into <condition>")
2098 buildRule.executeTarget("condition-empty")
2099 buildRule.executeTarget("shortcut")
2100 buildRule.getProject()
2101 buildRule.getProject().getProperty("shortcut")
2102 buildRule.executeTarget("dontset")
2103 buildRule.getProject()
2104 buildRule.getProject().getProperty("dontset")
2105 buildRule.executeTarget("setvalue")
2106 buildRule.getProject()
2107 buildRule.getProject().getProperty("setvalue")
2108 buildRule.executeTarget("negation")
2109 buildRule.getProject()
2110 buildRule.getProject().getProperty("negation")
2111 buildRule.executeTarget("negationfalse")
2112 buildRule.getProject()
2113 buildRule.getProject().getProperty("negationfalse")
2114 thrown.expect(BuildException.class)
2115 thrown.expectMessage("You must nest a condition into <not>")
2116 buildRule.executeTarget("negationincomplete")
2117 buildRule.executeTarget("and")
2118 buildRule.getProject()
2119 buildRule.getProject().getProperty("and")
2120 buildRule.executeTarget("andfails")
2121 buildRule.getProject()
2122 buildRule.getProject().getProperty("andfails")
2123 buildRule.executeTarget("andincomplete")
2124 buildRule.getProject()
2125 buildRule.getProject().getProperty("andincomplete")
2126 buildRule.executeTarget("andempty")
2127 buildRule.getProject()
2128 buildRule.getProject().getProperty("andempty")
2129 buildRule.executeTarget("or")
2130 buildRule.getProject()
2131 buildRule.getProject().getProperty("or")
2132 buildRule.executeTarget("or")
2133 buildRule.getProject()
2134 buildRule.getProject().getProperty("or")
2135 buildRule.executeTarget("orfails")
2136 buildRule.getProject()
2137 buildRule.getProject().getProperty("orfails")
2138 buildRule.executeTarget("orboth")
2139 buildRule.getProject()
2140 buildRule.getProject().getProperty("orboth")
2141 buildRule.executeTarget("filesmatch-identical")
2142 buildRule.getProject()
2143 buildRule.getProject().getProperty("filesmatch-identical")
2144 thrown.expect(BuildException.class)
2145 thrown.expectMessage("both file1 and file2 are required in filesmatch")
2146 buildRule.executeTarget("filesmatch-incomplete")
2147 buildRule.executeTarget("filesmatch-oddsizes")
2148 buildRule.getProject()
2149 buildRule.getProject().getProperty("filesmatch-oddsizes")
2150 buildRule.executeTarget("filesmatch-existence")
2151 buildRule.getProject()
2152 buildRule.getProject().getProperty("filesmatch-existence")
2153 buildRule.executeTarget("filesmatch-different")
2154 buildRule.getProject()
2155 buildRule.getProject().getProperty("filesmatch-different")
2156 buildRule.executeTarget("filesmatch-match")
2157 buildRule.getProject()
2158 buildRule.getProject().getProperty("filesmatch-match")
2159 buildRule.executeTarget("filesmatch-different-sizes")
2160 buildRule.getProject()
2161 buildRule.getProject().getProperty("filesmatch-different-sizes")
2162 buildRule.executeTarget("filesmatch-different-onemissing")
2163 buildRule.getProject()
2164 buildRule.getProject().getProperty("filesmatch-different-onemissing")
2165 buildRule.executeTarget("filesmatch-different-eol")
2166 buildRule.executeTarget("filesmatch-same-eol")
2167 buildRule.executeTarget("filesmatch-neitherexist")
2168 buildRule.executeTarget("contains")
2169 buildRule.getProject()
2170 buildRule.getProject().getProperty("contains")
2171 buildRule.executeTarget("contains-doesnt")
2172 buildRule.getProject()
2173 buildRule.getProject().getProperty("contains-doesnt")
2174 buildRule.executeTarget("contains-anycase")
2175 buildRule.getProject()
2176 buildRule.getProject().getProperty("contains-anycase")
2177 thrown.expect(BuildException.class)
2178 thrown.expectMessage("both string and substring are required in contains")
2179 buildRule.executeTarget("contains-incomplete1")
2180 thrown.expect(BuildException.class)
2181 thrown.expectMessage("both string and substring are required in contains")
2182 buildRule.executeTarget("contains-incomplete2")
2183 buildRule.executeTarget("istrue")
2184 buildRule.getProject()
2185 buildRule.getProject().getProperty("istrue")
2186 buildRule.executeTarget("istrue-not")
2187 buildRule.getProject()
2188 buildRule.getProject().getProperty("istrue-not")
2189 buildRule.executeTarget("istrue-false")
2190 buildRule.getProject()
2191 buildRule.getProject().getProperty("istrue-false")
2192 thrown.expect(BuildException.class)
2193 thrown.expectMessage("Nothing to test for truth")
2194 buildRule.executeTarget("istrue-incomplete")
2195 buildRule.executeTarget("isfalse-true")
2196 buildRule.getProject()
2197 buildRule.getProject().getProperty("isfalse-true")
2198 buildRule.executeTarget("isfalse-not")
2199 buildRule.getProject()
2200 buildRule.getProject().getProperty("isfalse-not")
2201 buildRule.executeTarget("isfalse-false")
2202 buildRule.getProject()
2203 buildRule.getProject().getProperty("isfalse-false")
2204 thrown.expect(BuildException.class)
2205 thrown.expectMessage("Nothing to test for falsehood")
2206 buildRule.executeTarget("isfalse-incomplete")
2207 buildRule.executeTarget("testElse")
2208 buildRule.executeTarget("resourcematch-error")
2209 buildRule.executeTarget("resourcesmatch-match-empty")
2210 buildRule.executeTarget("resourcesmatch-match-one")
2211 buildRule.executeTarget("resourcesmatch-match-binary")
2212 buildRule.executeTarget("resourcesmatch-match-multiple-binary")
2213 buildRule.executeTarget("resourcesmatch-differ")
2214 buildRule.executeTarget("resourcesmatch-match-text")
2215 buildRule.executeTarget("resourcesmatch-noneexist")
2216 buildRule.configureProject("src/etc/testcases/taskdefs/copydir.xml")
2217 buildRule.executeTarget("setUp")
2218 buildRule.executeTarget("test1")
2219 buildRule.executeTarget("test2")
2220 buildRule.executeTarget("test3")
2221 buildRule.executeTarget("test4")
2222 buildRule.getLog()
2223 buildRule.executeTarget("test5")
2224 buildRule.getProject()
2225 buildRule.getProject().getProperty("output")
2226 f.exists()
2227 f.isDirectory()
2228 buildRule.executeTarget("test6")
2229 buildRule.configureProject("src/etc/testcases/taskdefs/copyfile.xml")
2230 buildRule.executeTarget("setUp")
2231 buildRule.executeTarget("test1")
2232 buildRule.executeTarget("test2")
2233 buildRule.executeTarget("test3")
2234 buildRule.executeTarget("test4")
2235 buildRule.getLog()
2236 buildRule.executeTarget("test5")
2237 buildRule.getProject()
2238 buildRule.getProject().getProperty("output")
2239 f.exists()
2240 f.delete()
2241 buildRule.executeTarget("test6")
2242 buildRule.configureProject("src/etc/testcases/taskdefs/copy.xml")
2243 buildRule.executeTarget("setUp")
2244 buildRule.executeTarget("test1")
2245 buildRule.getProject()
2246 buildRule.getProject().getProperty("output")
2247 f.exists()
2248 buildRule.executeTarget("test2")
2249 buildRule.getProject()
2250 buildRule.getProject().getProperty("output")
2251 f.exists()
2252 buildRule.executeTarget("test3")
2253 buildRule.getProject()
2254 buildRule.getProject().getProperty("output")
2255 FileUtilities.rollbackTimestamps(file3,3)
2256 buildRule.executeTarget("test3Part2")
2257 file3.exists()
2258 file3a.exists()
2259 file3b.exists()
2260 file3c.exists()
2261 file3.length()
2262 file3c.length()
2263 file3b.length()
2264 file3a.lastModified()
2265 file3.lastModified()
2266 file3c.lastModified()
2267 file3a.lastModified()
2268 buildRule.executeTarget("filtertest")
2269 buildRule.getLog()
2270 not(containsString("loop in tokens"))
2271 containsString("loop in tokens")
2272 buildRule.executeTarget("infinitetest")
2273 buildRule.getOutput()
2274 containsString("loop in tokens")
2275 buildRule.executeTarget("testFilterSet")
2276 buildRule.getProject()
2277 buildRule.getProject().getProperty("output")
2278 buildRule.getProject()
2279 buildRule.getProject().getBaseDir()
2280 tmp.exists()
2281 FileUtilities.getFileContents(tmp)
2282 FileUtilities.getFileContents(check)
2283 buildRule.executeTarget("testFilterChain")
2284 buildRule.getProject()
2285 buildRule.getProject().getProperty("output")
2286 buildRule.getProject()
2287 buildRule.getProject().getBaseDir()
2288 tmp.exists()
2289 FileUtilities.getFileContents(tmp)
2290 FileUtilities.getFileContents(check)
2291 buildRule.executeTarget("test_single_file_fileset")
2292 buildRule.getProject()
2293 buildRule.getProject().getProperty("output")
2294 file.exists()
2295 buildRule.executeTarget("test_single_file_path")
2296 buildRule.getProject()
2297 buildRule.getProject().getProperty("output")
2298 file.exists()
2299 buildRule.executeTarget("testTranscoding")
2300 buildRule.getProject()
2301 buildRule.getProject().resolveFile("copy/expected/utf-8")
2302 buildRule.getProject()
2303 buildRule.getProject().getProperty("output")
2304 FileUtilities.getFileContents(f1)
2305 FileUtilities.getFileContents(f2)
2306 buildRule.executeTarget("testMissingFileIgnore")
2307 buildRule.getLog()
2308 containsString("Warning: Could not find file")
2309 thrown.expect(BuildException.class)
2310 thrown.expectMessage(startsWith("Warning: Could not find file "))
2311 startsWith("Warning: Could not find file ")
2312 buildRule.executeTarget("testMissingFileBail")
2313 buildRule.executeTarget("testMissingDirIgnore")
2314 buildRule.getLog()
2315 containsString("Warning: ")
2316 thrown.expect(BuildException.class)
2317 thrown.expectMessage(endsWith(" does not exist."))
2318 endsWith(" does not exist.")
2319 buildRule.executeTarget("testMissingDirBail")
2320 buildRule.executeTarget("testFileResourcePlain")
2321 buildRule.getProject()
2322 buildRule.getProject().getProperty("to.dir")
2323 newFile(toDir+"/file1.txt").exists()
2324 newFile(toDir+"/file2.txt").exists()
2325 newFile(toDir+"/file3.txt").exists()
2326 buildRule.executeTarget("testFileResourceWithMapper")
2327 buildRule.getProject()
2328 buildRule.getProject().getProperty("to.dir")
2329 newFile(toDir+"/file1.txt.bak").exists()
2330 newFile(toDir+"/file2.txt.bak").exists()
2331 newFile(toDir+"/file3.txt.bak").exists()
2332 buildRule.executeTarget("testFileResourceWithFilter")
2333 buildRule.getProject()
2334 buildRule.getProject().getProperty("to.dir")
2335 file1.exists()
2336 FileUtils.readFully(f)
2337 buildRule.executeTarget("testPathAsResource")
2338 buildRule.getProject()
2339 buildRule.getProject().getProperty("to.dir")
2340 newFile(toDir+"/file1.txt").exists()
2341 newFile(toDir+"/file2.txt").exists()
2342 newFile(toDir+"/file3.txt").exists()
2343 buildRule.executeTarget("testZipfileset")
2344 buildRule.getProject()
2345 buildRule.getProject().getProperty("to.dir")
2346 newFile(toDir+"/file1.txt").exists()
2347 newFile(toDir+"/file2.txt").exists()
2348 newFile(toDir+"/file3.txt").exists()
2349 buildRule.executeTarget("testDirset")
2350 buildRule.executeTarget("testResourcePlain")
2351 buildRule.executeTarget("testResourcePlainWithMapper")
2352 buildRule.executeTarget("testResourcePlainWithFilter")
2353 buildRule.executeTarget("testOnlineResources")
2354 assumeTrue("Symlinks not supported on this operating system",Os.isFamily(Os.FAMILY_UNIX))
2355 Os.isFamily(Os.FAMILY_UNIX)
2356 buildRule.executeTarget("setupSelfCopyTesting")
2357 buildRule.getProject()
2358 buildRule.getProject().getProperty("self.copy.test.root.dir")
2359 testDir.isDirectory()
2360 srcFile.isFile()
2361 srcFile.length()
2362 FileUtils.readFully(reader)
2363 originalContent.isEmpty()
2364 buildRule.executeTarget("testSelfCopy")
2365 symlinkedFile.isFile()
2366 buildRule.getProject()
2367 buildRule.getProject().getProperty("self.copy.test.symlinked.dir")
2368 symlinkedTestDir.isDirectory()
2369 file.isFile()
2370 file.length()
2371 FileUtils.readFully(reader)
2372 buildRule.configureProject("src/etc/testcases/taskdefs/cvspass.xml")
2373 buildRule.executeTarget("cleanup")
2374 thrown.expect(BuildException.class)
2375 thrown.expectMessage("cvsroot is required")
2376 buildRule.executeTarget("test1")
2377 thrown.expect(BuildException.class)
2378 thrown.expectMessage("password is required")
2379 buildRule.executeTarget("test2")
2380 buildRule.executeTarget("test3")
2381 buildRule.getProject()
2382 buildRule.getProject().getBaseDir()
2383 f.exists()
2384 FileUtilities.getFileContents(f)
2385 buildRule.executeTarget("test4")
2386 buildRule.getProject()
2387 buildRule.getProject().getBaseDir()
2388 f.exists()
2389 FileUtilities.getFileContents(f)
2390 buildRule.executeTarget("test5")
2391 buildRule.getProject()
2392 buildRule.getProject().getBaseDir()
2393 f.exists()
2394 FileUtilities.getFileContents(f)
2395 Arrays.asList(newObject[][]{{"test1",newString[]{"**/*~","**/#*#","**/.#*","**/%*%","**/._*","**/CVS","**/CVS/**","**/.cvsignore","**/SCCS","**/SCCS/**","**/vssver.scc","**/.svn","**/.svn/**","**/.git","**/.git/**","**/.gitattributes","**/.gitignore","**/.gitmodules","**/.hg","**/.hg/**","**/.hgignore","**/.hgsub","**/.hgsubstate","**/.hgtags","**/.bzr","**/.bzr/**","**/.bzrignore","**/.DS_Store"}},{"test2",newString[]{"**/*~","**/#*#","**/.#*","**/%*%","**/._*","**/CVS","**/CVS/**","**/.cvsignore","**/SCCS","**/SCCS/**","**/vssver.scc","**/.svn","**/.svn/**","**/.git","**/.git/**","**/.gitattributes","**/.gitignore","**/.gitmodules","**/.hg","**/.hg/**","**/.hgignore","**/.hgsub","**/.hgsubstate","**/.hgtags","**/.bzr","**/.bzr/**","**/.bzrignore","**/.DS_Store","foo"}},{"test3",newString[]{"**/*~","**/#*#","**/.#*","**/%*%","**/._*","**/CVS/**","**/.cvsignore","**/SCCS","**/SCCS/**","**/vssver.scc","**/.svn","**/.svn/**","**/.git","**/.git/**","**/.gitattributes","**/.gitignore","**/.gitmodules","**/.hg","**/.hg/**","**/.hgignore","**/.hgsub","**/.hgsubstate","**/.hgtags","**/.bzr","**/.bzr/**","**/.bzrignore","**/.DS_Store"}}})
2396 buildRule.configureProject("src/etc/testcases/taskdefs/defaultexcludes.xml")
2397 buildRule.executeTarget("cleanup")
2398 buildRule.getProject()
2399 buildRule.getProject().executeTarget(targetName)
2400 DirectoryScanner.getDefaultExcludes()
2401 Arrays.asList(actual)
2402 Arrays.asList(actual).contains(element)
2403 buildRule.configureProject("src/etc/testcases/taskdefs/delete.xml")
2404 buildRule.executeTarget("test1")
2405 buildRule.executeTarget("test2")
2406 buildRule.executeTarget("test4")
2407 buildRule.executeTarget("test5")
2408 buildRule.executeTarget("test6")
2409 buildRule.executeTarget("test7")
2410 buildRule.executeTarget("test8")
2411 buildRule.executeTarget("test9")
2412 buildRule.executeTarget("test10")
2413 buildRule.executeTarget("test11")
2414 buildRule.executeTarget("test12")
2415 buildRule.executeTarget("test13")
2416 buildRule.executeTarget("test14")
2417 buildRule.executeTarget("test15")
2418 buildRule.executeTarget("test16")
2419 buildRule.executeTarget("test17")
2420 buildRule.configureProject("src/etc/testcases/taskdefs/deltree.xml")
2421 buildRule.executeTarget("test1")
2422 buildRule.executeTarget("test2")
2423 buildRule.configureProject("src/etc/testcases/taskdefs/dirname.xml")
2424 thrown.expect(BuildException.class)
2425 thrown.expectMessage("property attribute required")
2426 buildRule.executeTarget("test1")
2427 thrown.expect(BuildException.class)
2428 thrown.expectMessage("file attribute required")
2429 buildRule.executeTarget("test2")
2430 thrown.expect(BuildException.class)
2431 thrown.expectMessage("property attribute required")
2432 buildRule.executeTarget("test3")
2433 assumeFalse("Skip on DOS or Netware",Os.isFamily("netware")||Os.isFamily("dos"))
2434 Os.isFamily("netware")
2435 Os.isFamily("dos")
2436 buildRule.executeTarget("test4")
2437 buildRule.getProject()
2438 buildRule.getProject().getProperty("local.dir")
2439 buildRule.executeTarget("test5")
2440 buildRule.getProject()
2441 buildRule.getProject().getProperty(MagicNames.PROJECT_BASEDIR)
2442 buildRule.getProject()
2443 buildRule.getProject().getProperty("base.dir")
2444 buildRule.configureProject("src/etc/testcases/taskdefs/dynamictask.xml")
2445 buildRule.executeTarget("simple")
2446 buildRule.getProject()
2447 buildRule.getProject().getProperty("prop1")
2448 buildRule.getProject()
2449 buildRule.getProject().getProperty("prop2")
2450 buildRule.getProject()
2451 buildRule.getProject().getProperty("prop3")
2452 buildRule.getProject()
2453 buildRule.getProject().getProperty("prop4")
2454 p.init()
2455 p.addBuildListener(logger)
2456 echo.setProject(p)
2457 echo.setTaskName("testLogBlankEcho")
2458 echo.execute()
2459 folder.newFile("abc.txt")
2460 echo.setTaskName("testLogUTF8Echo")
2461 echo.setMessage(msg)
2462 echo.setFile(removeThis)
2463 echo.setEncoding(cs.name())
2464 cs.name()
2465 echo.execute()
2466 readFully(newInputStreamReader(newFileInputStream(removeThis),cs))
2467 super()
2468 this.setMessageOutputLevel(Project.MSG_DEBUG)
2469 this.setOutputPrintStream(newPrintStream(newByteArrayOutputStream(256)))
2470 this.setErrorPrintStream(newPrintStream(newByteArrayOutputStream(256)))
2471 buildRule.configureProject("src/etc/testcases/taskdefs/echoxml.xml")
2472 buildRule.executeTarget("tearDown")
2473 buildRule.executeTarget("testPass")
2474 thrown.expect(BuildException.class)
2475 thrown.expectMessage("${foo}=bar")
2476 buildRule.executeTarget("testFail")
2477 thrown.expect(BuildException.class)
2478 thrown.expectMessage("No nested XML specified")
2479 buildRule.executeTarget("testEmpty")
2480 buildRule.configureProject("src/etc/testcases/taskdefs/exec/exec-with-redirector.xml")
2481 folder.newFolder(String.valueOf("temp-"+System.nanoTime()))
2482 String.valueOf("temp-"+System.nanoTime())
2483 System.nanoTime()
2484 buildRule.getProject()
2485 buildRule.getProject().setUserProperty("output",outputDir.toString())
2486 outputDir.toString()
2487 buildRule.executeTarget("setUp")
2488 buildRule.getProject()
2489 buildRule.getProject().getProperty("dir.to.ls")
2490 newFile(dirToList).isDirectory()
2491 buildRule.executeTarget("list-dir")
2492 redirectedOutputFile.isFile()
2493 readAllBytes(redirectedOutputFile)
2494 Arrays.equals(dirListingOutput,redirectedOutput)
2495 fis.read(dataChunk)
2496 bos.write(dataChunk,0,numRead)
2497 bos.toByteArray()
2498 buildRule.configureProject("src/etc/testcases/taskdefs/exec/exec.xml")
2499 buildRule.getProject()
2500 buildRule.getProject().executeTarget("setUp")
2501 assumeNotNull(buildRule.getProject().getProperty("test.can.run"))
2502 buildRule.getProject()
2503 buildRule.getProject().getProperty("test.can.run")
2504 buildRule.getProject()
2505 buildRule.getProject().getProperty(MagicNames.ANT_FILE)
2506 FILE_UTILS.createTempFile("spawn","log",newFile(buildRule.getProject().getProperty("output")),false,false)
2507 buildRule.getProject()
2508 buildRule.getProject().getProperty("output")
2509 logFile.exists()
2510 myBuild.setTimeToWait(TIME_TO_WAIT)
2511 myBuild.setLogFile(logFile.getAbsolutePath())
2512 logFile.getAbsolutePath()
2513 myBuild.addBuildListener(newMonitoredBuildListener())
2514 myBuild.start()
2515 Thread.sleep(10)
2516 now.getTime()
2517 now.getTime().getTime()
2518 startwait.getTime()
2519 startwait.getTime().getTime()
2520 System.out.println("aborting wait, too long "+(now.getTime().getTime()-startwait.getTime().getTime())+"milliseconds")
2521 now.getTime()
2522 now.getTime().getTime()
2523 startwait.getTime()
2524 startwait.getTime().getTime()
2525 Thread.sleep((TIME_TO_WAIT)*1000+SECURITY_MARGIN)
2526 myBuild.getTimeElapsed()
2527 logFile.getAbsolutePath()
2528 logFile.exists()
2529 buildRule.getProject()
2530 buildRule.getProject().executeTarget("test-out-and-err")
2531 project.setProperty("logFile",logFile)
2532 project.setProperty("timeToWait",Long.toString(timeToWait))
2533 Long.toString(timeToWait)
2534 project.addBuildListener(bl)
2535 project.init()
2536 project.setUserProperty(MagicNames.ANT_FILE,myBuildFile.getAbsolutePath())
2537 myBuildFile.getAbsolutePath()
2538 ProjectHelper.configureProject(project,myBuildFile)
2539 timeFinished.getTime()
2540 timeFinished.getTime().getTime()
2541 timeStarted.getTime()
2542 timeStarted.getTime().getTime()
2543 myBuildFile.toString()
2544 worker.start()
2545 startProject()
2546 project.executeTarget(target)
2547 event.getTarget()
2548 event.getTarget().getName()
2549 event.getTarget().getName().equals("spawn")
2550 ej.setTimeout((long)TIME_OUT)
2551 project.setBasedir(".")
2552 project.setProperty(MagicNames.ANT_HOME,System.getProperty(MagicNames.ANT_HOME))
2553 System.getProperty(MagicNames.ANT_HOME)
2554 getTestClassPath()
2555 ej.setClasspath(cp)
2556 cmd.setExecutable(TimeProcess.class.getName())
2557 TimeProcess.class.getName()
2558 cmd.createArgument()
2559 cmd.createArgument().setValue(String.valueOf(timetorun))
2560 String.valueOf(timetorun)
2561 getCommandline(TIME_OUT/2)
2562 ej.setJavaCommand(cmd)
2563 ej.execute(project)
2564 ej.killedProcess()
2565 getCommandline(TIME_OUT*2)
2566 ej.setJavaCommand(cmd)
2567 System.currentTimeMillis()
2568 ej.execute(project)
2569 System.currentTimeMillis()
2570 ej.killedProcess()
2571 getCommandline(TIME_OUT/2)
2572 ej.setJavaCommand(cmd)
2573 ej.fork(cp)
2574 ej.killedProcess()
2575 getCommandline(TIME_OUT*2)
2576 ej.setJavaCommand(cmd)
2577 System.currentTimeMillis()
2578 ej.fork(cp)
2579 System.currentTimeMillis()
2580 ej.killedProcess()
2581 System.getProperty("build.tests.value")
2582 System.err.println("WARNING: 'build.tests.value' property is not available!")
2583 System.getProperty("java.class.path")
2584 System.getProperty("build.tests.value")
2585 System.err.println("WARNING: 'build.tests.value' property is not available!")
2586 System.getProperty("java.class.path")
2587 JavaEnvUtils.getJreExecutable("java")
2588 TimeProcess.class.getName()
2589 String.valueOf(timetorun)
2590 Runtime.getRuntime()
2591 Runtime.getRuntime().exec(cmdArray)
2592 p.getErrorStream()
2593 err.lines()
2594 err.lines().collect(Collectors.joining())
2595 Collectors.joining()
2596 p.waitFor()
2597 getErrorOutput(p)
2598 err.isEmpty()
2599 System.err.println("ERROR:")
2600 System.err.println(err)
2601 getProcess(TIME_OUT/2)
2602 watchdog.start(process)
2603 waitForEnd(process)
2604 watchdog.killedProcess()
2605 Execute.isFailure(retCode)
2606 getProcess(TIME_OUT*2)
2607 System.currentTimeMillis()
2608 watchdog.start(process)
2609 process.waitFor()
2610 System.currentTimeMillis()
2611 watchdog.killedProcess()
2612 getProcess(-1)
2613 watchdog.start(process)
2614 process.waitFor()
2615 watchdog.killedProcess()
2616 getProcess(TIME_OUT*2)
2617 watchdog.start(process)
2618 process.waitFor()
2619 thread.start()
2620 thread.join(TIME_OUT/2)
2621 watchdog.stop()
2622 thread.join()
2623 process.exitValue()
2624 watchdog.killedProcess()
2625 buildRule.configureProject("src/etc/testcases/taskdefs/fail.xml")
2626 thrown.expect(BuildException.class)
2627 thrown.expectMessage("No message")
2628 buildRule.executeTarget("test1")
2629 thrown.expect(BuildException.class)
2630 thrown.expectMessage("test2")
2631 buildRule.executeTarget("test2")
2632 thrown.expect(BuildException.class)
2633 thrown.expectMessage("testText")
2634 buildRule.executeTarget("testText")
2635 buildRule.executeTarget("testIf")
2636 buildRule.getProject()
2637 buildRule.getProject().setProperty("foo","")
2638 buildRule.executeTarget("testIf")
2639 buildRule.executeTarget("testUnless")
2640 buildRule.getProject()
2641 buildRule.getProject().setProperty("foo","")
2642 buildRule.executeTarget("testUnless")
2643 thrown.expect(BuildException.class)
2644 thrown.expectMessage("if=if and unless=unless")
2645 buildRule.executeTarget("testIfAndUnless")
2646 buildRule.getProject()
2647 buildRule.getProject().setProperty("if","")
2648 buildRule.executeTarget("testIfAndUnless")
2649 buildRule.getProject()
2650 buildRule.getProject().setProperty("unless","")
2651 buildRule.executeTarget("testIfAndUnless")
2652 buildRule.getProject()
2653 buildRule.getProject().setProperty("unless","")
2654 buildRule.executeTarget("testIfAndUnless")
2655 thrown.expect(BuildException.class)
2656 thrown.expectMessage("condition satisfied")
2657 buildRule.executeTarget("testNested1")
2658 buildRule.executeTarget("testNested2")
2659 thrown.expect(BuildException.class)
2660 thrown.expectMessage("testNested3")
2661 buildRule.executeTarget("testNested3")
2662 thrown.expect(BuildException.class)
2663 thrown.expectMessage("Nested conditions not permitted in conjunction with if/unless attributes")
2664 Arrays.asList('a','b','c')
2665 target.setCharAt(target.length()-1,ch)
2666 target.length()
2667 buildRule.executeTarget(target.toString())
2668 target.toString()
2669 thrown.expect(BuildException.class)
2670 thrown.expectMessage("Only one nested condition is allowed.")
2671 buildRule.executeTarget("testNested5")
2672 thrown.expect(BuildException.class)
2673 thrown.expectMessage("testNested6\ntestNested6\ntestNested6")
2674 buildRule.executeTarget("testNested6")
2675 thrown.expect(BuildException.class)
2676 thrown.expectMessage("A single nested condition is required.")
2677 Arrays.asList('a','b')
2678 target.setCharAt(target.length()-1,ch)
2679 target.length()
2680 buildRule.executeTarget(target.toString())
2681 target.toString()
2682 buildRule.configureProject("src/etc/testcases/taskdefs/filter.xml")
2683 buildRule.executeTarget("cleanup")
2684 buildRule.executeTarget("test1")
2685 buildRule.executeTarget("test2")
2686 buildRule.executeTarget("test3")
2687 buildRule.executeTarget("test4")
2688 buildRule.executeTarget("test5")
2689 getFilteredFile("5","filtered.tmp")
2690 buildRule.executeTarget("test6")
2691 getFilteredFile("6","taskdefs.tmp/filter1.txt")
2692 buildRule.executeTarget("test7")
2693 getFilteredFile("7","filtered.tmp")
2694 buildRule.executeTarget("test8")
2695 getFilteredFile("8","taskdefs.tmp/filter2.txt")
2696 buildRule.executeTarget("test9")
2697 getFilteredFile("9","taskdefs.tmp/filter3.txt")
2698 buildRule.getProject()
2699 buildRule.getProject().getBaseDir()
2700 f.exists()
2701 in.readLine()
2702 fail("filter test"+testNumber+" failed.  IOException while reading filtered file: "+ioe)
2703 f.delete()
2704 buildRule.configureProject("src/etc/testcases/taskdefs/fixcrlf/build.xml")
2705 buildRule.executeTarget("test1")
2706 buildRule.executeTarget("test2")
2707 buildRule.executeTarget("test3")
2708 buildRule.executeTarget("test4")
2709 buildRule.executeTarget("test5")
2710 buildRule.executeTarget("test6")
2711 buildRule.executeTarget("test7")
2712 buildRule.executeTarget("test8")
2713 buildRule.executeTarget("test9")
2714 buildRule.executeTarget("testMacLines")
2715 buildRule.executeTarget("testNoOverwrite")
2716 buildRule.executeTarget("testEncoding")
2717 buildRule.executeTarget("testOutputEncoding")
2718 buildRule.executeTarget("testLongLines")
2719 buildRule.executeTarget("testCrCrLfSequence-unix")
2720 buildRule.executeTarget("testCrCrLfSequence-dos")
2721 buildRule.executeTarget("testCrCrLfSequence-mac")
2722 buildRule.executeTarget("testFixlastDos")
2723 buildRule.executeTarget("testFixlastFalseMac")
2724 buildRule.executeTarget("testFixFile")
2725 thrown.expect(BuildException.class)
2726 thrown.expectMessage(FixCRLF.ERROR_FILE_AND_SRCDIR)
2727 buildRule.executeTarget("testFixFileExclusive")
2728 buildRule.executeTarget("createParentDirs")
2729 buildRule.executeTarget("testPreserveLastModified")
2730 buildRule.executeTarget("testFilter1")
2731 buildRule.executeTarget("testFilter2")
2732 buildRule.executeTarget("testFilter3")
2733 buildRule.executeTarget("testFilter4")
2734 buildRule.executeTarget("testFilter5")
2735 buildRule.executeTarget("testFilter6")
2736 buildRule.executeTarget("testFilter7")
2737 buildRule.executeTarget("testFilter8")
2738 buildRule.executeTarget("testFilter9")
2739 buildRule.executeTarget("testCannotDoubleEof")
2740 buildRule.executeTarget("testTabInLiteralInComment")
2741 result.exists()
2742 Files.newInputStream(expect.toPath())
2743 expect.toPath()
2744 Files.newInputStream(result.toPath())
2745 result.toPath()
2746 inExpect.read()
2747 inResult.read()
2748 inExpect.read()
2749 inResult.read()
2750 buildRule.configureProject("src/etc/testcases/taskdefs/get.xml")
2751 buildRule.executeTarget("cleanup")
2752 buildRule.executeTarget("test1")
2753 buildRule.executeTarget("test2")
2754 buildRule.executeTarget("test3")
2755 buildRule.executeTarget("test4")
2756 buildRule.executeTarget("test5")
2757 buildRule.executeTarget("test6")
2758 thrown.expect(BuildException.class)
2759 buildRule.executeTarget("test7")
2760 buildRule.getLog()
2761 not(containsString("Adding header"))
2762 containsString("Adding header")
2763 buildRule.executeTarget("testUseTimestamp")
2764 buildRule.executeTarget("testUseTomorrow")
2765 buildRule.executeTarget("testTwoHeadersAreAddedOK")
2766 buildRule.getLog()
2767 both(containsString("Adding header 'header1'"))
2768 containsString("Adding header 'header1'")
2769 both(containsString("Adding header 'header1'")).and(containsString("Adding header 'header2'"))
2770 containsString("Adding header 'header2'")
2771 buildRule.executeTarget("testEmptyHeadersAreNeverAdded")
2772 buildRule.getLog()
2773 not(containsString("Adding header"))
2774 containsString("Adding header")
2775 buildRule.executeTarget("testThatWhenMoreThanOneHeaderHaveSameNameOnlyLastOneIsAdded")
2776 buildRule.getLog()
2777 containsString("Adding header 'header1'")
2778 log.split("Adding header ")
2779 buildRule.executeTarget("testHeaderSpaceTrimmed")
2780 buildRule.getLog()
2781 containsString("Adding header 'header1'")
2782 buildRule.configureProject("src/etc/testcases/taskdefs/gunzip.xml")
2783 buildRule.executeTarget("cleanup")
2784 buildRule.executeTarget("test1")
2785 buildRule.executeTarget("test2")
2786 testRealTest("realTest")
2787 testRealTest("realTestWithResource")
2788 testRealTest("realTest")
2789 testRealTest("testGzipTask")
2790 testRealTest("testDocumentationClaimsOnCopy")
2791 buildRule.configureProject("src/etc/testcases/taskdefs/gzip.xml")
2792 buildRule.executeTarget("test1")
2793 buildRule.executeTarget("test2")
2794 buildRule.executeTarget("test3")
2795 buildRule.executeTarget("test4")
2796 buildRule.executeTarget("realTest")
2797 buildRule.getLog()
2798 startsWith("Building:")
2799 endsWith("asf-logo.gif.gz")
2800 buildRule.executeTarget("realTestWithResource")
2801 buildRule.executeTarget("testDateCheck")
2802 buildRule.getLog()
2803 endsWith("asf-logo.gif.gz is up to date.")
2804 buildRule.executeTarget("cleanup")
2805 buildRule.configureProject("src/etc/testcases/taskdefs/import/import.xml")
2806 buildRule.getLog()
2807 containsString("Before importIn imported topAfter import")
2808 buildRule.configureProject("src/etc/testcases/taskdefs/import/unnamedImport.xml",Project.MSG_WARN)
2809 buildRule.getLog()
2810 log.length()
2811 buildRule.configureProject("src/etc/testcases/taskdefs/import/subdir/serial.xml")
2812 buildRule.getLog()
2813 containsString("Unnamed2.xmlUnnamed1.xml")
2814 buildRule.getFullLog()
2815 containsString("Skipped already imported file")
2816 buildRule.configureProject("src/etc/testcases/taskdefs/import/subdir/importintarget.xml")
2817 buildRule.executeTarget("no-import")
2818 buildRule.getProject()
2819 buildRule.getProject().getProperty("foo")
2820 buildRule.getProject()
2821 buildRule.getProject().getReference("baz")
2822 buildRule.configureProject("src/etc/testcases/taskdefs/import/subdir/importintarget.xml")
2823 buildRule.executeTarget("do-import")
2824 buildRule.getProject()
2825 buildRule.getProject().getProperty("foo")
2826 buildRule.getProject()
2827 buildRule.getProject().getReference("baz")
2828 thrown.expect(BuildException.class)
2829 thrown.expectMessage("import only allowed as a top-level task")
2830 buildRule.configureProject("src/etc/testcases/taskdefs/import/subdir/importintarget.xml")
2831 buildRule.executeTarget("do-import")
2832 buildRule.configureProject("src/etc/testcases/taskdefs/import/subdir/importinsequential.xml")
2833 buildRule.executeTarget("within-imported")
2834 buildRule.getProject()
2835 buildRule.getProject().getProperty("foo")
2836 buildRule.getProject()
2837 buildRule.getProject().getReference("baz")
2838 thrown.expect(BuildException.class)
2839 thrown.expectMessage("Duplicate target")
2840 buildRule.configureProject("src/etc/testcases/taskdefs/import/same_target.xml")
2841 thrown.expect(BuildException.class)
2842 thrown.expectMessage("bad.xml")
2843 thrown.expect(hasProperty("location",hasProperty("fileName",containsString("import_bad_import.xml"))))
2844 hasProperty("location",hasProperty("fileName",containsString("import_bad_import.xml")))
2845 hasProperty("fileName",containsString("import_bad_import.xml"))
2846 containsString("import_bad_import.xml")
2847 buildRule.configureProject("src/etc/testcases/taskdefs/import/import_bad_import.xml")
2848 newFile(ln).exists()
2849 assumeTrue("Current system does not support Symlinks",newFile(ln).exists())
2850 newFile(ln).exists()
2851 buildRule.configureProject("src/etc/testcases/taskdefs/import/import.xml")
2852 buildRule.getProject()
2853 buildRule.getProject().resolveFile("symlinks/d3b")
2854 symlinkFile.getAbsolutePath()
2855 Runtime.getRuntime()
2856 Runtime.getRuntime().exec(newString[]{ln,"-s","d3a",symlinkFile.getAbsolutePath()})
2857 symlinkFile.getAbsolutePath()
2858 Runtime.getRuntime().exec(newString[]{ln,"-s","d3a",symlinkFile.getAbsolutePath()}).waitFor()
2859 buildRule.configureProject("src/etc/testcases/taskdefs/import/symlinks/d1/p1.xml")
2860 buildRule.getProject()
2861 buildRule.getProject().getProperty("ant.file.p2")
2862 buildRule.getProject()
2863 buildRule.getProject().resolveFile("../d2/p2.xml")
2864 buildRule.getProject().resolveFile("../d2/p2.xml").getAbsolutePath()
2865 buildRule.getProject()
2866 buildRule.getProject().getProperty("ant.file.p3")
2867 buildRule.getProject()
2868 buildRule.getProject().resolveFile("../d3b/p3.xml")
2869 buildRule.getProject().resolveFile("../d3b/p3.xml").getAbsolutePath()
2870 symlinkFile.delete()
2871 buildRule.configureProject("src/etc/testcases/taskdefs/import/importtargetfirst.xml")
2872 buildRule.getLog()
2873 containsString("Importing targetfirstAfter target firstAfter importing")
2874 buildRule.configureProject("src/etc/testcases/taskdefs/import/c.xml")
2875 System.getProperty("build.tests.value")
2876 buildRule.configureProject("src/etc/testcases/taskdefs/initializeclass.xml")
2877 buildRule.getProject()
2878 buildRule.getProject().resolveFile("forkedout")
2879 buildRule.getProject()
2880 buildRule.getProject().resolveFile("unforkedout")
2881 buildRule.executeTarget("forked")
2882 System.setOut(newps)
2883 buildRule.getProject()
2884 buildRule.getProject().executeTarget("unforked")
2885 System.setOut(ps)
2886 FileUtilities.getFileContents(f1)
2887 FileUtilities.getFileContents(f2)
2888 f1.delete()
2889 f2.delete()
2890 buildRule.configureProject("src/etc/testcases/taskdefs/input.xml")
2891 System.getProperties()
2892 System.getProperties().put(PropertyFileInputHandler.FILE_NAME_KEY,buildRule.getProject().resolveFile("input.properties").getAbsolutePath())
2893 buildRule.getProject()
2894 buildRule.getProject().resolveFile("input.properties")
2895 buildRule.getProject().resolveFile("input.properties").getAbsolutePath()
2896 buildRule.getProject()
2897 buildRule.getProject().setInputHandler(newPropertyFileInputHandler())
2898 System.setIn(originalStdIn)
2899 buildRule.executeTarget("test1")
2900 buildRule.executeTarget("test2")
2901 thrown.expect(BuildException.class)
2902 thrown.expectMessage("Found invalid input test for 'All data is going to be deleted from DB continue?'")
2903 buildRule.executeTarget("test3")
2904 buildRule.executeTarget("test5")
2905 buildRule.executeTarget("test6")
2906 buildRule.getProject()
2907 buildRule.getProject().getProperty("db.user")
2908 buildRule.executeTarget("testPropertyFileInlineHandler")
2909 stdin()
2910 buildRule.executeTarget("testDefaultInlineHandler")
2911 stdin()
2912 buildRule.executeTarget("testGreedyInlineHandler")
2913 stdin()
2914 buildRule.executeTarget("testGreedyInlineHandlerClassname")
2915 stdin()
2916 buildRule.executeTarget("testGreedyInlineHandlerRefid")
2917 System.setIn(newFileInputStream(buildRule.getProject().resolveFile("input.stdin")))
2918 buildRule.getProject()
2919 buildRule.getProject().resolveFile("input.stdin")
2920 buildRule.configureProject("src/etc/testcases/taskdefs/jar.xml")
2921 buildRule.executeTarget("setUp")
2922 buildRule.executeTarget("test1")
2923 buildRule.executeTarget("test2")
2924 buildRule.executeTarget("test3")
2925 buildRule.getProject()
2926 buildRule.getProject().getProperty("output")
2927 buildRule.executeTarget("test4")
2928 getOutputDir()
2929 jarFile.exists()
2930 testNoRecreate("test4")
2931 testNoRecreate("testNoRecreateWithUpdate")
2932 buildRule.executeTarget("test4")
2933 getOutputDir()
2934 assumeTrue(jarFile.setLastModified(jarFile.lastModified()-FileUtils.getFileUtils().getFileTimestampGranularity()*3))
2935 jarFile.setLastModified(jarFile.lastModified()-FileUtils.getFileUtils().getFileTimestampGranularity()*3)
2936 jarFile.lastModified()
2937 FileUtils.getFileUtils()
2938 FileUtils.getFileUtils().getFileTimestampGranularity()
2939 jarFile.lastModified()
2940 buildRule.executeTarget(secondTarget)
2941 jarFile.lastModified()
2942 testRecreate("test4","testRecreateWithoutUpdateAdditionalFiles")
2943 testRecreate("test4","testRecreateWithUpdateAdditionalFiles")
2944 testRecreate("testRecreateNewerFileSetup","testRecreateWithoutUpdateNewerFile")
2945 testRecreate("testRecreateNewerFileSetup","testRecreateWithUpdateNewerFile")
2946 FileUtilities.rollbackTimestamps(buildRule.getProject().getBaseDir(),5)
2947 buildRule.getProject()
2948 buildRule.getProject().getBaseDir()
2949 buildRule.executeTarget(firstTarget)
2950 getOutputDir()
2951 FileUtilities.rollbackTimestamps(buildRule.getOutputDir(),5)
2952 buildRule.getOutputDir()
2953 jarFile.lastModified()
2954 buildRule.executeTarget(secondTarget)
2955 getOutputDir()
2956 jarFile.lastModified()
2957 buildRule.executeTarget("testManifestStaysIntact")
2958 getOutputDir()
2959 getOutputDir()
2960 testNoRecreate("testNoRecreateBasedirExcludesWithUpdate")
2961 testNoRecreate("testNoRecreateBasedirExcludesWithoutUpdate")
2962 testNoRecreate("testNoRecreateZipfilesetExcludesWithUpdate")
2963 testNoRecreate("testNoRecreateZipfilesetExcludesWithoutUpdate")
2964 testRecreate("test4","testRecreateZipfilesetWithoutUpdateAdditionalFiles")
2965 testRecreate("test4","testRecreateZipfilesetWithUpdateAdditionalFiles")
2966 testRecreate("testRecreateNewerFileSetup","testRecreateZipfilesetWithoutUpdateNewerFile")
2967 testRecreate("testRecreateNewerFileSetup","testRecreateZipfilesetWithUpdateNewerFile")
2968 buildRule.executeTarget("testCreateWithEmptyFilesetSetUp")
2969 buildRule.executeTarget("testCreateWithEmptyFileset")
2970 buildRule.executeTarget("testCreateWithEmptyFileset")
2971 buildRule.executeTarget("testUpdateIfOnlyManifestHasChanged")
2972 getOutputDir()
2973 jarXml.exists()
2974 buildRule.executeTarget("testIndexTests")
2975 getOutputDir()
2976 StreamUtils.enumerationAsStream(archive.entries())
2977 archive.entries()
2978 StreamUtils.enumerationAsStream(archive.entries()).filter(ze->ze.getName().equals("META-INF/INDEX.LIST"))
2979 ze.getName()
2980 ze.getName().equals("META-INF/INDEX.LIST")
2981 StreamUtils.enumerationAsStream(archive.entries()).filter(ze->ze.getName().equals("META-INF/INDEX.LIST")).count()
2982 buildRule.executeTarget("testIndexTests")
2983 getOutputDir()
2984 archive.getEntry("META-INF/INDEX.LIST")
2985 archive.getInputStream(ze)
2986 r.readLine()
2987 r.readLine()
2988 buildRule.executeTarget("testManifestOnlyJar")
2989 buildRule.getLog()
2990 containsString("Building MANIFEST-only jar: ")
2991 getOutputDir()
2992 manifestFile.exists()
2993 buildRule.executeTarget("testIndexJarsPlusJarMarker")
2994 thrown.expect(BuildException.class)
2995 thrown.expectMessage("No Implementation-Title set.")
2996 buildRule.executeTarget("testNoVersionInfoFail")
2997 buildRule.executeTarget("testNoVersionInfoIgnore")
2998 buildRule.getFullLog()
2999 containsString("No Implementation-Title set.")
3000 buildRule.getFullLog()
3001 containsString("No Implementation-Version set.")
3002 buildRule.getFullLog()
3003 containsString("No Implementation-Vendor set.")
3004 buildRule.executeTarget("testNoVersionInfoWarn")
3005 buildRule.getLog()
3006 containsString("No Implementation-Title set.")
3007 buildRule.getLog()
3008 containsString("No Implementation-Version set.")
3009 buildRule.getLog()
3010 containsString("No Implementation-Vendor set.")
3011 buildRule.executeTarget("testNoVersionInfoNoStrict")
3012 buildRule.getLog()
3013 not(containsString("No Implementation-Title set."))
3014 containsString("No Implementation-Title set.")
3015 buildRule.getLog()
3016 not(containsString("No Implementation-Version set."))
3017 containsString("No Implementation-Version set.")
3018 buildRule.getLog()
3019 not(containsString("No Implementation-Vendor set."))
3020 containsString("No Implementation-Vendor set.")
3021 buildRule.executeTarget("testHasVersionInfo")
3022 buildRule.getLog()
3023 not(containsString("No Implementation-Title set."))
3024 containsString("No Implementation-Title set.")
3025 buildRule.getLog()
3026 not(containsString("No Implementation-Version set."))
3027 containsString("No Implementation-Version set.")
3028 buildRule.getLog()
3029 not(containsString("No Implementation-Vendor set."))
3030 containsString("No Implementation-Vendor set.")
3031 project.init()
3032 javac.setProject(project)
3033 javac.getJavacExecutable()
3034 project.setProperty("build.compiler","modern")
3035 javac.getJavacExecutable()
3036 javac.setFork(true)
3037 javac.getJavacExecutable()
3038 javac.getJavacExecutable()
3039 containsString("javac")
3040 project.setProperty("build.compiler","extJavac")
3041 javac.setFork(false)
3042 javac.getJavacExecutable()
3043 javac.getJavacExecutable()
3044 containsString("javac")
3045 project.setProperty("build.compiler","whatever")
3046 javac.getJavacExecutable()
3047 javac.setFork(true)
3048 javac.setExecutable(myJavac)
3049 javac.getJavacExecutable()
3050 javac.getCurrentCompilerArgs()
3051 javac.createCompilerArg()
3052 arg.setValue(testArg)
3053 javac.getCurrentCompilerArgs()
3054 arg.setCompiler("jikes")
3055 javac.getCurrentCompilerArgs()
3056 project.setProperty("build.compiler","jvc")
3057 javac.getCurrentCompilerArgs()
3058 project.setProperty("build.compiler","jikes")
3059 javac.getCurrentCompilerArgs()
3060 arg.setLine(testArg)
3061 javac.getCurrentCompilerArgs()
3062 javac.createCompilerArg()
3063 arg.setValue(testArg)
3064 arg.setCompiler("extJavac")
3065 javac.setFork(true)
3066 javac.getCurrentCompilerArgs()
3067 javac.getCompiler()
3068 System.getProperty("build.compiler")
3069 System.getProperty("build.compiler")
3070 "javac1.1".equals(compiler)
3071 "javac1.2".equals(compiler)
3072 "javac1.3".equals(compiler)
3073 "javac1.4".equals(compiler)
3074 "javac1.5".equals(compiler)
3075 "classic".equals(compiler)
3076 javac.setFork(true)
3077 javac.getCompiler()
3078 javac.getCompiler()
3079 javac.getCompilerVersion()
3080 javac.setProject(project)
3081 project.setUserProperty("build.compiler","jikes")
3082 javac.getCompiler()
3083 javac.setFork(true)
3084 javac.getCompiler()
3085 javac.setFork(false)
3086 javac.setCompiler("jvc")
3087 javac.getCompiler()
3088 javac.setFork(true)
3089 javac.getCompiler()
3090 javac.setCompiler("javac1.4")
3091 javac.setDepend(true)
3092 CompilerAdapterFactory.getCompiler(javac.getCompiler(),javac)
3093 javac.getCompiler()
3094 instanceOf(Javac13.class)
3095 javac.setFork(true)
3096 CompilerAdapterFactory.getCompiler(javac.getCompiler(),javac)
3097 javac.getCompiler()
3098 instanceOf(JavacExternal.class)
3099 javac.getSource()
3100 project.setNewProperty(MagicNames.BUILD_JAVAC_SOURCE,"1.4")
3101 javac.getSource()
3102 project.setNewProperty(MagicNames.BUILD_JAVAC_SOURCE,"1.4")
3103 javac.setSource("1.5")
3104 javac.getSource()
3105 javac.getTarget()
3106 project.setNewProperty(MagicNames.BUILD_JAVAC_TARGET,"1.4")
3107 javac.getTarget()
3108 project.setNewProperty(MagicNames.BUILD_JAVAC_TARGET,"1.4")
3109 javac.setTarget("1.5")
3110 javac.getTarget()
3111 javac.checkParameters()
3112 javac.checkParameters()
3113 p.setPath("src")
3114 javac.setSrcdir(p)
3115 p.setPath("modsrc")
3116 javac.setModulesourcepath(mp)
3117 javac.checkParameters()
3118 p.setPath("src")
3119 javac.setSourcepath(p)
3120 p.setPath("modsrc")
3121 javac.setModulesourcepath(mp)
3122 p.setPath("src")
3123 javac.setSrcdir(p)
3124 javac.checkParameters()
3125 System.getProperty("java.io.tmpdir")
3126 String.format("%stestMP%d",getClass().getName(),System.currentTimeMillis()/1000)
3127 getClass()
3128 getClass().getName()
3129 System.currentTimeMillis()
3130 destDir.mkdirs()
3131 p.setPath("src")
3132 javac.setModulesourcepath(p)
3133 javac.setDestdir(destDir)
3134 javac.checkParameters()
3135 destDir.delete()
3136 p.setPath("src")
3137 javac.setModulesourcepath(p)
3138 javac.checkParameters()
3139 buildRule.configureProject("src/etc/testcases/taskdefs/javadoc/javadoc.xml")
3140 buildRule.executeTarget("dirsetPath")
3141 buildRule.executeTarget("dirsetPathWithoutPackagenames")
3142 buildRule.executeTarget("nestedDirsetPath")
3143 buildRule.executeTarget("filesetPath")
3144 buildRule.executeTarget("nestedFilesetPath")
3145 buildRule.executeTarget("filelistPath")
3146 buildRule.executeTarget("nestedFilelistPath")
3147 buildRule.executeTarget("pathelementPath")
3148 buildRule.executeTarget("pathelementLocationPath")
3149 buildRule.executeTarget("nestedSource")
3150 buildRule.executeTarget("nestedFilesetRef")
3151 buildRule.executeTarget("nestedFilesetRefInPath")
3152 buildRule.executeTarget("nestedFilesetNoPatterns")
3153 buildRule.executeTarget("doublyNestedFileset")
3154 buildRule.executeTarget("doublyNestedFilesetNoPatterns")
3155 buildRule.executeTarget("nonJavaIncludes")
3156 buildRule.configureProject("src/etc/testcases/taskdefs/java.xml")
3157 buildRule.executeTarget("setUp")
3158 System.getProperty("junit.run.fatal.tests")
3159 thrown.expect(BuildException.class)
3160 thrown.expectMessage("Classname must not be null.")
3161 buildRule.executeTarget("testNoJarNoClassname")
3162 thrown.expect(BuildException.class)
3163 thrown.expectMessage("Cannot execute a jar in non-forked mode. Please set fork='true'. ")
3164 buildRule.executeTarget("testJarNoFork")
3165 thrown.expect(BuildException.class)
3166 thrown.expectMessage("Cannot use combination of ")
3167 buildRule.executeTarget("testJarAndClassName")
3168 thrown.expect(BuildException.class)
3169 thrown.expectMessage("Cannot use combination of ")
3170 buildRule.executeTarget("testClassnameAndJar")
3171 thrown.expect(BuildException.class)
3172 thrown.expectMessage("Cannot use combination of ")
3173 buildRule.executeTarget("testJarAndModule")
3174 thrown.expect(BuildException.class)
3175 thrown.expectMessage("Cannot use combination of ")
3176 buildRule.executeTarget("testModuleAndJar")
3177 buildRule.executeTarget("testClassnameAndModule")
3178 buildRule.executeTarget("testModuleAndClassname")
3179 buildRule.executeTarget("testModule")
3180 java.setFork(true)
3181 java.setModule(moduleName)
3182 java.setJvmargs("-Xmx128M")
3183 java.setArgs(arg)
3184 java.getCommandLine()
3185 java.getCommandLine().getCommandline()
3186 String.format("%s/%s",moduleName,className)
3187 java.setFork(true)
3188 java.setModule(moduleName)
3189 java.setClassname(className)
3190 java.setJvmargs("-Xmx128M")
3191 java.setArgs(arg)
3192 java.getCommandLine()
3193 java.getCommandLine().getCommandline()
3194 buildRule.executeTarget("testRun")
3195 assumeTrue("Fatal tests have not been set to run",runFatalTests)
3196 buildRule.executeTarget("testRunFail")
3197 assumeTrue("Fatal tests have not been set to run",runFatalTests)
3198 thrown.expect(BuildException.class)
3199 thrown.expectMessage("Java returned:")
3200 buildRule.executeTarget("testRunFailFoe")
3201 thrown.expect(BuildException.class)
3202 thrown.expectMessage("Java returned:")
3203 buildRule.executeTarget("testRunFailFoeFork")
3204 buildRule.executeTarget("testExcepting")
3205 buildRule.getLog()
3206 containsString("Exception raised inside called program")
3207 buildRule.executeTarget("testExceptingFork")
3208 buildRule.getLog()
3209 containsString("Java Result:")
3210 thrown.expect(BuildException.class)
3211 thrown.expectMessage("Exception raised inside called program")
3212 buildRule.executeTarget("testExceptingFoe")
3213 thrown.expect(BuildException.class)
3214 thrown.expectMessage("Java returned:")
3215 buildRule.executeTarget("testExceptingFoeFork")
3216 buildRule.executeTarget("testResultPropertyZero")
3217 buildRule.getProject()
3218 buildRule.getProject().getProperty("exitcode")
3219 buildRule.executeTarget("testResultPropertyNonZero")
3220 buildRule.getProject()
3221 buildRule.getProject().getProperty("exitcode")
3222 buildRule.executeTarget("testResultPropertyZeroNoFork")
3223 buildRule.getProject()
3224 buildRule.getProject().getProperty("exitcode")
3225 buildRule.executeTarget("testResultPropertyNonZeroNoFork")
3226 buildRule.getProject()
3227 buildRule.getProject().getProperty("exitcode")
3228 thrown.expect(BuildException.class)
3229 thrown.expectMessage("Java returned:")
3230 buildRule.executeTarget("testRunFailWithFailOnError")
3231 buildRule.executeTarget("testRunSuccessWithFailOnError")
3232 FILE_UTILS.createTempFile("spawn","log",newFile(buildRule.getProject().getProperty("output")),false,false)
3233 buildRule.getProject()
3234 buildRule.getProject().getProperty("output")
3235 logFile.exists()
3236 buildRule.getProject()
3237 buildRule.getProject().setProperty("logFile",logFile.getAbsolutePath())
3238 logFile.getAbsolutePath()
3239 buildRule.getProject()
3240 buildRule.getProject().setProperty("timeToWait",Long.toString(TIME_TO_WAIT))
3241 Long.toString(TIME_TO_WAIT)
3242 buildRule.getProject()
3243 buildRule.getProject().executeTarget("testSpawn")
3244 Thread.sleep(TIME_TO_WAIT*1000+SECURITY_MARGIN)
3245 logFile.exists()
3246 System.out.println("suggestion: increase the constant"+" SECURITY_MARGIN to give more time for java to start.")
3247 logFile.exists()
3248 buildRule.executeTarget("redirect1")
3249 buildRule.executeTarget("redirect2")
3250 buildRule.executeTarget("redirect3")
3251 buildRule.executeTarget("redirector1")
3252 buildRule.executeTarget("redirector2")
3253 buildRule.getProject()
3254 buildRule.getProject().setDefaultInputStream(in)
3255 java.setProject(buildRule.getProject())
3256 buildRule.getProject()
3257 java.setClassname("org.apache.tools.ant.Main")
3258 java.setArgs("-version")
3259 java.setFork(true)
3260 java.execute()
3261 input.setProject(buildRule.getProject())
3262 buildRule.getProject()
3263 input.setAddproperty("input.value")
3264 input.execute()
3265 inputThread.start()
3266 Thread.sleep(100)
3267 out.write("foo\n".getBytes())
3268 "foo\n".getBytes()
3269 out.flush()
3270 out.write("bar\n".getBytes())
3271 "bar\n".getBytes()
3272 out.flush()
3273 inputThread.join(2000)
3274 buildRule.getProject()
3275 buildRule.getProject().getProperty("input.value")
3276 buildRule.getProject()
3277 buildRule.getProject().setDefaultInputStream(in)
3278 java.setProject(buildRule.getProject())
3279 buildRule.getProject()
3280 java.setClassname("org.apache.tools.ant.Main")
3281 java.setArgs("-version")
3282 java.setFork(true)
3283 java.execute()
3284 input.setProject(buildRule.getProject())
3285 buildRule.getProject()
3286 input.setAddproperty("input.value")
3287 input.execute()
3288 inputThread.start()
3289 Thread.sleep(100)
3290 out.write("foo\n".getBytes())
3291 "foo\n".getBytes()
3292 out.flush()
3293 out.write("bar\n".getBytes())
3294 "bar\n".getBytes()
3295 out.flush()
3296 inputThread.join(2000)
3297 buildRule.getProject()
3298 buildRule.getProject().getProperty("input.value")
3299 buildRule.getProject()
3300 buildRule.getProject().setDefaultInputStream(in)
3301 java.setProject(buildRule.getProject())
3302 buildRule.getProject()
3303 java.setClassname("org.apache.tools.ant.Main")
3304 java.setArgs("-version")
3305 java.setFork(true)
3306 java.execute()
3307 input.setProject(buildRule.getProject())
3308 buildRule.getProject()
3309 input.setAddproperty("input.value")
3310 input.execute()
3311 inputThread.start()
3312 Thread.sleep(100)
3313 out.write("foo\n".getBytes())
3314 "foo\n".getBytes()
3315 out.flush()
3316 out.write("bar\n".getBytes())
3317 "bar\n".getBytes()
3318 out.flush()
3319 inputThread.join(2000)
3320 buildRule.getProject()
3321 buildRule.getProject().getProperty("input.value")
3322 buildRule.getProject()
3323 buildRule.getProject().setDefaultInputStream(in)
3324 Thread.sleep(500)
3325 out.write("foo-FlushedInput\n".getBytes())
3326 "foo-FlushedInput\n".getBytes()
3327 writingThread.setDaemon(true)
3328 writingThread.start()
3329 buildRule.executeTarget("flushedInput")
3330 requireJava11()
3331 buildRule.executeTarget("simpleSourceFile")
3332 requireJava11()
3333 thrown.expect(BuildException.class)
3334 thrown.expectMessage("Cannot execute sourcefile in non-forked mode. Please set fork='true'")
3335 buildRule.executeTarget("sourceFileRequiresFork")
3336 requireJava11()
3337 thrown.expect(BuildException.class)
3338 thrown.expectMessage("Cannot use 'sourcefile' in combination with")
3339 buildRule.executeTarget("sourceFileCantUseClassname")
3340 requireJava11()
3341 thrown.expect(BuildException.class)
3342 thrown.expectMessage("Cannot use 'sourcefile' in combination with")
3343 buildRule.executeTarget("sourceFileCantUseJar")
3344 requireJava11()
3345 thrown.expect(BuildException.class)
3346 thrown.expectMessage("Cannot use 'sourcefile' in combination with")
3347 buildRule.executeTarget("sourceFileCantUseModule")
3348 javaVersion.setAtLeast("11")
3349 Assume.assumeTrue("Skipping test which requires a minimum of Java 11 runtime",javaVersion.eval())
3350 javaVersion.eval()
3351 Integer.parseInt(argv[0])
3352 System.out.println(argv[1])
3353 System.err.println(argv[2])
3354 System.exit(exitCode)
3355 Integer.parseInt(argv[0])
3356 System.out.println(argv[1])
3357 System.err.println(argv[2])
3358 System.exit(exitCode)
3359 Integer.parseInt(argv[0])
3360 System.out.println(argv[1])
3361 System.err.println(argv[2])
3362 System.exit(exitCode)
3363 Integer.parseInt(argv[0])
3364 System.out.println(argv[1])
3365 System.err.println(argv[2])
3366 System.exit(exitCode)
3367 Integer.parseInt(argv[0])
3368 System.out.println(argv[1])
3369 System.err.println(argv[2])
3370 System.exit(exitCode)
3371 buildRule.configureProject("src/etc/testcases/taskdefs/loadfile.xml")
3372 buildRule.executeTarget("cleanup")
3373 buildRule.executeTarget("testNoSourcefileDefined")
3374 buildRule.executeTarget("testNoPropertyDefined")
3375 thrown.expect(BuildException.class)
3376 thrown.expectMessage(" doesn't exist")
3377 buildRule.executeTarget("testNoSourcefilefound")
3378 buildRule.executeTarget("testFailOnError")
3379 buildRule.getProject()
3380 buildRule.getProject().getProperty("testFailOnError")
3381 buildRule.executeTarget("testLoadAFile")
3382 buildRule.getProject()
3383 buildRule.getProject().getProperty("testLoadAFile")
3384 containsString("eh?")
3385 buildRule.executeTarget("testLoadAFileEnc")
3386 buildRule.getProject()
3387 buildRule.getProject().getProperty("testLoadAFileEnc")
3388 buildRule.executeTarget("testEvalProps")
3389 buildRule.getProject()
3390 buildRule.getProject().getProperty("testEvalProps")
3391 containsString("rain")
3392 buildRule.executeTarget("testFilterChain")
3393 buildRule.getProject()
3394 buildRule.getProject().getProperty("testFilterChain")
3395 containsString("World!")
3396 buildRule.executeTarget("testStripJavaComments")
3397 buildRule.getProject()
3398 buildRule.getProject().getProperty("expected")
3399 buildRule.getProject()
3400 buildRule.getProject().getProperty("testStripJavaComments")
3401 buildRule.executeTarget("testOneLine")
3402 buildRule.getProject()
3403 buildRule.getProject().getProperty("testOneLine")
3404 buildRule.configureProject("src/etc/testcases/taskdefs/macrodef.xml")
3405 buildRule.executeTarget("simple")
3406 buildRule.getLog()
3407 buildRule.executeTarget("text")
3408 buildRule.getLog()
3409 buildRule.executeTarget("duplicate.attribute")
3410 buildRule.executeTarget("duplicate.element")
3411 buildRule.executeTarget("uri")
3412 buildRule.getLog()
3413 buildRule.executeTarget("nested")
3414 buildRule.getLog()
3415 buildRule.executeTarget("double")
3416 buildRule.getLog()
3417 buildRule.executeTarget("ignorecase")
3418 buildRule.getLog()
3419 buildRule.executeTarget("ignore-element-case")
3420 buildRule.getLog()
3421 buildRule.executeTarget("textelement")
3422 buildRule.getLog()
3423 containsString("Hello world")
3424 buildRule.executeTarget("text.trim")
3425 buildRule.getLog()
3426 containsString("[Hello world]")
3427 buildRule.executeTarget("duplicatetextname")
3428 buildRule.executeTarget("duplicatetextname2")
3429 buildRule.executeTarget("escape")
3430 buildRule.getLog()
3431 buildRule.executeTarget("attribute.description")
3432 buildRule.getLog()
3433 buildRule.executeTarget("override.default")
3434 buildRule.getLog()
3435 buildRule.executeTarget("implicit")
3436 buildRule.getLog()
3437 thrown.expect(BuildException.class)
3438 thrown.expectMessage("Missing nested elements for implicit element implicit")
3439 buildRule.executeTarget("implicit.notoptional")
3440 buildRule.executeTarget("implicit.optional")
3441 buildRule.getLog()
3442 thrown.expect(BuildException.class)
3443 thrown.expectMessage("Only one element allowed when using implicit elements")
3444 buildRule.executeTarget("implicit.explicit")
3445 thrown.expect(BuildException.class)
3446 thrown.expectMessage(not(containsString("following error occurred")))
3447 not(containsString("following error occurred"))
3448 containsString("following error occurred")
3449 buildRule.executeTarget("backtraceoff")
3450 thrown.expect(BuildException.class)
3451 thrown.expectMessage("following error occurred")
3452 buildRule.executeTarget("backtraceon")
3453 buildRule.executeTarget("top-level-text")
3454 buildRule.getLog()
3455 containsString("Hello World")
3456 buildRule.configureProject("src/etc/testcases/taskdefs/makeurl.xml")
3457 Arrays.asList(newObject[][]{{"testEmpty","No property defined"},{"testNoProperty","No property defined"},{"testNoFile","No files defined"},{"testValidation","A source file is missing"}})
3458 thrown.expect(BuildException.class)
3459 thrown.expectMessage(message)
3460 buildRule.executeTarget(targetName)
3461 buildRule.configureProject("src/etc/testcases/taskdefs/makeurl.xml")
3462 Arrays.asList(newObject[][]{{"testEmpty","No property defined"},{"testNoProperty","No property defined"},{"testNoFile","No files defined"},{"testValidation","A source file is missing"}})
3463 thrown.expect(BuildException.class)
3464 thrown.expectMessage(message)
3465 buildRule.executeTarget(targetName)
3466 buildRule.configureProject("src/etc/testcases/taskdefs/manifestclasspath.xml")
3467 thrown.expect(BuildException.class)
3468 thrown.expectMessage("Jar's directory not found:")
3469 buildRule.executeTarget("test-bad-directory")
3470 buildRule.getProject()
3471 buildRule.getProject().getProperty("jar.classpath")
3472 thrown.expect(BuildException.class)
3473 thrown.expectMessage("Missing 'property' attribute!")
3474 buildRule.executeTarget("test-bad-no-property")
3475 buildRule.getProject()
3476 buildRule.getProject().getProperty("jar.classpath")
3477 thrown.expect(BuildException.class)
3478 thrown.expectMessage("Property 'jar.classpath' already set!")
3479 buildRule.executeTarget("test-bad-property-exists")
3480 buildRule.getProject()
3481 buildRule.getProject().getProperty("jar.classpath")
3482 thrown.expect(BuildException.class)
3483 thrown.expectMessage("Missing 'jarfile' attribute!")
3484 buildRule.executeTarget("test-bad-no-jarfile")
3485 buildRule.getProject()
3486 buildRule.getProject().getProperty("jar.classpath")
3487 thrown.expect(BuildException.class)
3488 thrown.expectMessage("Missing nested <classpath>!")
3489 buildRule.executeTarget("test-bad-no-classpath")
3490 buildRule.getProject()
3491 buildRule.getProject().getProperty("jar.classpath")
3492 buildRule.executeTarget("test-parent-level1")
3493 buildRule.getProject()
3494 buildRule.getProject().getProperty("jar.classpath")
3495 buildRule.executeTarget("test-parent-level2")
3496 buildRule.getProject()
3497 buildRule.getProject().getProperty("jar.classpath")
3498 thrown.expect(BuildException.class)
3499 thrown.expectMessage("No suitable relative path from ")
3500 buildRule.executeTarget("test-parent-level2-too-deep")
3501 buildRule.getProject()
3502 buildRule.getProject().getProperty("jar.classpath")
3503 assumeTrue("No regexp matcher is present",RegexpMatcherFactory.regexpMatcherPresent(buildRule.getProject()))
3504 RegexpMatcherFactory.regexpMatcherPresent(buildRule.getProject())
3505 buildRule.getProject()
3506 buildRule.executeTarget("test-pseudo-tahoe-refid")
3507 buildRule.getProject()
3508 buildRule.getProject().getProperty("jar.classpath")
3509 assumeTrue("No regexp matcher is present",RegexpMatcherFactory.regexpMatcherPresent(buildRule.getProject()))
3510 RegexpMatcherFactory.regexpMatcherPresent(buildRule.getProject())
3511 buildRule.getProject()
3512 buildRule.executeTarget("test-pseudo-tahoe-nested")
3513 buildRule.getProject()
3514 buildRule.getProject().getProperty("jar.classpath")
3515 buildRule.executeTarget("test-parent-level2-with-jars")
3516 buildRule.getProject()
3517 buildRule.getProject().getProperty("jar.classpath")
3518 buildRule.executeTarget("international-german")
3519 buildRule.executeTarget("run-two-jars")
3520 buildRule.getLog()
3521 containsString("beta alpha")
3522 assumeFalse("Test with hebrew path not attempted under Windows",Os.isFamily("windows"))
3523 Os.isFamily("windows")
3524 buildRule.executeTarget("international-hebrew")
3525 buildRule.executeTarget("run-two-jars")
3526 buildRule.getLog()
3527 containsString("beta alpha")
3528 assumeTrue("Test with drive letters only run on windows",Os.isFamily("windows"))
3529 Os.isFamily("windows")
3530 buildRule.executeTarget("testSameDrive")
3531 buildRule.getProject()
3532 buildRule.getProject().getProperty("cp")
3533 assumeTrue("Test with drive letters only run on windows",Os.isFamily("windows"))
3534 Os.isFamily("windows")
3535 System.getProperty("java.io.tmpdir")
3536 tmpdir.getCanonicalPath()
3537 tmpCanonicalPath.substring(0,1)
3538 tmpCanonicalPath.substring(0,1).toUpperCase()
3539 System.out.println("exception happened getting canonical path of java.io.tmpdir : "+ioe.getMessage())
3540 ioe.getMessage()
3541 "C".equals(driveLetter)
3542 newFile(altDriveLetter+":/foo.txt").getCanonicalPath()
3543 assumeNoException("Drive "+altDriveLetter+": doesn't exist or is not ready",e)
3544 buildRule.getProject()
3545 buildRule.getProject().setProperty("altDriveLetter",altDriveLetter)
3546 thrown.expect(BuildException.class)
3547 thrown.expectMessage("No suitable relative path from ")
3548 buildRule.executeTarget("testDifferentDrive")
3549 buildRule.getProject()
3550 buildRule.getProject().getProperty("cp")
3551 buildRule.configureProject("src/etc/testcases/taskdefs/manifest.xml")
3552 buildRule.getProject()
3553 buildRule.getProject().getProperty("output")
3554 buildRule.executeTarget("tearDown")
3555 buildRule.executeTarget("test1")
3556 getManifest(expandedManifest)
3557 manifest.getManifestVersion()
3558 buildRule.executeTarget("test2")
3559 getManifest(expandedManifest)
3560 manifest.getManifestVersion()
3561 thrown.expect(BuildException.class)
3562 thrown.expectMessage("Invalid Manifest")
3563 buildRule.executeTarget("test3")
3564 thrown.expect(BuildException.class)
3565 thrown.expectMessage("Invalid Manifest")
3566 buildRule.executeTarget("test4")
3567 buildRule.executeTarget("test5")
3568 buildRule.getLog()
3569 containsString("Manifest warning: \"Name\" attributes should not occur in the main section")
3570 thrown.expect(BuildException.class)
3571 thrown.expectMessage("Invalid Manifest")
3572 buildRule.executeTarget("test6")
3573 buildRule.getLog()
3574 containsString("Manifest sections should start with a \"Name\" attribute")
3575 buildRule.executeTarget("test7")
3576 buildRule.getLog()
3577 containsString(Manifest.ERROR_FROM_FORBIDDEN)
3578 buildRule.executeTarget("test8")
3579 getManifest(expandedManifest)
3580 manifest.getMainSection()
3581 mainSection.getAttributeValue("class-path")
3582 manifest.getSection("Test")
3583 testSection.getAttributeValue("TestAttr")
3584 thrown.expect(BuildException.class)
3585 thrown.expectMessage("Specify the section name using the \"name\" attribute of the <section> element")
3586 buildRule.executeTarget("test9")
3587 thrown.expect(BuildException.class)
3588 thrown.expectMessage("Attributes must have name and value")
3589 buildRule.executeTarget("test10")
3590 thrown.expect(BuildException.class)
3591 thrown.expectMessage("Attributes must have name and value")
3592 buildRule.executeTarget("test11")
3593 thrown.expect(BuildException.class)
3594 thrown.expectMessage("Sections must have a name")
3595 buildRule.executeTarget("test12")
3596 thrown.expect(BuildException.class)
3597 thrown.expectMessage("The attribute \"Test\" may not occur more than once in the same section")
3598 buildRule.executeTarget("test13")
3599 buildRule.executeTarget("test14")
3600 getManifest(expandedManifest)
3601 manifest.getMainSection()
3602 mainSection.getAttributeValue("class-path")
3603 buildRule.getProject()
3604 p.setUserProperty("test.longline",LONG_LINE)
3605 p.setUserProperty("test.long68name",LONG_68_NAME)
3606 p.setUserProperty("test.long70name",LONG_70_NAME)
3607 p.setUserProperty("test.notlongname",NOT_LONG_NAME)
3608 p.setUserProperty("test.value",VALUE)
3609 buildRule.executeTarget("testLongLine")
3610 getManifest(expandedManifest)
3611 manifest.getMainSection()
3612 mainSection.getAttributeValue("class-path")
3613 mainSection.getAttributeValue(LONG_68_NAME)
3614 mainSection.getAttributeValue(LONG_70_NAME)
3615 mainSection.getAttributeValue(NOT_LONG_NAME)
3616 in.readLine()
3617 set.add(read)
3618 in.readLine()
3619 in.close()
3620 set.remove(" NOT_LONG")
3621 set.remove(" NG")
3622 set.remove(LONG_70_NAME+": ")
3623 set.remove(NOT_LONG_NAME+": NOT_LO")
3624 buildRule.executeTarget("testOrder1")
3625 getManifest(expandedManifest)
3626 manifest.getSectionNames()
3627 e.nextElement()
3628 e.nextElement()
3629 manifest.getSection("Test1")
3630 section.getAttributeKeys()
3631 e.nextElement()
3632 e.nextElement()
3633 section.getAttribute(attr1Key)
3634 section.getAttribute(attr1Key).getName()
3635 section.getAttribute(attr2Key)
3636 section.getAttribute(attr2Key).getName()
3637 buildRule.executeTarget("testOrder2")
3638 getManifest(expandedManifest)
3639 manifest.getSectionNames()
3640 e.nextElement()
3641 e.nextElement()
3642 manifest.getSection("Test1")
3643 section.getAttributeKeys()
3644 e.nextElement()
3645 e.nextElement()
3646 section.getAttribute(attr1Key)
3647 section.getAttribute(attr1Key).getName()
3648 section.getAttribute(attr2Key)
3649 section.getAttribute(attr2Key).getName()
3650 buildRule.executeTarget("testNoFile")
3651 buildRule.executeTarget("testReplace")
3652 getManifest(newFile(outDir,"mftest.mf"))
3653 Manifest.getDefaultManifest()
3654 buildRule.executeTarget("testUpdate")
3655 getManifest(newFile(outDir,"mftest.mf"))
3656 Manifest.getDefaultManifest()
3657 mf.toString()
3658 startsWith("Manifest-Version: 2.0")
3659 containsString("Foo: Bar")
3660 getManifest(newFile(outDir,"mftest2.mf"))
3661 mf.toString()
3662 containsString("Foo: Baz")
3663 not(containsString("Foo: Bar"))
3664 containsString("Foo: Bar")
3665 buildRule.executeTarget("testFrom")
3666 buildRule.getLog()
3667 containsString(Manifest.ERROR_FROM_FORBIDDEN)
3668 buildRule.executeTarget("testIllegalName")
3669 buildRule.executeTarget("testIllegalNameInSection")
3670 buildRule.executeTarget("testIllegalNameInSection")
3671 buildRule.executeTarget("testIllegalName")
3672 buildRule.executeTarget("testIllegalName")
3673 buildRule.configureProject("src/etc/testcases/taskdefs/mkdir.xml")
3674 buildRule.executeTarget("test1")
3675 buildRule.executeTarget("test2")
3676 buildRule.executeTarget("test3")
3677 buildRule.getProject()
3678 buildRule.getProject().getProperty("output")
3679 f.exists()
3680 f.isDirectory()
3681 f.delete()
3682 buildRule.configureProject("src/etc/testcases/taskdefs/move.xml")
3683 buildRule.executeTarget("setUp")
3684 buildRule.executeTarget("testFilterSet")
3685 buildRule.getProject()
3686 buildRule.getProject().getProperty("output")
3687 buildRule.getProject()
3688 buildRule.getProject().getBaseDir()
3689 tmp.exists()
3690 FileUtilities.getFileContents(check)
3691 FileUtilities.getFileContents(tmp)
3692 buildRule.executeTarget("testFilterChain")
3693 buildRule.getProject()
3694 buildRule.getProject().getProperty("output")
3695 buildRule.getProject()
3696 buildRule.getProject().getBaseDir()
3697 tmp.exists()
3698 FileUtilities.getFileContents(check)
3699 FileUtilities.getFileContents(tmp)
3700 buildRule.executeTarget("testDirectoryRemoval")
3701 buildRule.getProject()
3702 buildRule.getProject().getProperty("output")
3703 newFile(output,"E/B/1").exists()
3704 newFile(output,"E/C/2").exists()
3705 newFile(output,"E/D/3").exists()
3706 newFile(output,"A/B/1").exists()
3707 newFile(output,"A/C/2").exists()
3708 newFile(output,"A/D/3").exists()
3709 newFile(output,"A/C").exists()
3710 newFile(output,"A/D").exists()
3711 buildRule.executeTarget("testDirectoryRetaining")
3712 buildRule.getProject()
3713 buildRule.getProject().getProperty("output")
3714 newFile(output,"E").exists()
3715 newFile(output,"E/1").exists()
3716 newFile(output,"A/1").exists()
3717 newFile(output,"A").exists()
3718 testCompleteDirectoryMove("testCompleteDirectoryMove")
3719 testCompleteDirectoryMove("testCompleteDirectoryMove2")
3720 testCompleteDirectoryMove("testCompleteDirectoryMove")
3721 buildRule.executeTarget("testPathElementMove")
3722 buildRule.getProject()
3723 buildRule.getProject().getProperty("output")
3724 newFile(output,"E").exists()
3725 newFile(output,"E/1").exists()
3726 newFile(output,"A/1").exists()
3727 newFile(output,"A").exists()
3728 buildRule.executeTarget("testMoveFileAndFileset")
3729 buildRule.executeTarget("testCompleteDirectoryMoveToExistingDir")
3730 buildRule.executeTarget("testCompleteDirectoryMoveFileToFile")
3731 buildRule.executeTarget("testCompleteDirectoryMoveFileToDir")
3732 buildRule.executeTarget("testCompleteDirectoryMoveFileAndFileset")
3733 buildRule.executeTarget("testCompleteDirectoryMoveFileToExistingFile")
3734 buildRule.executeTarget("testCompleteDirectoryMoveFileToExistingDir")
3735 buildRule.executeTarget("testCompleteDirectoryMoveFileToDirWithExistingFile")
3736 buildRule.executeTarget("testCompleteDirectoryMoveFileToDirWithExistingDir")
3737 buildRule.configureProject("src/etc/testcases/taskdefs/multimap.xml")
3738 buildRule.executeTarget("multicopy")
3739 buildRule.executeTarget("multimove")
3740 buildRule.executeTarget("singlecopy")
3741 buildRule.executeTarget("singlemove")
3742 buildRule.executeTarget("copywithempty")
3743 buildRule.executeTarget("movewithempty")
3744 buildRule.configureProject("src/etc/testcases/taskdefs/nice.xml")
3745 buildRule.executeTarget("noop")
3746 buildRule.executeTarget("current")
3747 buildRule.executeTarget("faster")
3748 buildRule.executeTarget("slower")
3749 thrown.expect(BuildException.class)
3750 thrown.expectMessage("out of the range 1-10")
3751 buildRule.executeTarget("too_slow")
3752 thrown.expect(BuildException.class)
3753 thrown.expectMessage("out of the range 1-10")
3754 buildRule.executeTarget("too_fast")
3755 buildRule.configureProject("src/etc/testcases/taskdefs/parallel.xml")
3756 buildRule.getProject()
3757 p.setUserProperty("test.direct",DIRECT_MESSAGE)
3758 p.setUserProperty("test.delayed",DELAYED_MESSAGE)
3759 buildRule.executeTarget("testBasic")
3760 buildRule.getOutput()
3761 buildRule.getError()
3762 buildRule.getLog()
3763 p.setUserProperty("test.direct",DIRECT_MESSAGE)
3764 p.setUserProperty("test.delayed",DELAYED_MESSAGE)
3765 buildRule.executeTarget("testThreadCount")
3766 buildRule.getOutput()
3767 buildRule.getError()
3768 buildRule.getLog()
3769 countThreads(log,pos)
3770 s.indexOf('|',start)
3771 s.indexOf('/',firstPipe)
3772 s.indexOf('|',beginSlash)
3773 Integer.parseInt(s.substring(firstPipe+1,beginSlash))
3774 s.substring(firstPipe+1,beginSlash)
3775 s.charAt(pos)
3776 s.charAt(pos)
3777 s.charAt(pos)
3778 s.charAt(pos++)
3779 thrown.expect(BuildException.class)
3780 thrown.expectMessage(FAILURE_MESSAGE)
3781 p.setUserProperty("test.failure",FAILURE_MESSAGE)
3782 p.setUserProperty("test.delayed",DELAYED_MESSAGE)
3783 buildRule.executeTarget("testFail")
3784 p.addTaskDefinition("demuxtest",DemuxOutputTask.class)
3785 System.setOut(newPrintStream(newDemuxOutputStream(p,false)))
3786 System.setErr(newPrintStream(newDemuxOutputStream(p,true)))
3787 p.executeTarget("testDemux")
3788 System.setOut(out)
3789 System.setErr(err)
3790 thrown.expect(ExitStatusException.class)
3791 thrown.expect(hasProperty("status",equalTo(42)))
3792 hasProperty("status",equalTo(42))
3793 equalTo(42)
3794 buildRule.executeTarget("testSingleExit")
3795 thrown.expect(ExitStatusException.class)
3796 thrown.expect(hasProperty("status",equalTo(42)))
3797 hasProperty("status",equalTo(42))
3798 equalTo(42)
3799 buildRule.executeTarget("testExitAndOtherException")
3800 buildRule.configureProject("src/etc/testcases/taskdefs/"+BUILD_FILENAME)
3801 test("testmap")
3802 test("testmapper")
3803 buildRule.executeTarget("testnotargetos")
3804 buildRule.executeTarget("test-nonmatching-mapper")
3805 buildRule.executeTarget(target)
3806 buildRule.getProject()
3807 buildRule.getProject().getProperty("result")
3808 buildRule.configureProject("src/etc/testcases/taskdefs/presetdef.xml")
3809 buildRule.executeTarget("simple")
3810 buildRule.getLog()
3811 buildRule.executeTarget("text")
3812 buildRule.getLog()
3813 buildRule.executeTarget("uri")
3814 buildRule.getLog()
3815 buildRule.executeTarget("defaulttest")
3816 buildRule.getLog()
3817 buildRule.executeTarget("doubledefault")
3818 buildRule.getLog()
3819 buildRule.executeTarget("text.optional")
3820 buildRule.getLog()
3821 buildRule.executeTarget("element.order")
3822 buildRule.getLog()
3823 buildRule.executeTarget("element.order2")
3824 buildRule.getLog()
3825 buildRule.executeTarget("antTypeTest")
3826 buildRule.getLog()
3827 thrown.expect(BuildException.class)
3828 thrown.expectMessage("javac doesn't support the")
3829 buildRule.executeTarget("correct_taskname_badattr")
3830 thrown.expect(BuildException.class)
3831 thrown.expectMessage("javac doesn't support the")
3832 buildRule.executeTarget("correct_taskname_badel")
3833 buildRule.executeTarget("presetdef-with-nested-element-twice")
3834 buildRule.executeTarget("presetdef-with-nested-element-twice")
3835 getProject()
3836 getProject().log("attribute is "+attribute)
3837 Runtime.getRuntime()
3838 Runtime.getRuntime().exec("java -cp "+System.getProperty("java.class.path")+" "+getClass().getName())
3839 System.getProperty("java.class.path")
3840 getClass()
3841 getClass().getName()
3842 processDestroyer.isAddedAsShutdownHook()
3843 processDestroyer.add(process)
3844 processDestroyer.isAddedAsShutdownHook()
3845 process.destroy()
3846 processDestroyer.remove(process)
3847 processDestroyer.isAddedAsShutdownHook()
3848 newProcessDestroyerTest().testProcessDestroyer()
3849 Thread.sleep(60000)
3850 buildRule.configureProject("src/etc/testcases/taskdefs/property.xml")
3851 buildRule.executeTarget("setUp")
3852 buildRule.executeTarget("test1")
3853 buildRule.getOutput()
3854 buildRule.getError()
3855 buildRule.executeTarget("test2")
3856 buildRule.getLog()
3857 containsString("testprop1=aa, testprop3=xxyy, testprop4=aazz")
3858 thrown.expect(BuildException.class)
3859 thrown.expectMessage("was circularly defined")
3860 buildRule.executeTarget("test3")
3861 buildRule.executeTarget("test4")
3862 buildRule.getLog()
3863 containsString("http.url is http://localhost:999")
3864 buildRule.getProject()
3865 buildRule.getProject().getProperty(MagicNames.PROJECT_BASEDIR)
3866 FileUtils.getFileUtils()
3867 FileUtils.getFileUtils().toURI(baseDir+"/property3.properties")
3868 buildRule.getProject()
3869 buildRule.getProject().setNewProperty("test5.url",uri)
3870 buildRule.executeTarget("test5")
3871 buildRule.getLog()
3872 containsString("http.url is http://localhost:999")
3873 buildRule.executeTarget("prefix.success")
3874 buildRule.getProject()
3875 buildRule.getProject().getProperty("server1.http.port")
3876 thrown.expect(BuildException.class)
3877 thrown.expectMessage("Prefix is only valid")
3878 buildRule.executeTarget("prefix.fail")
3879 thrown.expect(BuildException.class)
3880 thrown.expectMessage("was circularly defined")
3881 buildRule.executeTarget("testCircularReference")
3882 buildRule.executeTarget("thisIsNotACircularReference")
3883 buildRule.getLog()
3884 containsString("b is A/A/A")
3885 Class.forName("java.lang.Iterable")
3886 assumeNoException("XML Loading only on Java 5+",e)
3887 buildRule.executeTarget("testXmlProperty")
3888 buildRule.getProject()
3889 buildRule.getProject().getProperty("xml.one")
3890 buildRule.getProject()
3891 buildRule.getProject().getProperty("xml.two")
3892 buildRule.executeTarget("testRuntime")
3893 Runtime.getRuntime()
3894 Runtime.getRuntime().availableProcessors()
3895 Integer.parseInt(buildRule.getProject().getProperty("testruntime.availableProcessors"))
3896 buildRule.getProject()
3897 buildRule.getProject().getProperty("testruntime.availableProcessors")
3898 Runtime.getRuntime()
3899 Runtime.getRuntime().maxMemory()
3900 Long.parseLong(buildRule.getProject().getProperty("testruntime.maxMemory"))
3901 buildRule.getProject()
3902 buildRule.getProject().getProperty("testruntime.maxMemory")
3903 buildRule.getProject()
3904 buildRule.getProject().getProperty("testruntime.freeMemory")
3905 buildRule.getProject()
3906 buildRule.getProject().getProperty("testruntime.totalMemory")
3907 buildRule.configureProject("src/etc/testcases/taskdefs/jar.xml")
3908 buildRule.executeTarget("setUp")
3909 buildRule.executeTarget("testIndexTests")
3910 buildRule.getProject()
3911 buildRule.getProject().getProperty(tempJar)
3912 Jar.grabFilesAndDirs(archive,dirs,files)
3913 dirs.size()
3914 Arrays.stream(expectedDirs)
3915 hasItem(expectedDir)
3916 files.size()
3917 Arrays.stream(expectedFiles)
3918 hasItem(expectedFile)
3919 Jar.findJarName("foo",null)
3920 Jar.findJarName("lib"+File.separatorChar+"foo",null)
3921 Jar.findJarName("foo",newString[]{"bar"})
3922 Jar.findJarName("foo",newString[]{"foo"})
3923 Jar.findJarName("foo",newString[]{"lib/foo"})
3924 Jar.findJarName("bar"+File.separatorChar+"foo",newString[]{"foo"})
3925 Jar.findJarName("bar"+File.separatorChar+"foo",newString[]{"lib/foo"})
3926 Jar.findJarName("lib/foo",newString[]{"foo","lib/foo","lib/bar/foo"})
3927 buildRule.configureProject("src/etc/testcases/taskdefs/recorder.xml")
3928 buildRule.executeTarget("setUp")
3929 buildRule.executeTarget("noappend")
3930 FILE_UTILS.contentEquals(buildRule.getProject().resolveFile(REC_IN+"rectest1.result"),newFile(buildRule.getOutputDir(),"rectest1.log"),true)
3931 buildRule.getProject()
3932 buildRule.getProject().resolveFile(REC_IN+"rectest1.result")
3933 buildRule.getOutputDir()
3934 buildRule.executeTarget("append")
3935 FILE_UTILS.contentEquals(buildRule.getProject().resolveFile(REC_IN+"rectest2.result"),newFile(buildRule.getOutputDir(),"rectest2.log"),true)
3936 buildRule.getProject()
3937 buildRule.getProject().resolveFile(REC_IN+"rectest2.result")
3938 buildRule.getOutputDir()
3939 buildRule.executeTarget("restart")
3940 FILE_UTILS.contentEquals(buildRule.getProject().resolveFile(REC_IN+"rectest3.result"),newFile(buildRule.getOutputDir(),"rectest3.log"),true)
3941 buildRule.getProject()
3942 buildRule.getProject().resolveFile(REC_IN+"rectest3.result")
3943 buildRule.getOutputDir()
3944 buildRule.executeTarget("deleterestart")
3945 FILE_UTILS.contentEquals(buildRule.getProject().resolveFile(REC_IN+"rectest4.result"),newFile(buildRule.getOutputDir(),"rectest4.log"),true)
3946 buildRule.getProject()
3947 buildRule.getProject().resolveFile(REC_IN+"rectest4.result")
3948 buildRule.getOutputDir()
3949 buildRule.executeTarget("subbuild")
3950 FILE_UTILS.contentEquals(buildRule.getProject().resolveFile(REC_IN+"rectest5.result"),newFile(buildRule.getOutputDir(),"rectest5.log"),true)
3951 buildRule.getProject()
3952 buildRule.getProject().resolveFile(REC_IN+"rectest5.result")
3953 buildRule.getOutputDir()
3954 FILE_UTILS.contentEquals(buildRule.getProject().resolveFile(REC_IN+"rectest6.result"),newFile(buildRule.getOutputDir(),"rectest6.log"),true)
3955 buildRule.getProject()
3956 buildRule.getProject().resolveFile(REC_IN+"rectest6.result")
3957 buildRule.getOutputDir()
3958 buildRule.configureProject("src/etc/testcases/taskdefs/rename.xml")
3959 buildRule.executeTarget("test1")
3960 buildRule.executeTarget("test2")
3961 buildRule.executeTarget("test3")
3962 buildRule.executeTarget("test4")
3963 buildRule.executeTarget("test5")
3964 buildRule.executeTarget("test6")
3965 buildRule.configureProject("src/etc/testcases/taskdefs/replace.xml")
3966 buildRule.executeTarget("setUp")
3967 buildRule.executeTarget("test1")
3968 buildRule.executeTarget("test2")
3969 buildRule.executeTarget("test3")
3970 buildRule.executeTarget("test4")
3971 buildRule.executeTarget("test5")
3972 buildRule.executeTarget("test6")
3973 buildRule.executeTarget("test7")
3974 buildRule.executeTarget("test8")
3975 buildRule.executeTarget("test9")
3976 buildRule.getOutputDir()
3977 buildRule.getOutputDir()
3978 buildRule.executeTarget("lastModifiedSetup")
3979 buildRule.getOutputDir()
3980 assumeTrue("Could not change file modification time",testFile.setLastModified(testFile.lastModified()-FileUtils.getFileUtils().getFileTimestampGranularity()*5))
3981 testFile.setLastModified(testFile.lastModified()-FileUtils.getFileUtils().getFileTimestampGranularity()*5)
3982 testFile.lastModified()
3983 FileUtils.getFileUtils()
3984 FileUtils.getFileUtils().getFileTimestampGranularity()
3985 testFile.lastModified()
3986 buildRule.executeTarget("testNoPreserve")
3987 buildRule.getOutputDir()
3988 newFile(buildRule.getOutputDir(),"test.txt").lastModified()
3989 buildRule.executeTarget("lastModifiedSetup")
3990 buildRule.getOutputDir()
3991 assumeTrue("Could not change file modification time",testFile.setLastModified(testFile.lastModified()-FileUtils.getFileUtils().getFileTimestampGranularity()*5))
3992 testFile.setLastModified(testFile.lastModified()-FileUtils.getFileUtils().getFileTimestampGranularity()*5)
3993 testFile.lastModified()
3994 FileUtils.getFileUtils()
3995 FileUtils.getFileUtils().getFileTimestampGranularity()
3996 testFile.lastModified()
3997 buildRule.executeTarget("testPreserve")
3998 buildRule.getOutputDir()
3999 newFile(buildRule.getOutputDir(),"test.txt").lastModified()
4000 result.exists()
4001 Files.newInputStream(expect.toPath())
4002 expect.toPath()
4003 Files.newInputStream(result.toPath())
4004 result.toPath()
4005 inExpect.read()
4006 inResult.read()
4007 inExpect.read()
4008 inResult.read()
4009 buildRule.configureProject("src/etc/testcases/taskdefs/rmic/rmic.xml")
4010 buildRule.executeTarget("testDefault")
4011 buildRule.executeTarget("testDefaultDest")
4012 buildRule.executeTarget("testEmpty")
4013 buildRule.executeTarget("testEmptyDest")
4014 buildRule.executeTarget("testRmic")
4015 buildRule.executeTarget("testRmicDest")
4016 buildRule.executeTarget("testRmicJArg")
4017 buildRule.executeTarget("testRmicJArgDest")
4018 buildRule.executeTarget("testKaffe")
4019 buildRule.executeTarget("testKaffeDest")
4020 buildRule.executeTarget("testWlrmic")
4021 buildRule.executeTarget("testWlrmicJArg")
4022 buildRule.executeTarget("testForking")
4023 buildRule.executeTarget("testForkingAntClasspath")
4024 buildRule.executeTarget("testForkingAntClasspathDest")
4025 buildRule.executeTarget("testAntClasspath")
4026 buildRule.executeTarget("testAntClasspathDest")
4027 thrown.expect(BuildException.class)
4028 thrown.expectMessage(RmicAdapterFactory.ERROR_UNKNOWN_COMPILER)
4029 buildRule.executeTarget("testBadName")
4030 buildRule.executeTarget("testExplicitClass")
4031 thrown.expect(BuildException.class)
4032 thrown.expectMessage(RmicAdapterFactory.ERROR_NOT_RMIC_ADAPTER)
4033 buildRule.executeTarget("testWrongClass")
4034 thrown.expect(BuildException.class)
4035 thrown.expectMessage(Rmic.ERROR_RMIC_FAILED)
4036 buildRule.executeTarget("testDefaultBadClass")
4037 buildRule.getLog()
4038 containsString("unimplemented.class")
4039 thrown.expect(BuildException.class)
4040 thrown.expectMessage(RmicAdapterFactory.ERROR_UNKNOWN_COMPILER)
4041 buildRule.executeTarget("testMagicProperty")
4042 thrown.expect(BuildException.class)
4043 thrown.expectMessage(RmicAdapterFactory.ERROR_UNKNOWN_COMPILER)
4044 buildRule.executeTarget("testMagicPropertyOverridesEmptyString")
4045 buildRule.executeTarget("testMagicPropertyIsEmptyString")
4046 thrown.expect(BuildException.class)
4047 thrown.expectMessage(Rmic.ERROR_RMIC_FAILED)
4048 buildRule.executeTarget("testFailingAdapter")
4049 buildRule.executeTarget("testVersion11")
4050 buildRule.executeTarget("testVersion11Dest")
4051 buildRule.executeTarget("testVersion12")
4052 buildRule.executeTarget("testVersion12Dest")
4053 buildRule.executeTarget("testVersionCompat")
4054 buildRule.executeTarget("testVersionCompatDest")
4055 assumeFalse("Current system is Java 9 or newer",JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9))
4056 JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
4057 buildRule.executeTarget("testXnewForked")
4058 assumeTrue("Current system is Java 8 or older",JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9))
4059 JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
4060 thrown.expect(BuildException.class)
4061 thrown.expectMessage("JDK9 has removed support for -Xnew")
4062 buildRule.executeTarget("testXnewForked")
4063 assumeFalse("Current system is Java 9 or newer",JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9))
4064 JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
4065 buildRule.executeTarget("testXnewForkedDest")
4066 assumeTrue("Current system is Java 8 or older",JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9))
4067 JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
4068 thrown.expect(BuildException.class)
4069 thrown.expectMessage("JDK9 has removed support for -Xnew")
4070 buildRule.executeTarget("testXnewForkedDest")
4071 assumeFalse("Current system is Java 9 or newer",JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9))
4072 JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
4073 buildRule.executeTarget("testXnewCompiler")
4074 assumeTrue("Current system is Java 8 or older",JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9))
4075 JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
4076 thrown.expect(BuildException.class)
4077 thrown.expectMessage("JDK9 has removed support for -Xnew")
4078 buildRule.executeTarget("testXnewCompiler")
4079 assumeFalse("Current system is Java 9 or newer",JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9))
4080 JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
4081 buildRule.executeTarget("testXnewCompilerDest")
4082 assumeTrue("Current system is Java 8 or older",JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9))
4083 JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
4084 thrown.expect(BuildException.class)
4085 thrown.expectMessage("JDK9 has removed support for -Xnew")
4086 buildRule.executeTarget("testXnewCompilerDest")
4087 assumeFalse("Current system is Java 11 or newer",JavaEnvUtils.isAtLeastJavaVersion("11"))
4088 JavaEnvUtils.isAtLeastJavaVersion("11")
4089 buildRule.executeTarget("testIDL")
4090 assumeTrue("Current system is Java 10 or older",JavaEnvUtils.isAtLeastJavaVersion("11"))
4091 JavaEnvUtils.isAtLeastJavaVersion("11")
4092 thrown.expect(BuildException.class)
4093 thrown.expectMessage("this rmic implementation doesn't support the -idl switch")
4094 buildRule.executeTarget("testIDL")
4095 assumeFalse("Current system is Java 11 or newer",JavaEnvUtils.isAtLeastJavaVersion("11"))
4096 JavaEnvUtils.isAtLeastJavaVersion("11")
4097 buildRule.executeTarget("testIDLDest")
4098 assumeTrue("Current system is Java 10 or older",JavaEnvUtils.isAtLeastJavaVersion("11"))
4099 JavaEnvUtils.isAtLeastJavaVersion("11")
4100 thrown.expect(BuildException.class)
4101 thrown.expectMessage("this rmic implementation doesn't support the -idl switch")
4102 buildRule.executeTarget("testIDL")
4103 assumeFalse("Current system is Java 11 or newer",JavaEnvUtils.isAtLeastJavaVersion("11"))
4104 JavaEnvUtils.isAtLeastJavaVersion("11")
4105 buildRule.executeTarget("testIIOP")
4106 assumeTrue("Current system is Java 10 or older",JavaEnvUtils.isAtLeastJavaVersion("11"))
4107 JavaEnvUtils.isAtLeastJavaVersion("11")
4108 thrown.expect(BuildException.class)
4109 thrown.expectMessage("this rmic implementation doesn't support the -iiop switch")
4110 buildRule.executeTarget("testIIOP")
4111 assumeFalse("Current system is Java 11 or newer",JavaEnvUtils.isAtLeastJavaVersion("11"))
4112 JavaEnvUtils.isAtLeastJavaVersion("11")
4113 buildRule.executeTarget("testIIOPDest")
4114 assumeTrue("Current system is Java 10 or older",JavaEnvUtils.isAtLeastJavaVersion("11"))
4115 JavaEnvUtils.isAtLeastJavaVersion("11")
4116 thrown.expect(BuildException.class)
4117 thrown.expectMessage("this rmic implementation doesn't support the -iiop switch")
4118 buildRule.executeTarget("testIIOP")
4119 getRmic()
4120 getRmic().log(LOG_MESSAGE)
4121 project.init()
4122 rmic.setProject(project)
4123 rmic.getCurrentCompilerArgs()
4124 rmic.createCompilerArg()
4125 arg.setValue(testArg)
4126 rmic.getCurrentCompilerArgs()
4127 arg.setCompiler("weblogic")
4128 rmic.getCurrentCompilerArgs()
4129 project.setProperty("build.rmic","sun")
4130 rmic.getCurrentCompilerArgs()
4131 project.setProperty("build.rmic","weblogic")
4132 rmic.getCurrentCompilerArgs()
4133 rmic.getCompiler()
4134 project.setNewProperty("build.rmic","weblogic")
4135 rmic.getCompiler()
4136 rmic.setCompiler("kaffe")
4137 rmic.getCompiler()
4138 buildRule.configureProject("src/etc/testcases/taskdefs/signjar.xml")
4139 Boolean.getBoolean("offline")
4140 buildRule.executeTarget("sigfile")
4141 sj.setAlias("testonly")
4142 sj.setKeystore("testkeystore")
4143 sj.setStorepass("apacheant")
4144 sj.setJar(newFile(buildRule.getProject().getProperty("test.jar")))
4145 buildRule.getProject()
4146 buildRule.getProject().getProperty("test.jar")
4147 sj.isSigned()
4148 sj.setSigfile("TEST")
4149 sj.isSigned()
4150 buildRule.executeTarget("invalidchars")
4151 sj.setAlias("test@nly")
4152 sj.setKeystore("testkeystore")
4153 sj.setStorepass("apacheant")
4154 sj.setJar(newFile(buildRule.getProject().getProperty("test.jar")))
4155 buildRule.getProject()
4156 buildRule.getProject().getProperty("test.jar")
4157 sj.isSigned()
4158 isSigned(jar)
4159 buildRule.executeTarget("urlKeystoreFile")
4160 assumeFalse("Test is set offline",isOffline())
4161 isOffline()
4162 buildRule.executeTarget("urlKeystoreHTTP")
4163 thrown.expect(BuildException.class)
4164 thrown.expectMessage("jarsigner returned: 1")
4165 buildRule.executeTarget("testTsaLocalhost")
4166 buildRule.executeTarget("jar")
4167 buildRule.getProject()
4168 buildRule.getProject().getProperty("test.jar")
4169 testJar.getParentFile()
4170 testJarParent.getName()
4171 testJar.getName()
4172 testJar.getCanonicalPath()
4173 f.getCanonicalPath()
4174 s.setProject(buildRule.getProject())
4175 buildRule.getProject()
4176 s.setJar(f)
4177 s.setAlias("testonly")
4178 s.setStorepass("apacheant")
4179 s.setKeystore("testkeystore")
4180 s.execute()
4181 buildRule.configureProject("src/etc/testcases/taskdefs/sleep.xml")
4182 buildRule.executeTarget("test1")
4183 timer.stop()
4184 timer.time()
4185 buildRule.executeTarget("test2")
4186 timer.stop()
4187 timer.time()
4188 buildRule.executeTarget("test3")
4189 timer.stop()
4190 timer.time()
4191 buildRule.executeTarget("test3")
4192 timer.stop()
4193 timer.time()
4194 timer.time()
4195 buildRule.executeTarget("test5")
4196 buildRule.executeTarget("test6")
4197 timer.stop()
4198 timer.time()
4199 start()
4200 System.currentTimeMillis()
4201 System.currentTimeMillis()
4202 JDBCTask.getLoaderMap()
4203 JDBCTask.getLoaderMap().clear()
4204 thrown.expect(BuildException.class)
4205 thrown.expectMessage("No suitable Driver")
4206 createTask(getProperties(NULL))
4207 getProperties(NULL)
4208 SQLExec.getLoaderMap()
4209 not(hasKey(NULL_DRIVER))
4210 hasKey(NULL_DRIVER)
4211 sql.execute()
4212 SQLExec.getLoaderMap()
4213 hasKey(NULL_DRIVER)
4214 sql.getLoader()
4215 JDBCTask.getLoaderMap()
4216 JDBCTask.getLoaderMap().get(NULL_DRIVER)
4217 sql.getLoader()
4218 createTask(getProperties(NULL))
4219 getProperties(NULL)
4220 JDBCTask.getLoaderMap()
4221 hasKey(NULL_DRIVER)
4222 sql.execute()
4223 JDBCTask.getLoaderMap()
4224 hasKey(NULL_DRIVER)
4225 sql.getLoader()
4226 JDBCTask.getLoaderMap()
4227 JDBCTask.getLoaderMap().get(NULL_DRIVER)
4228 sql.getLoader()
4229 doMultipleCalls(1000,NULL,true,true)
4230 doMultipleCalls(1000,ORACLE,true,false)
4231 doMultipleCalls(1000,MYSQL,true,false)
4232 getProperties(database)
4233 createTask(props)
4234 sql.setCaching(caching)
4235 sql.execute()
4236 sql.setProject(newProject())
4237 sql.setDriver(props.getProperty(DRIVER))
4238 props.getProperty(DRIVER)
4239 sql.setUserid(props.getProperty(USER))
4240 props.getProperty(USER)
4241 sql.setPassword(props.getProperty(PASSWORD))
4242 props.getProperty(PASSWORD)
4243 sql.setUrl(props.getProperty(URL))
4244 props.getProperty(URL)
4245 sql.createClasspath()
4246 sql.createClasspath().setLocation(newFile(props.getProperty(PATH)))
4247 props.getProperty(PATH)
4248 sql.addText(props.getProperty(SQL))
4249 props.getProperty(SQL)
4250 resource.replace('.','/')
4251 getClass()
4252 getClass().getClassLoader()
4253 getClass().getClassLoader().getResource(resource)
4254 url.toString()
4255 u.startsWith("jar:file:")
4256 u.indexOf("!")
4257 u.substring("jar:file:".length(),pling)
4258 "jar:file:".length()
4259 u.startsWith("file:")
4260 u.indexOf(resource)
4261 u.substring("file:".length(),tail)
4262 "file:".length()
4263 getProperties("oracle.jdbc.driver.OracleDriver","test","test","jdbc:oracle:thin:@127.0.0.1:1521:orcl")
4264 getProperties("org.gjt.mm.mysql.Driver","test","test","jdbc:mysql://127.0.0.1:3306/test")
4265 getProperties(NULL_DRIVER,"test","test","jdbc:database://hostname:port/name")
4266 findResourcePath(props.getProperty(DRIVER))
4267 props.getProperty(DRIVER)
4268 props.put(PATH,path)
4269 props.put(SQL,"create table OOME_TEST(X INTEGER NOT NULL);\ndrop table if exists OOME_TEST;")
4270 getProperties("oracle.jdbc.driver.OracleDriver","test","test","jdbc:oracle:thin:@127.0.0.1:1521:orcl")
4271 getProperties("org.gjt.mm.mysql.Driver","test","test","jdbc:mysql://127.0.0.1:3306/test")
4272 getProperties(NULL_DRIVER,"test","test","jdbc:database://hostname:port/name")
4273 findResourcePath(props.getProperty(DRIVER))
4274 props.getProperty(DRIVER)
4275 props.put(PATH,path)
4276 props.put(SQL,"create table OOME_TEST(X INTEGER NOT NULL);\ndrop table if exists OOME_TEST;")
4277 Logger.getAnonymousLogger()
4278 s.lastDelimiterPosition(newStringBuffer(),null)
4279 s.lastDelimiterPosition(newStringBuffer("GO"),null)
4280 s.lastDelimiterPosition(newStringBuffer("; "),null)
4281 s.lastDelimiterPosition(newStringBuffer("ab;"),null)
4282 s.setDelimiter("GO")
4283 s.lastDelimiterPosition(newStringBuffer("GO "),null)
4284 s.lastDelimiterPosition(newStringBuffer("go"),null)
4285 s.lastDelimiterPosition(newStringBuffer("GO"),null)
4286 s.setStrictDelimiterMatching(false)
4287 s.lastDelimiterPosition(newStringBuffer(),null)
4288 s.lastDelimiterPosition(newStringBuffer("GO"),null)
4289 s.lastDelimiterPosition(newStringBuffer("; "),null)
4290 s.lastDelimiterPosition(newStringBuffer("ab;"),null)
4291 s.setDelimiter("GO")
4292 s.lastDelimiterPosition(newStringBuffer("GO "),null)
4293 s.lastDelimiterPosition(newStringBuffer("go"),null)
4294 s.lastDelimiterPosition(newStringBuffer("GO"),null)
4295 t.setValue("row")
4296 s.setDelimiterType(t)
4297 s.lastDelimiterPosition(null,"")
4298 s.lastDelimiterPosition(null,"GO")
4299 s.lastDelimiterPosition(null,"; ")
4300 s.lastDelimiterPosition(newStringBuffer("ab"),";")
4301 s.setDelimiter("GO")
4302 s.lastDelimiterPosition(null,"GO ")
4303 s.lastDelimiterPosition(null,"go")
4304 s.lastDelimiterPosition(newStringBuffer("ab"),"GO")
4305 t.setValue("row")
4306 s.setDelimiterType(t)
4307 s.setStrictDelimiterMatching(false)
4308 s.lastDelimiterPosition(null,"")
4309 s.lastDelimiterPosition(null,"GO")
4310 s.lastDelimiterPosition(newStringBuffer("; "),"; ")
4311 s.lastDelimiterPosition(newStringBuffer("ab"),";")
4312 s.setDelimiter("GO")
4313 s.lastDelimiterPosition(newStringBuffer("abcd"),"GO ")
4314 s.lastDelimiterPosition(newStringBuffer("go"),"go")
4315 s.lastDelimiterPosition(newStringBuffer("ab"),"GO")
4316 buildRule.configureProject("src/etc/testcases/taskdefs/style/build.xml")
4317 thrown.expect(BuildException.class)
4318 thrown.expectMessage("specify the stylesheet either as a filename in style attribute or "+"as a nested resource")
4319 buildRule.executeTarget("testStyleIsSet")
4320 expectFileContains("testTransferParameterSet",buildRule.getOutputDir().getAbsoluteFile()+"/out.xml","set='myvalue'")
4321 buildRule.getOutputDir()
4322 buildRule.getOutputDir().getAbsoluteFile()
4323 expectFileContains("testTransferParameterEmpty",buildRule.getOutputDir().getAbsoluteFile()+"/out.xml","empty=''")
4324 buildRule.getOutputDir()
4325 buildRule.getOutputDir().getAbsoluteFile()
4326 expectFileContains("testTransferParameterUnset",buildRule.getOutputDir().getAbsoluteFile()+"/out.xml","undefined='${value}'")
4327 buildRule.getOutputDir()
4328 buildRule.getOutputDir().getAbsoluteFile()
4329 expectFileContains("testTransferParameterUnsetWithIf",buildRule.getOutputDir().getAbsoluteFile()+"/out.xml","undefined='undefined default value'")
4330 buildRule.getOutputDir()
4331 buildRule.getOutputDir().getAbsoluteFile()
4332 expectFileContains("testNewerStylesheet",buildRule.getOutputDir().getAbsoluteFile()+"/out.xml","new-value")
4333 buildRule.getOutputDir()
4334 buildRule.getOutputDir().getAbsoluteFile()
4335 testDefaultMapper("testDefaultMapper")
4336 testDefaultMapper("testExplicitFileset")
4337 testDefaultMapper("testDefaultMapper")
4338 buildRule.getOutputDir()
4339 buildRule.getOutputDir().getAbsoluteFile()
4340 newFile(buildRule.getOutputDir().getAbsoluteFile(),"out.xml").exists()
4341 expectFileContains("testCustomMapper",buildRule.getOutputDir().getAbsoluteFile()+"/out.xml","set='myvalue'")
4342 buildRule.getOutputDir()
4343 buildRule.getOutputDir().getAbsoluteFile()
4344 buildRule.getOutputDir()
4345 buildRule.getOutputDir().getAbsoluteFile()
4346 newFile(buildRule.getOutputDir().getAbsoluteFile(),"out.xml").exists()
4347 expectFileContains("testTypedMapper",buildRule.getOutputDir().getAbsoluteFile()+"/out.xml","set='myvalue'")
4348 buildRule.getOutputDir()
4349 buildRule.getOutputDir().getAbsoluteFile()
4350 buildRule.executeTarget("testDirectoryHierarchyWithDirMatching")
4351 buildRule.getOutputDir()
4352 buildRule.getOutputDir().getAbsoluteFile()
4353 newFile(buildRule.getOutputDir().getAbsoluteFile(),"dest/level1/data.html").exists()
4354 buildRule.executeTarget("testDirsWithSpaces")
4355 buildRule.getOutputDir()
4356 buildRule.getOutputDir().getAbsoluteFile()
4357 newFile(buildRule.getOutputDir().getAbsoluteFile(),"d est/data.html").exists()
4358 thrown.expect(BuildException.class)
4359 thrown.expectMessage("specify the stylesheet either as a filename in style attribute or "+"as a nested resource but not as both")
4360 buildRule.executeTarget("testWithStyleAttrAndResource")
4361 expectFileContains("testWithFileResource",buildRule.getOutputDir().getAbsoluteFile()+"/out.xml","set='value'")
4362 buildRule.getOutputDir()
4363 buildRule.getOutputDir().getAbsoluteFile()
4364 expectFileContains("testWithUrlResource",buildRule.getOutputDir().getAbsoluteFile()+"/out.xml","set='value'")
4365 buildRule.getOutputDir()
4366 buildRule.getOutputDir().getAbsoluteFile()
4367 buildRule.executeTarget("testFilenameAsParam")
4368 buildRule.getOutputDir()
4369 buildRule.getOutputDir().getAbsoluteFile()
4370 buildRule.getOutputDir()
4371 buildRule.getOutputDir().getAbsoluteFile()
4372 buildRule.getOutputDir()
4373 buildRule.getOutputDir().getAbsoluteFile()
4374 buildRule.getOutputDir()
4375 buildRule.getOutputDir().getAbsoluteFile()
4376 buildRule.getOutputDir()
4377 buildRule.getOutputDir().getAbsoluteFile()
4378 buildRule.executeTarget("testFilenameAsParamNoSetting")
4379 buildRule.getOutputDir()
4380 buildRule.getOutputDir().getAbsoluteFile()
4381 buildRule.getOutputDir()
4382 buildRule.getOutputDir().getAbsoluteFile()
4383 buildRule.getOutputDir()
4384 buildRule.getOutputDir().getAbsoluteFile()
4385 buildRule.getOutputDir()
4386 buildRule.getOutputDir().getAbsoluteFile()
4387 buildRule.executeTarget("testFilenameAndFiledirAsParam")
4388 buildRule.getOutputDir()
4389 buildRule.getOutputDir().getAbsoluteFile()
4390 buildRule.getOutputDir()
4391 buildRule.getOutputDir().getAbsoluteFile()
4392 buildRule.getOutputDir()
4393 buildRule.getOutputDir().getAbsoluteFile()
4394 buildRule.getOutputDir()
4395 buildRule.getOutputDir().getAbsoluteFile()
4396 FileUtilities.getFileContents(newFile(filename))
4397 buildRule.executeTarget(target)
4398 getFileString(filename)
4399 containsString(contains)
4400 buildRule.configureProject("src/etc/testcases/taskdefs/subant.xml")
4401 buildRule.executeTarget("testnodirs")
4402 buildRule.getLog()
4403 buildRule.getProject()
4404 buildRule.getProject().resolveFile(".")
4405 buildRule.getProject()
4406 buildRule.getProject().resolveFile("subant/subant-test1")
4407 buildRule.getProject()
4408 buildRule.getProject().resolveFile("subant/subant-test2")
4409 testBaseDirs("testgenericantfile",newString[]{dir1.getAbsolutePath(),dir2.getAbsolutePath(),dir3.getAbsolutePath()})
4410 dir1.getAbsolutePath()
4411 dir2.getAbsolutePath()
4412 dir3.getAbsolutePath()
4413 buildRule.getProject()
4414 buildRule.getProject().resolveFile(".")
4415 buildRule.getProject()
4416 buildRule.getProject().resolveFile("subant/subant-test1")
4417 buildRule.getProject()
4418 buildRule.getProject().resolveFile("subant")
4419 testBaseDirs("testantfile",newString[]{dir1.getAbsolutePath(),dir2.getAbsolutePath(),dir3.getAbsolutePath()})
4420 dir1.getAbsolutePath()
4421 dir2.getAbsolutePath()
4422 dir3.getAbsolutePath()
4423 buildRule.executeTarget("multipleTargets")
4424 buildRule.getLog()
4425 containsString("test1-one")
4426 buildRule.getLog()
4427 containsString("test1-two")
4428 buildRule.getLog()
4429 containsString("test2-one")
4430 buildRule.getLog()
4431 containsString("test2-two")
4432 buildRule.executeTarget("multipleTargetsOneDoesntExist_FOEfalse")
4433 buildRule.getLog()
4434 containsString("Target \"three\" does not exist in the project \"subant\"")
4435 thrown.expect(BuildException.class)
4436 thrown.expectMessage("Target \"three\" does not exist in the project \"subant\"")
4437 buildRule.executeTarget("multipleTargetsOneDoesntExist_FOEtrue")
4438 buildRule.getProject()
4439 buildRule.getProject().addBuildListener(bc)
4440 buildRule.executeTarget(target)
4441 bc.getError()
4442 buildRule.getProject()
4443 buildRule.getProject().removeBuildListener(bc)
4444 event.getTarget()
4445 event.getTarget().getName()
4446 event.getTarget().getName().isEmpty()
4447 event.getProject()
4448 event.getProject().getBaseDir()
4449 event.getProject().getBaseDir().getAbsolutePath()
4450 buildRule.configureProject("src/etc/testcases/taskdefs/sync.xml")
4451 buildRule.executeTarget("simplecopy")
4452 buildRule.getProject()
4453 buildRule.getProject().getProperty("dest")
4454 buildRule.getFullLog()
4455 not(containsString("dangling"))
4456 containsString("dangling")
4457 buildRule.executeTarget("emptycopy")
4458 buildRule.getProject()
4459 buildRule.getProject().getProperty("dest")
4460 buildRule.getProject()
4461 buildRule.getProject().getProperty("dest")
4462 buildRule.getFullLog()
4463 not(containsString("dangling"))
4464 containsString("dangling")
4465 buildRule.executeTarget("emptydircopy")
4466 buildRule.getProject()
4467 buildRule.getProject().getProperty("dest")
4468 buildRule.getProject()
4469 buildRule.getProject().getProperty("dest")
4470 buildRule.getFullLog()
4471 not(containsString("dangling"))
4472 containsString("dangling")
4473 testCopyAndRemove("copyandremove")
4474 testCopyAndRemove("copyandremove-with-filelist")
4475 testCopyAndRemove("copyandremove-with-zipfileset")
4476 testCopyAndRemove("copyandremove")
4477 buildRule.executeTarget("copyandremove-emptypreserve")
4478 buildRule.getProject()
4479 buildRule.getProject().getProperty("dest")
4480 buildRule.getProject()
4481 buildRule.getProject().getProperty("dest")
4482 buildRule.getFullLog()
4483 containsString(("Removing orphan file:"))
4484 buildRule.getFullLog()
4485 containsString("Removed 1 dangling file from")
4486 buildRule.getFullLog()
4487 containsString("Removed 1 dangling directory from")
4488 buildRule.executeTarget("emptydircopyandremove")
4489 buildRule.getProject()
4490 buildRule.getProject().getProperty("dest")
4491 buildRule.getProject()
4492 buildRule.getProject().getProperty("dest")
4493 buildRule.getProject()
4494 buildRule.getProject().getProperty("dest")
4495 buildRule.getFullLog()
4496 containsString(("Removing orphan directory:"))
4497 buildRule.getFullLog()
4498 containsString("NO dangling file to remove from")
4499 buildRule.getFullLog()
4500 containsString("Removed 2 dangling directories from")
4501 buildRule.executeTarget("copynoremove")
4502 buildRule.getProject()
4503 buildRule.getProject().getProperty("dest")
4504 buildRule.getProject()
4505 buildRule.getProject().getProperty("dest")
4506 buildRule.getFullLog()
4507 not(containsString("Removing orphan file:"))
4508 containsString("Removing orphan file:")
4509 buildRule.executeTarget("copynoremove-selectors")
4510 buildRule.getProject()
4511 buildRule.getProject().getProperty("dest")
4512 buildRule.getProject()
4513 buildRule.getProject().getProperty("dest")
4514 buildRule.getFullLog()
4515 not(containsString("Removing orphan file:"))
4516 containsString("Removing orphan file:")
4517 buildRule.executeTarget("casesensitivity-test")
4518 buildRule.getProject()
4519 buildRule.getProject().getProperty("dest")
4520 FileUtils.isCaseSensitiveFileSystem(buildRule.getProject().resolveFile(destDir).toPath())
4521 buildRule.getProject()
4522 buildRule.getProject().resolveFile(destDir)
4523 buildRule.getProject().resolveFile(destDir).toPath()
4524 FileUtils.isCaseSensitiveFileSystem(buildRule.getProject().resolveFile(destDir).toPath()).orElse(true)
4525 buildRule.getProject()
4526 buildRule.getProject().resolveFile(f)
4527 buildRule.getProject().resolveFile(f).exists()
4528 buildRule.getProject()
4529 buildRule.getProject().resolveFile(f)
4530 buildRule.getProject().resolveFile(f).exists()
4531 buildRule.configureProject("src/etc/testcases/taskdefs/tar.xml")
4532 buildRule.executeTarget("setUp")
4533 buildRule.executeTarget("test1")
4534 buildRule.executeTarget("test2")
4535 buildRule.executeTarget("test3")
4536 buildRule.executeTarget("test4")
4537 buildRule.executeTarget("test5")
4538 buildRule.getProject()
4539 buildRule.getProject().getProperty("output")
4540 f.exists()
4541 buildRule.executeTarget("test6")
4542 test7("test7")
4543 test7("test7UsingPlainFileSet")
4544 test7("test7UsingFileList")
4545 test7("test7")
4546 test8("test8")
4547 test8("test8UsingZipFileset")
4548 test8("test8UsingZipFilesetSrc")
4549 test8("test8UsingTarFilesetSrc")
4550 test8("test8UsingZipEntry")
4551 test8("test8")
4552 buildRule.executeTarget("test9")
4553 buildRule.executeTarget("test10")
4554 buildRule.getProject()
4555 buildRule.getProject().getProperty("output")
4556 f1.exists()
4557 buildRule.executeTarget("test11")
4558 buildRule.getProject()
4559 buildRule.getProject().getProperty("output")
4560 f1.exists()
4561 buildRule.executeTarget("testGZipResource")
4562 FileUtilities.getFileContents(buildRule.getProject().resolveFile("../asf-logo.gif"))
4563 buildRule.getProject()
4564 buildRule.getProject().resolveFile("../asf-logo.gif")
4565 FileUtilities.getFileContents(newFile(buildRule.getProject().getProperty("output"),"untar/asf-logo.gif.gz"))
4566 buildRule.getProject()
4567 buildRule.getProject().getProperty("output")
4568 buildRule.executeTarget("testTarFilesetWithReference")
4569 buildRule.configureProject("src/etc/testcases/taskdefs/taskdef.xml")
4570 buildRule.executeTarget("test1")
4571 buildRule.executeTarget("test2")
4572 buildRule.executeTarget("test3")
4573 buildRule.executeTarget("test4")
4574 buildRule.executeTarget("test5")
4575 buildRule.executeTarget("test5a")
4576 buildRule.executeTarget("test6")
4577 buildRule.getLog()
4578 buildRule.executeTarget("test7")
4579 buildRule.getLog()
4580 buildRule.executeTarget("testGlobal")
4581 buildRule.getLog()
4582 buildRule.executeTarget("testOverride")
4583 buildRule.getLog()
4584 containsString("Trying to override old definition of task copy")
4585 containsString("In target")
4586 containsString("In TaskContainer")
4587 buildRule.configureProject("src/etc/testcases/taskdefs/touch.xml")
4588 buildRule.executeTarget("cleanup")
4589 buildRule.getProject()
4590 buildRule.getProject().getBaseDir()
4591 file.exists()
4592 file.lastModified()
4593 buildRule.executeTarget("noSeconds")
4594 getTargetTime()
4595 buildRule.executeTarget("seconds")
4596 getTargetTime()
4597 touchFile("testMillis",662256000000L)
4598 System.currentTimeMillis()
4599 buildRule.executeTarget("testNow")
4600 getTargetTime()
4601 touchFile("test2000",946080000000L)
4602 touchFile("testFilelist",662256000000L)
4603 touchFile("testFileset",946080000000L)
4604 touchFile("testResourceCollection",1662256000000L)
4605 buildRule.executeTarget("testMappedFileset")
4606 buildRule.executeTarget("testExplicitMappedFileset")
4607 buildRule.executeTarget("testMappedFilelist")
4608 buildRule.executeTarget("testGoodPattern")
4609 thrown.expect(BuildException.class)
4610 thrown.expectMessage("Unparseable")
4611 buildRule.executeTarget("testBadPattern")
4612 buildRule.executeTarget(targetName)
4613 getTargetTime()
4614 FILE_UTILS.getFileTimestampGranularity()
4615 FILE_UTILS.getFileTimestampGranularity()
4616 tstamp.setLocation(location)
4617 tstamp.setProject(project)
4618 tstamp.createFormat()
4619 format.setProperty("today")
4620 format.setPattern("HH:mm:ss z")
4621 format.setTimezone("GMT")
4622 Calendar.getInstance()
4623 Calendar.getInstance().getTime()
4624 format.execute(project,date,location)
4625 project.getProperty("today")
4626 sdf.setTimeZone(TimeZone.getTimeZone("GMT"))
4627 TimeZone.getTimeZone("GMT")
4628 sdf.format(date)
4629 tstamp.createFormat()
4630 format.setProperty("TODAY")
4631 format.setPattern("HH:mm:ss z")
4632 format.setTimezone("GMT")
4633 Calendar.getInstance()
4634 Calendar.getInstance().getTime()
4635 format.execute(project,date,location)
4636 project.getProperty("TODAY")
4637 sdf.setTimeZone(TimeZone.getTimeZone("GMT"))
4638 TimeZone.getTimeZone("GMT")
4639 sdf.format(date)
4640 tstamp.setPrefix("prefix")
4641 tstamp.execute()
4642 project.getProperty("prefix.DSTAMP")
4643 tstamp.createFormat()
4644 format.setProperty("format")
4645 format.setPattern("HH:mm:ss z")
4646 format.setTimezone("GMT")
4647 tstamp.setPrefix("prefix")
4648 tstamp.execute()
4649 project.getProperty("prefix.format")
4650 buildRule.configureProject("src/etc/testcases/taskdefs/typeadapter.xml")
4651 buildRule.executeTarget("taskadapter")
4652 buildRule.getLog()
4653 containsString("MyExec called")
4654 buildRule.executeTarget("runadapter")
4655 buildRule.getLog()
4656 containsString("MyRunnable called")
4657 thrown.expect(BuildException.class)
4658 thrown.expectMessage("No public run() method in")
4659 buildRule.executeTarget("runadaptererror")
4660 buildRule.executeTarget("delay")
4661 buildRule.getLog()
4662 containsString("MyTask called")
4663 buildRule.executeTarget("onerror.report")
4664 buildRule.getLog()
4665 containsString("MyTaskNotPresent cannot be found")
4666 buildRule.executeTarget("onerror.ignore")
4667 buildRule.getLog()
4668 log("MyTask called")
4669 log("MyTask called")
4670 project.log("MyRunnable called")
4671 proxyClass.getMethod(execMethodName)
4672 Void.TYPE.equals(execMethod.getReturnType())
4673 execMethod.getReturnType()
4674 execMethod.getReturnType()
4675 log(message,Project.MSG_WARN)
4676 log(message,Project.MSG_ERR)
4677 getExecuteMethod(proxyClass)
4678 getExecuteMethod(o.getClass())
4679 o.getClass()
4680 log("MyTask called")
4681 buildRule.configureProject("src/etc/testcases/taskdefs/typedef.xml")
4682 buildRule.executeTarget("empty")
4683 thrown.expect(BuildException.class)
4684 thrown.expectMessage("Only antlib URIs can be located from the URI alone, not the URI ''")
4685 buildRule.executeTarget("noName")
4686 buildRule.executeTarget("noClassname")
4687 buildRule.executeTarget("classNotFound")
4688 buildRule.executeTarget("testGlobal")
4689 buildRule.getLog()
4690 buildRule.getProject()
4691 buildRule.getProject().getReferences()
4692 buildRule.getProject().getReferences().get("global")
4693 ref.getClass()
4694 ref.getClass().getName()
4695 buildRule.executeTarget("testLocal")
4696 buildRule.getLog()
4697 buildRule.getProject()
4698 buildRule.getProject().getReferences()
4699 buildRule.getProject().getReferences().get("local")
4700 ref.getClass()
4701 ref.getClass().getName()
4702 buildRule.executeTarget("double-notpresent")
4703 buildRule.getLog()
4704 containsString("hi")
4705 thrown.expect(BuildException.class)
4706 thrown.expectMessage("Could not load definitions from resource ")
4707 buildRule.executeTarget("noresourcefailall")
4708 buildRule.executeTarget("noresourcefail")
4709 buildRule.getLog()
4710 containsString("Could not load definitions from resource ")
4711 buildRule.executeTarget("noresourcenotfail")
4712 buildRule.getLog()
4713 containsString("Could not load definitions from resource ")
4714 buildRule.configureProject("src/etc/testcases/taskdefs/untar.xml")
4715 testLogoExtraction("realTest")
4716 testLogoExtraction("realGzipTest")
4717 testLogoExtraction("realBzip2Test")
4718 testLogoExtraction("testTarTask")
4719 testLogoExtraction("testGzipTarTask")
4720 testLogoExtraction("testBzip2TarTask")
4721 buildRule.executeTarget("srcDirTest")
4722 buildRule.executeTarget("encodingTest")
4723 buildRule.getProject()
4724 buildRule.getProject().getProperty("output")
4725 buildRule.getProject()
4726 buildRule.getProject().resolveFile(filename)
4727 buildRule.getProject().resolveFile(filename).exists()
4728 testLogoExtraction("resourceCollection")
4729 buildRule.executeTarget(target)
4730 FileUtilities.getFileContents(buildRule.getProject().resolveFile("../asf-logo.gif"))
4731 buildRule.getProject()
4732 buildRule.getProject().resolveFile("../asf-logo.gif")
4733 FileUtilities.getFileContents(newFile(buildRule.getProject().getProperty("output"),"untar/asf-logo.gif"))
4734 buildRule.getProject()
4735 buildRule.getProject().getProperty("output")
4736 buildRule.executeTarget("testDocumentationClaimsOnCopy")
4737 buildRule.getProject()
4738 buildRule.getProject().getProperty("output")
4739 newFile(buildRule.getProject().getProperty("output"),"untar/1/foo").exists()
4740 buildRule.getProject()
4741 buildRule.getProject().getProperty("output")
4742 newFile(buildRule.getProject().getProperty("output"),"untar/2/bar").exists()
4743 buildRule.configureProject("src/etc/testcases/taskdefs/unzip.xml")
4744 buildRule.executeTarget("test1")
4745 buildRule.executeTarget("test2")
4746 buildRule.executeTarget("test3")
4747 buildRule.executeTarget("realTest")
4748 FileUtilities.getFileContents(buildRule.getProject().resolveFile("../asf-logo.gif"))
4749 buildRule.getProject()
4750 buildRule.getProject().resolveFile("../asf-logo.gif")
4751 FileUtilities.getFileContents(newFile(buildRule.getProject().getProperty("output"),"asf-logo.gif"))
4752 buildRule.getProject()
4753 buildRule.getProject().getProperty("output")
4754 buildRule.executeTarget("testZipTask")
4755 buildRule.executeTarget("testUncompressedZipTask")
4756 buildRule.executeTarget("testPatternSetExcludeOnly")
4757 buildRule.getProject()
4758 buildRule.getProject().getProperty("output")
4759 buildRule.executeTarget("testPatternSetIncludeOnly")
4760 buildRule.getProject()
4761 buildRule.getProject().getProperty("output")
4762 buildRule.executeTarget("testPatternSetIncludeAndExclude")
4763 buildRule.getProject()
4764 buildRule.getProject().getProperty("output")
4765 buildRule.executeTarget("testTwoPatternSets")
4766 buildRule.getProject()
4767 buildRule.getProject().getProperty("output")
4768 buildRule.executeTarget("testTwoPatternSetsWithExcludes")
4769 buildRule.getProject()
4770 buildRule.getProject().getProperty("output")
4771 buildRule.executeTarget("selfExtractingArchive")
4772 buildRule.executeTarget("testPatternSetSlashOnly")
4773 buildRule.getProject()
4774 buildRule.getProject().getProperty("output")
4775 buildRule.executeTarget("encodingTest")
4776 buildRule.getProject()
4777 buildRule.getProject().getProperty("output")
4778 buildRule.executeTarget("testFlattenMapper")
4779 buildRule.getProject()
4780 buildRule.getProject().getProperty("output")
4781 buildRule.getProject()
4782 buildRule.getProject().resolveFile(filename)
4783 buildRule.getProject().resolveFile(filename).exists()
4784 buildRule.getProject()
4785 buildRule.getProject().resolveFile(filename)
4786 buildRule.getProject().resolveFile(filename).exists()
4787 buildRule.executeTarget("testGlobMapper")
4788 buildRule.getProject()
4789 buildRule.getProject().getProperty("output")
4790 buildRule.executeTarget("testTwoMappers")
4791 buildRule.executeTarget("testResourceCollection")
4792 buildRule.getProject()
4793 buildRule.getProject().getProperty("output")
4794 buildRule.executeTarget("testDocumentationClaimsOnCopy")
4795 buildRule.getProject()
4796 buildRule.getProject().getProperty("output")
4797 buildRule.configureProject("src/etc/testcases/taskdefs/uptodate.xml")
4798 buildRule.executeTarget("setUp")
4799 buildRule.getProject()
4800 buildRule.getProject().resolveFile("source")
4801 assumeTrue("Could not change modification timestamp of source directory",srcDir.setLastModified(srcDir.lastModified()-3*FileUtils.getFileUtils().getFileTimestampGranularity()))
4802 srcDir.setLastModified(srcDir.lastModified()-3*FileUtils.getFileUtils().getFileTimestampGranularity())
4803 srcDir.lastModified()
4804 FileUtils.getFileUtils()
4805 FileUtils.getFileUtils().getFileTimestampGranularity()
4806 buildRule.executeTarget("tearDown")
4807 buildRule.executeTarget("testFilesetUpToDate")
4808 buildRule.getProject()
4809 buildRule.getProject().getProperty("foo")
4810 buildRule.executeTarget("testFilesetOutOfDate")
4811 buildRule.getProject()
4812 buildRule.getProject().getProperty("foo")
4813 buildRule.executeTarget("testRCUpToDate")
4814 buildRule.getProject()
4815 buildRule.getProject().getProperty("foo")
4816 buildRule.executeTarget("testRCOutOfDate")
4817 buildRule.getProject()
4818 buildRule.getProject().getProperty("foo")
4819 buildRule.configureProject("src/etc/testcases/taskdefs/war.xml")
4820 buildRule.executeTarget("testlibrefs")
4821 buildRule.getOutputDir()
4822 f.exists()
4823 buildRule.configureProject("src/etc/testcases/taskdefs/whichresource.xml")
4824 buildRule.executeTarget("testClassname")
4825 buildRule.getProject()
4826 buildRule.getProject().getProperty("antmain")
4827 buildRule.executeTarget("testResourcename")
4828 buildRule.getProject()
4829 buildRule.getProject().getProperty("defaults")
4830 buildRule.executeTarget("testResourcenameWithLeadingSlash")
4831 buildRule.getProject()
4832 buildRule.getProject().getProperty("defaults")
4833 buildRule.configureProject("src/etc/testcases/taskdefs/xmlns.xml")
4834 buildRule.executeTarget("xmlns")
4835 buildRule.getLog()
4836 buildRule.executeTarget("xmlns.file")
4837 buildRule.getLog()
4838 buildRule.executeTarget("core")
4839 buildRule.getLog()
4840 thrown.expect(BuildException.class)
4841 thrown.expectMessage("Attempt to use a reserved URI ant:notallowed")
4842 buildRule.executeTarget("excluded")
4843 buildRule.executeTarget("other")
4844 buildRule.getLog()
4845 buildRule.executeTarget("ns.attributes")
4846 buildRule.getLog()
4847 log("MyTask called")
4848 buildRule.configureProject("src/etc/testcases/taskdefs/xmlproperty.xml")
4849 testProperties("test")
4850 testProperties("testResource")
4851 buildRule.executeTarget(target)
4852 buildRule.getProject()
4853 buildRule.getProject().getProperty("root-tag(myattr)")
4854 buildRule.getProject()
4855 buildRule.getProject().getProperty("root-tag.inner-tag")
4856 buildRule.getProject()
4857 buildRule.getProject().getProperty("root-tag.inner-tag(someattr)")
4858 buildRule.getProject()
4859 buildRule.getProject().getProperty("root-tag.a2.a3.a4")
4860 buildRule.getProject()
4861 buildRule.getProject().getProperty("root-tag.cdatatag")
4862 buildRule.executeTarget("testdtd")
4863 buildRule.getProject()
4864 buildRule.getProject().getProperty("root-tag.inner-tag")
4865 doTest("testNone",false,false,false,false,false)
4866 doTest("testKeeproot",true,false,false,false,false)
4867 doTest("testCollapse",false,true,false,false,false)
4868 doTest("testSemantic",false,false,true,false,false)
4869 doTest("testKeeprootCollapse",true,true,false,false,false)
4870 doTest("testKeeprootSemantic",true,false,true,false,false)
4871 doTest("testCollapseSemantic",false,true,true,false,false)
4872 doTest("testKeeprootCollapseSemantic",true,true,true,false,false)
4873 doTest("testInclude",false,false,false,true,false)
4874 doTest("testSemanticInclude",false,false,true,true,false)
4875 doTest("testSemanticInclude",false,false,true,false,true)
4876 buildRule.executeTarget("testneedscat")
4877 buildRule.getProject()
4878 buildRule.getProject().getProperty("skinconfig.foo")
4879 getFiles(buildRule.getProject().resolveFile("xmlproperty/inputs"))
4880 buildRule.getProject()
4881 buildRule.getProject().resolveFile("xmlproperty/inputs")
4882 inputFile.getParentFile()
4883 FILE_UTILS.resolveFile(newFile("."),".")
4884 getGoldfile(inputFile,keepRoot,collapse,semantic,include,localRoot)
4885 propertyFile.exists()
4886 xmlproperty.setProject(p)
4887 xmlproperty.setFile(inputFile)
4888 xmlproperty.setKeeproot(keepRoot)
4889 xmlproperty.setCollapseAttributes(collapse)
4890 xmlproperty.setSemanticAttributes(semantic)
4891 xmlproperty.setIncludeSemanticAttribute(include)
4892 xmlproperty.setRootDirectory(workingDir)
4893 p.setNewProperty("override.property.test","foo")
4894 xmlproperty.execute()
4895 props.load(newFileInputStream(propertyFile))
4896 ensureProperties(msg,inputFile,workingDir,p,props)
4897 ensureReferences(msg,inputFile,p.getReferences())
4898 p.getReferences()
4899 p.getProperties()
4900 properties.stringPropertyNames()
4901 inputFile.getName()
4902 properties.getProperty(currentKey)
4903 xmlproperties.get(currentKey)
4904 propertyValue.startsWith("ID.")
4905 p.getReferences()
4906 p.getReferences().get(currentKey)
4907 propertyValue.substring(3)
4908 propertyValue.equals("path")
4909 obj.getClass()
4910 obj.getClass().getName()
4911 instanceOf(Path.class)
4912 obj.toString()
4913 propertyValue.startsWith("FILE.")
4914 propertyValue.substring(5)
4915 f.getAbsolutePath()
4916 xmlproperties.forEach((key,value)->System.out.println(key+" = "+value))
4917 System.out.println(key+" = "+value)
4918 inputFile.getName()
4919 key.startsWith("ant.")
4920 input.getName()
4921 input.getName().toLowerCase()
4922 baseName.endsWith(".xml")
4923 baseName.substring(0,baseName.length()-4)
4924 baseName.length()
4925 input.getParentFile()
4926 input.getParentFile().getParentFile()
4927 getFiles(startingDir,result)
4928 getFiles(startingDir,result)
4929 testExtraField(newZip(),true)
4930 testExtraField(newJar(),false)
4931 testInstance.add(newResourceCollection(){publicbooleanisFilesystemOnly(){returnfalse;}publicintsize(){return1;}publicIterator<Resource>iterator(){returnCollections.<Resource>singleton(r).iterator();}})
4932 Collections.<Resource>singleton(r).iterator()
4933 testInstance.execute()
4934 zf.getEntry("x")
4935 ze.getExtraFields()
4936 ze.getExtraFields()
4937 instanceOf(JarMarker.class)
4938 ze.getExtraFields()
4939 instanceOf(Zip64ExtendedInformationExtraField.class)
4940 ZipFile.closeQuietly(zf)
4941 f.exists()
4942 f.delete()
4943 Collections.<Resource>singleton(r).iterator()
4944 testInstance.execute()
4945 zf.getEntry("x")
4946 ze.getExtraFields()
4947 ze.getExtraFields()
4948 instanceOf(JarMarker.class)
4949 ze.getExtraFields()
4950 instanceOf(Zip64ExtendedInformationExtraField.class)
4951 ZipFile.closeQuietly(zf)
4952 f.exists()
4953 f.delete()
4954 buildRule.configureProject("src/etc/testcases/taskdefs/zip.xml")
4955 buildRule.executeTarget("setUp")
4956 buildRule.executeTarget("test1")
4957 buildRule.executeTarget("test2")
4958 buildRule.executeTarget("test3")
4959 buildRule.executeTarget("test4")
4960 zfPrefixAddsDir.close()
4961 buildRule.executeTarget("test5")
4962 buildRule.executeTarget("test6")
4963 buildRule.executeTarget("test7")
4964 buildRule.executeTarget("test8")
4965 buildRule.executeTarget("testZipgroupfileset")
4966 buildRule.getProject()
4967 buildRule.getProject().getProperty("output")
4968 zipFile.getEntry("ant.xml")
4969 zipFile.getEntry("optional/jspc.xml")
4970 zipFile.getEntry("zip/zipgroupfileset3.zip")
4971 zipFile.getEntry("test6.mf")
4972 zipFile.getEntry("test7.mf")
4973 zipFile.close()
4974 buildRule.executeTarget("testUpdateNotNecessary")
4975 buildRule.getLog()
4976 not(containsString("Updating"))
4977 containsString("Updating")
4978 buildRule.executeTarget("testUpdateIsNecessary")
4979 buildRule.getLog()
4980 containsString("Updating")
4981 buildRule.executeTarget("testPrefixAddsDir")
4982 buildRule.getProject()
4983 buildRule.getProject().getProperty("output")
4984 zfPrefixAddsDir.getEntry("test/")
4985 buildRule.executeTarget("testFilesOnlyDoesntCauseRecreateSetup")
4986 buildRule.getOutputDir()
4987 assumeTrue("Could not change file modification time",testFile.setLastModified(testFile.lastModified()-(FileUtils.getFileUtils().getFileTimestampGranularity()*5)))
4988 testFile.setLastModified(testFile.lastModified()-(FileUtils.getFileUtils().getFileTimestampGranularity()*5))
4989 testFile.lastModified()
4990 FileUtils.getFileUtils()
4991 FileUtils.getFileUtils().getFileTimestampGranularity()
4992 testFile.lastModified()
4993 buildRule.executeTarget("testFilesOnlyDoesntCauseRecreate")
4994 testFile.lastModified()
4995 buildRule.executeTarget("testEmptySkip")
4996 buildRule.executeTarget("zipEmptyDir")
4997 buildRule.executeTarget("zipEmptyDirFilesOnly")
4998 buildRule.executeTarget("zipEmptyCreate")
4999 buildRule.getLog()
5000 containsString("Note: creating empty")
5001 buildRule.executeTarget("testCompressionLevel")
5002 buildRule.executeTarget("testDefaultExcludesAndUpdate")
5003 buildRule.getProject()
5004 buildRule.getProject().getProperty("output")
5005 f.getEntry("ziptest~")
5006 buildRule.executeTarget("testFileResource")
5007 buildRule.executeTarget("testNonFileResource")
5008 buildRule.executeTarget("testTarFileSet")
5009 buildRule.getProject()
5010 buildRule.getProject().getProperty("output")
5011 zf.getEntry("asf-logo.gif")
5012 ze.getUnixMode()
5013 buildRule.executeTarget("rewriteZeroPermissions")
5014 buildRule.getProject()
5015 buildRule.getProject().getProperty("output")
5016 zf.getEntry("testdir/test.txt")
5017 ze.getUnixMode()
5018 buildRule.executeTarget("acceptZeroPermissions")
5019 buildRule.getProject()
5020 buildRule.getProject().getProperty("output")
5021 zf.getEntry("testdir/test.txt")
5022 ze.getUnixMode()
5023 buildRule.executeTarget("testForBugzilla34764")
5024 buildRule.getProject()
5025 buildRule.getProject().getProperty("output")
5026 zf.getEntry("file1")
5027 ze.getUnixMode()
5028 buildRule.executeTarget("testRegexpMapper1")
5029 buildRule.getOutputDir()
5030 testFile.lastModified()
5031 buildRule.executeTarget("testRegexpMapper2")
5032 testFile.lastModified()
5033 sb.append(msg)
5034 sb.toString()
5035 super.setupModernJavacCommandlineSwitches(cmd)
5036 super.setupModernJavacCommandlineSwitches(cmd)
5037 testSource(null,"javac1.3","",null,"1.1")
5038 testSource(null,"javac1.3","",null,"1.2")
5039 testSource(null,"javac1.3","",null,"1.3")
5040 testSource(null,"javac1.3","",null,"1.4")
5041 testSource("1.3","javac1.4","",null,"1.1")
5042 testSource("1.3","javac1.5","",null,"1.1")
5043 testSource("1.3","javac1.6","",null,"1.1")
5044 testSource("1.3","javac1.7","",null,"1.1")
5045 testSource("1.3","javac1.8","",null,"1.1")
5046 testSource("1.3","javac1.4","",null,"1.2")
5047 testSource("1.3","javac1.5","",null,"1.2")
5048 testSource("1.3","javac1.6","",null,"1.2")
5049 testSource("1.3","javac1.7","",null,"1.2")
5050 testSource("1.3","javac1.8","",null,"1.2")
5051 commonSourceDowngrades("javac1.5")
5052 testSource(null,"javac1.5","","1.5")
5053 testSource(null,"javac1.5","","5")
5054 commonSourceDowngrades("javac1.6")
5055 testSource(null,"javac1.6","","1.5")
5056 testSource(null,"javac1.6","","5")
5057 testSource(null,"javac1.6","","1.6")
5058 testSource(null,"javac1.6","","6")
5059 commonSourceDowngrades("javac1.7")
5060 testSource("1.5","javac1.7","If you specify -target 1.5 you now must also specify"+" -source 1.5","1.5")
5061 testSource("1.6","javac1.7","If you specify -target 1.6 you now must also specify"+" -source 1.6","1.6")
5062 testSource("5","javac1.7","If you specify -target 5 you now must also specify"+" -source 5","5")
5063 testSource("6","javac1.7","If you specify -target 6 you now must also specify"+" -source 6","6")
5064 testSource(null,"javac1.7","","1.7")
5065 testSource(null,"javac1.7","","7")
5066 commonSourceDowngrades("javac1.8")
5067 testSource("1.5","javac1.8","If you specify -target 1.5 you now must also specify"+" -source 1.5","1.5")
5068 testSource("1.6","javac1.8","If you specify -target 1.6 you now must also specify"+" -source 1.6","1.6")
5069 testSource("1.7","javac1.8","If you specify -target 1.7 you now must also specify"+" -source 1.7","1.7")
5070 testSource("5","javac1.8","If you specify -target 5 you now must also specify"+" -source 5","5")
5071 testSource("6","javac1.8","If you specify -target 6 you now must also specify"+" -source 6","6")
5072 testSource("7","javac1.8","If you specify -target 7 you now must also specify"+" -source 7","7")
5073 testSource(null,"javac1.8","","1.8")
5074 testSource(null,"javac1.8","","8")
5075 commonSourceDowngrades("javac1.9")
5076 testSource("1.5","javac1.9","If you specify -target 1.5 you now must also specify"+" -source 1.5","1.5")
5077 testSource("1.6","javac1.9","If you specify -target 1.6 you now must also specify"+" -source 1.6","1.6")
5078 testSource("1.7","javac1.9","If you specify -target 1.7 you now must also specify"+" -source 1.7","1.7")
5079 testSource("1.8","javac1.9","If you specify -target 1.8 you now must also specify"+" -source 1.8","1.8")
5080 testSource("5","javac1.9","If you specify -target 5 you now must also specify"+" -source 5","5")
5081 testSource("6","javac1.9","If you specify -target 6 you now must also specify"+" -source 6","6")
5082 testSource("7","javac1.9","If you specify -target 7 you now must also specify"+" -source 7","7")
5083 testSource("8","javac1.9","If you specify -target 8 you now must also specify"+" -source 8","8")
5084 testSource(null,"javac1.9","","1.9")
5085 testSource(null,"javac1.9","","9")
5086 commonSourceDowngrades("javac9")
5087 testSource("1.5","javac9","If you specify -target 1.5 you now must also specify"+" -source 1.5","1.5")
5088 testSource("1.6","javac1.9","If you specify -target 1.6 you now must also specify"+" -source 1.6","1.6")
5089 testSource("1.7","javac9","If you specify -target 1.7 you now must also specify"+" -source 1.7","1.7")
5090 testSource("1.8","javac9","If you specify -target 1.8 you now must also specify"+" -source 1.8","1.8")
5091 testSource("5","javac9","If you specify -target 5 you now must also specify"+" -source 5","5")
5092 testSource("6","javac9","If you specify -target 6 you now must also specify"+" -source 6","6")
5093 testSource("7","javac9","If you specify -target 7 you now must also specify"+" -source 7","7")
5094 testSource("8","javac9","If you specify -target 8 you now must also specify"+" -source 8","8")
5095 testSource(null,"javac9","","1.9")
5096 testSource(null,"javac9","","9")
5097 setupModernJavacCommand()
5098 srcPath.setLocation(src)
5099 javac.setSrcdir(srcPath)
5100 javac.createModulepath()
5101 javac.createModulepath().setLocation(modules)
5102 javac.setSource("9")
5103 javac.setTarget("9")
5104 javac.setIncludeantruntime(false)
5105 javac.add(impl)
5106 javac.execute()
5107 Arrays.asList(cmd[0].getCommandline())
5108 cmd[0].getCommandline()
5109 not(hasItem("--module-source-path"))
5110 hasItem("--module-source-path")
5111 cmdLine.indexOf("-sourcepath")
5112 cmdLine.size()
5113 src.getAbsolutePath()
5114 cmdLine.get(index+1)
5115 cmdLine.indexOf("--module-path")
5116 cmdLine.size()
5117 modules.getAbsolutePath()
5118 cmdLine.get(index+1)
5119 Collections.addAll(expected,java1.getAbsolutePath(),java2.getAbsolutePath())
5120 java1.getAbsolutePath()
5121 java2.getAbsolutePath()
5122 cmdLine.subList(cmdLine.size()-2,cmdLine.size())
5123 cmdLine.size()
5124 cmdLine.size()
5125 delete(workDir)
5126 setupModernJavacCommand()
5127 moduleSourcePath.setPath(moduleSrcPathStr)
5128 javac.setModulesourcepath(moduleSourcePath)
5129 javac.createModulepath()
5130 javac.createModulepath().setLocation(modules)
5131 javac.setSource("9")
5132 javac.setTarget("9")
5133 javac.setDestdir(build)
5134 javac.setIncludeantruntime(false)
5135 javac.add(impl)
5136 javac.execute()
5137 Arrays.asList(cmd[0].getCommandline())
5138 cmd[0].getCommandline()
5139 not(hasItem("-sourcepath"))
5140 hasItem("-sourcepath")
5141 cmdLine.indexOf("--module-source-path")
5142 cmdLine.size()
5143 String.format("%s/%s",workDir.getAbsolutePath(),moduleSrcPathStr)
5144 workDir.getAbsolutePath()
5145 String.format("%s/%s",workDir.getAbsolutePath(),moduleSrcPathStr).replace('/',File.separatorChar)
5146 String.format("%s/%s",workDir.getAbsolutePath(),moduleSrcPathStr).replace('/',File.separatorChar).replace('\\',File.separatorChar)
5147 cmdLine.get(index+1)
5148 cmdLine.indexOf("--module-path")
5149 cmdLine.size()
5150 modules.getAbsolutePath()
5151 cmdLine.get(index+1)
5152 Collections.addAll(expectedFiles,java1.getAbsolutePath(),java2.getAbsolutePath(),java3.getAbsolutePath())
5153 java1.getAbsolutePath()
5154 java2.getAbsolutePath()
5155 java3.getAbsolutePath()
5156 cmdLine.subList(cmdLine.size()-3,cmdLine.size())
5157 cmdLine.size()
5158 cmdLine.size()
5159 delete(workDir)
5160 setupModernJavacCommand()
5161 moduleSourcePath.setPath(moduleSrcPathStr)
5162 javac.setModulesourcepath(moduleSourcePath)
5163 javac.setSource("9")
5164 javac.setTarget("9")
5165 javac.setDestdir(build)
5166 javac.setIncludeantruntime(false)
5167 javac.createExclude()
5168 javac.createExclude().setName("org/**/invisible/**")
5169 javac.add(impl)
5170 javac.execute()
5171 Collections.addAll(expectedFiles,java1.getAbsolutePath(),java2.getAbsolutePath())
5172 java1.getAbsolutePath()
5173 java2.getAbsolutePath()
5174 Arrays.stream(compileList)
5175 Arrays.stream(compileList).map(File::getAbsolutePath)
5176 Arrays.stream(compileList).map(File::getAbsolutePath).collect(Collectors.toCollection(TreeSet::new))
5177 Collectors.toCollection(TreeSet::new)
5178 delete(workDir)
5179 javac.setProject(p)
5180 javac.setCompiler("javac8")
5181 javac.setSource("6")
5182 javac.setTarget("6")
5183 javac.setRelease("6")
5184 javac.setSourcepath(newPath(p))
5185 sth.setJavac(javac)
5186 sth.setupModernJavacCommandlineSwitches(cmd)
5187 javac.getLog()
5188 containsString("Support for javac --release has been added in Java9 ignoring it")
5189 cmd.getCommandline()
5190 javac.setProject(p)
5191 javac.setCompiler("javac9")
5192 javac.setSource("6")
5193 javac.setTarget("6")
5194 javac.setRelease("6")
5195 javac.setSourcepath(newPath(p))
5196 sth.setJavac(javac)
5197 sth.setupModernJavacCommandlineSwitches(cmd)
5198 javac.getLog()
5199 containsString("Ignoring source, target and bootclasspath as release has been set")
5200 cmd.getCommandline()
5201 testSource("1.3",javaVersion,"If you specify -target 1.1 you now must also specify"+" -source 1.3","1.1")
5202 testSource("1.3",javaVersion,"If you specify -target 1.2 you now must also specify"+" -source 1.3","1.2")
5203 testSource("1.3",javaVersion,"If you specify -target 1.3 you now must also specify"+" -source 1.3","1.3")
5204 testSource("1.4",javaVersion,"If you specify -target 1.4 you now must also specify"+" -source 1.4","1.4")
5205 testSource(expectedSource,javaVersion,expectedLog,configuredTarget,null)
5206 testSource(expectedSource,javaVersion,expectedLog,configuredTarget,null)
5207 System.getProperty("java.io.tmpdir")
5208 String.format("%s%s%d",getClass().getName(),testName,System.currentTimeMillis()/1000)
5209 getClass()
5210 getClass().getName()
5211 System.currentTimeMillis()
5212 destDir.mkdirs()
5213 relativePath.replace('/',File.separatorChar)
5214 relativePath.replace('/',File.separatorChar).replace('\\',File.separatorChar)
5215 FileUtils.getFileUtils()
5216 FileUtils.getFileUtils().createNewFile(file,true)
5217 f.isDirectory()
5218 f.listFiles()
5219 Arrays.stream(clds)
5220 Arrays.stream(clds).forEach(this::delete)
5221 f.delete()
5222 buildRule.configureProject("src/etc/testcases/taskdefs/conditions/antversion.xml")
5223 buildRule.executeTarget("testatleast")
5224 buildRule.executeTarget("testexactly")
5225 con.setString("abc")
5226 con.setSubstring("A")
5227 con.eval()
5228 con.setCasesensitive(false)
5229 con.eval()
5230 eq.setArg1("a")
5231 eq.setArg2(" a")
5232 eq.eval()
5233 eq.setTrim(true)
5234 eq.eval()
5235 eq.setArg2("a\t")
5236 eq.eval()
5237 eq.setArg1("a")
5238 eq.setArg2("A")
5239 eq.eval()
5240 eq.setCasesensitive(false)
5241 eq.eval()
5242 buildRule.configureProject("src/etc/testcases/taskdefs/conditions/http.xml")
5243 buildRule.executeTarget("basic-no-method")
5244 buildRule.getProject()
5245 buildRule.getProject().getProperty("basic-no-method")
5246 buildRule.getProject()
5247 buildRule.getProject().getProperty("basic-no-method-bad-url")
5248 buildRule.executeTarget("test-head-request")
5249 buildRule.getProject()
5250 buildRule.getProject().getProperty("test-head-request")
5251 buildRule.getProject()
5252 buildRule.getProject().getProperty("test-head-request-bad-url")
5253 buildRule.executeTarget("test-get-request")
5254 buildRule.getProject()
5255 buildRule.getProject().getProperty("test-get-request")
5256 buildRule.getProject()
5257 buildRule.getProject().getProperty("test-get-request-bad-url")
5258 buildRule.executeTarget("bad-request-method")
5259 buildRule.configureProject("src/etc/testcases/taskdefs/conditions/isfailure.xml")
5260 buildRule.executeTarget("testisfailure")
5261 buildRule.configureProject("src/etc/testcases/taskdefs/conditions/isfileselected.xml")
5262 buildRule.executeTarget("simple")
5263 buildRule.executeTarget("name")
5264 buildRule.executeTarget("basedir")
5265 buildRule.executeTarget("type")
5266 thrown.expect(BuildException.class)
5267 thrown.expectMessage("fileset doesn't support the nested \"isfileselected\"")
5268 buildRule.executeTarget("not.selector")
5269 buildRule.configureProject("src/etc/testcases/taskdefs/conditions/isreachable.xml")
5270 buildRule.executeTarget("testLocalhost")
5271 buildRule.executeTarget("testLocalhostURL")
5272 buildRule.executeTarget("testIpv4localhost")
5273 buildRule.executeTarget("testFTPURL")
5274 thrown.expect(BuildException.class)
5275 thrown.expectMessage(IsReachable.ERROR_BOTH_TARGETS)
5276 buildRule.executeTarget("testBoth")
5277 thrown.expect(BuildException.class)
5278 thrown.expectMessage(IsReachable.ERROR_NO_HOSTNAME)
5279 buildRule.executeTarget("testNoTargets")
5280 thrown.expect(BuildException.class)
5281 thrown.expectMessage(IsReachable.ERROR_BAD_TIMEOUT)
5282 buildRule.executeTarget("testBadTimeout")
5283 thrown.expect(BuildException.class)
5284 thrown.expectMessage(IsReachable.ERROR_NO_HOST_IN_URL)
5285 buildRule.executeTarget("testFile")
5286 thrown.expect(BuildException.class)
5287 thrown.expectMessage(IsReachable.ERROR_BAD_URL)
5288 buildRule.executeTarget("testBadURL")
5289 buildRule.configureProject("src/etc/testcases/taskdefs/conditions/isreference.xml")
5290 buildRule.executeTarget("basic")
5291 buildRule.getProject()
5292 buildRule.getProject().getProperty("global-path")
5293 buildRule.getProject()
5294 buildRule.getProject().getProperty("target-path")
5295 buildRule.getProject()
5296 buildRule.getProject().getProperty("undefined")
5297 thrown.expect(BuildException.class)
5298 thrown.expectMessage("No reference specified for isreference condition")
5299 buildRule.executeTarget("isreference-incomplete")
5300 buildRule.executeTarget("type")
5301 buildRule.getProject()
5302 buildRule.getProject().getProperty("global-path")
5303 buildRule.getProject()
5304 buildRule.getProject().getProperty("global-path-as-fileset")
5305 buildRule.getProject()
5306 buildRule.getProject().getProperty("global-path-as-foo")
5307 buildRule.getProject()
5308 buildRule.getProject().getProperty("global-echo")
5309 buildRule.configureProject("src/etc/testcases/taskdefs/conditions/issigned.xml")
5310 buildRule.executeTarget("pass")
5311 buildRule.executeTarget("password")
5312 buildRule.executeTarget("apassword")
5313 buildRule.executeTarget("allsigned")
5314 buildRule.configureProject("src/etc/testcases/taskdefs/conditions/parsersupports.xml")
5315 thrown.expect(BuildException.class)
5316 thrown.expectMessage(ParserSupports.ERROR_NO_ATTRIBUTES)
5317 buildRule.executeTarget("testEmpty")
5318 thrown.expect(BuildException.class)
5319 thrown.expectMessage(ParserSupports.ERROR_BOTH_ATTRIBUTES)
5320 buildRule.executeTarget("testBoth")
5321 buildRule.executeTarget("testNamespaces")
5322 thrown.expect(BuildException.class)
5323 thrown.expectMessage(ParserSupports.ERROR_NO_VALUE)
5324 buildRule.executeTarget("testPropertyNoValue")
5325 buildRule.executeTarget("testUnknownProperty")
5326 buildRule.executeTarget("testPropertyInvalid")
5327 buildRule.executeTarget("testXercesProperty")
5328 buildRule.configureProject("src/etc/testcases/taskdefs/conditions/typefound.xml")
5329 buildRule.executeTarget("testTask")
5330 buildRule.getProject()
5331 buildRule.getProject().getProperty("testTask")
5332 thrown.expect(BuildException.class)
5333 thrown.expectMessage("No type specified")
5334 buildRule.executeTarget("testUndefined")
5335 buildRule.executeTarget("testTaskThatIsntDefined")
5336 buildRule.getProject()
5337 buildRule.getProject().getProperty("testTaskThatIsntDefined")
5338 buildRule.executeTarget("testTaskThatDoesntReallyExist")
5339 buildRule.getProject()
5340 buildRule.getProject().getProperty("testTaskThatDoesntReallyExist")
5341 buildRule.executeTarget("testType")
5342 buildRule.getProject()
5343 buildRule.getProject().getProperty("testType")
5344 buildRule.executeTarget("testPreset")
5345 buildRule.getProject()
5346 buildRule.getProject().getProperty("testPreset")
5347 buildRule.executeTarget("testMacro")
5348 buildRule.getProject()
5349 buildRule.getProject().getProperty("testMacro")
5350 buildRule.configureProject("src/etc/testcases/taskdefs/conditions/xor.xml")
5351 buildRule.executeTarget("testEmpty")
5352 buildRule.executeTarget("test0")
5353 buildRule.executeTarget("test1")
5354 buildRule.executeTarget("test00")
5355 buildRule.executeTarget("test10")
5356 buildRule.executeTarget("test01")
5357 buildRule.executeTarget("test11")
5358 parser.stdout("Working file: build.xml")
5359 parser.stdout("revision 1.475")
5360 parser.stdout("date: 2004/06/05 16:10:32;  author: somebody;  state: Exp;  lines: +2 -2")
5361 parser.stdout("I have done something. I swear.")
5362 parser.stdout("=============================================================================")
5363 parser.getEntrySetAsArray()
5364 entries[0].getAuthor()
5365 Calendar.getInstance(TimeZone.getTimeZone("UTC"),Locale.US)
5366 TimeZone.getTimeZone("UTC")
5367 cal.set(Calendar.MILLISECOND,0)
5368 cal.set(2004,Calendar.JUNE,5,16,10,32)
5369 cal.getTime()
5370 entries[0].getDate()
5371 parser.stdout("Working file: build.xml")
5372 parser.stdout("revision 1.475")
5373 parser.stdout("date: 2004-06-05 16:10:32 +0000; author: somebody; state: Exp;  lines: +2 -2")
5374 parser.stdout("I have done something. I swear.")
5375 parser.stdout("=============================================================================")
5376 parser.getEntrySetAsArray()
5377 entries[0].getAuthor()
5378 Calendar.getInstance(TimeZone.getTimeZone("UTC"),Locale.US)
5379 TimeZone.getTimeZone("UTC")
5380 cal.set(Calendar.MILLISECOND,0)
5381 cal.set(2004,Calendar.JUNE,5,16,10,32)
5382 cal.getTime()
5383 entries[0].getDate()
5384 entry.addFile("Medicare & review.doc","1.1")
5385 entry.addFile("El\u00e8ments de style","1.2")
5386 writer.printChangeLog(pwriter,entries)
5387 JAXPUtils.getXMLReader()
5388 output.toByteArray()
5389 xmlReader.setContentHandler(newNullContentHandler())
5390 xmlReader.parse(newInputSource(input))
5391 expectNameAddress(newEmailAddress("address (name)"))
5392 expectNameAddress(newEmailAddress("(name) address"))
5393 expectNameAddress(newEmailAddress("name <address>"))
5394 expectNameAddress(newEmailAddress("<address> name"))
5395 expectNameAddress(newEmailAddress("<address> (name)"))
5396 expectNameAddress(newEmailAddress("(name) <address>"))
5397 expectNameAddress2(newEmailAddress("address (<name>)"))
5398 expectNameAddress2(newEmailAddress("(<name>) address"))
5399 expectNameAddress3(newEmailAddress("address"))
5400 expectNameAddress3(newEmailAddress("<address>"))
5401 expectNameAddress3(newEmailAddress(" <address> "))
5402 expectNameAddress3(newEmailAddress("< address >"))
5403 expectNameAddress3(newEmailAddress(" < address > "))
5404 e.getName()
5405 e.getAddress()
5406 e.getName()
5407 e.getAddress()
5408 e.getName()
5409 e.getName()
5410 e.getAddress()
5411 buildRule.configureProject("src/etc/testcases/taskdefs/email/mail.xml")
5412 thrown.expect(BuildException.class)
5413 thrown.expectMessage("SMTP auth only possible with MIME mail")
5414 buildRule.executeTarget("test1")
5415 thrown.expect(BuildException.class)
5416 thrown.expectMessage("SSL and STARTTLS only possible with MIME mail")
5417 buildRule.executeTarget("test2")
5418 DummyMailServer.startMailServer()
5419 buildRule.getProject()
5420 buildRule.getProject().setProperty("EmailTaskTest.test3.port",String.valueOf(mailServer.getPort()))
5421 String.valueOf(mailServer.getPort())
5422 mailServer.getPort()
5423 buildRule.executeTarget("test3")
5424 mailServer.disconnect()
5425 mailServer.getResult()
5426 smtpInteraction.contains("RCPT TO:<whoami>")
5427 ms.setProject(p)
5428 ms.addText("hi, this is an email")
5429 testFolder.newFile("message.txt")
5430 ms.print(newPrintStream(fos))
5431 fos.write(120)
5432 buildRule.configureProject("src/etc/testcases/taskdefs/jmod.xml")
5433 buildRule.executeTarget("setUp")
5434 buildRule.executeTarget("destAndClasspathNoJmod")
5435 buildRule.getProject()
5436 buildRule.getProject().getProperty("jmod")
5437 jmod.exists()
5438 buildRule.executeTarget("classpath-nested")
5439 buildRule.getProject()
5440 buildRule.getProject().getProperty("jmod")
5441 jmod.exists()
5442 buildRule.executeTarget("destAndClasspathOlderThanJmod")
5443 buildRule.getProject()
5444 buildRule.getProject().getProperty("jmod")
5445 buildRule.getProject()
5446 buildRule.getProject().getProperty("hello.jar")
5447 Files.getLastModifiedTime(jmod.toPath())
5448 jmod.toPath()
5449 Files.getLastModifiedTime(jmod.toPath()).toInstant()
5450 Files.getLastModifiedTime(jmod.toPath()).toInstant().isAfter(Instant.now().plus(30,ChronoUnit.MINUTES))
5451 Instant.now()
5452 Instant.now().plus(30,ChronoUnit.MINUTES)
5453 expected.expect(BuildException.class)
5454 buildRule.executeTarget("noDestFile")
5455 expected.expect(BuildException.class)
5456 buildRule.executeTarget("noClasspath")
5457 expected.expect(BuildException.class)
5458 buildRule.executeTarget("emptyClasspath")
5459 expected.expect(BuildException.class)
5460 buildRule.executeTarget("nonexistentClasspath")
5461 buildRule.executeTarget("classpathref")
5462 buildRule.getProject()
5463 buildRule.getProject().getProperty("jmod")
5464 jmod.exists()
5465 buildRule.executeTarget("classpath-both")
5466 buildRule.getProject()
5467 buildRule.getProject().getProperty("jmod")
5468 jmod.exists()
5469 buildRule.executeTarget("modulepath")
5470 buildRule.getProject()
5471 buildRule.getProject().getProperty("jmod")
5472 jmod.exists()
5473 buildRule.executeTarget("modulepathref")
5474 buildRule.getProject()
5475 buildRule.getProject().getProperty("jmod")
5476 jmod.exists()
5477 buildRule.executeTarget("modulepath-nested")
5478 buildRule.getProject()
5479 buildRule.getProject().getProperty("jmod")
5480 jmod.exists()
5481 expected.expect(BuildException.class)
5482 buildRule.executeTarget("modulepathnondir")
5483 buildRule.executeTarget("modulepath-both")
5484 buildRule.getProject()
5485 buildRule.getProject().getProperty("jmod")
5486 jmod.exists()
5487 buildRule.executeTarget("commandpath")
5488 buildRule.getProject()
5489 buildRule.getProject().getProperty("jmod")
5490 jmod.exists()
5491 runJmod("list",jmod.toString())
5492 jmod.toString()
5493 containsLine(output,l->l.equals("bin/command1"))
5494 l.equals("bin/command1")
5495 buildRule.executeTarget("commandpathref")
5496 buildRule.getProject()
5497 buildRule.getProject().getProperty("jmod")
5498 jmod.exists()
5499 runJmod("list",jmod.toString())
5500 jmod.toString()
5501 containsLine(output,l->l.equals("bin/command2"))
5502 l.equals("bin/command2")
5503 buildRule.executeTarget("commandpath-nested")
5504 buildRule.getProject()
5505 buildRule.getProject().getProperty("jmod")
5506 jmod.exists()
5507 runJmod("list",jmod.toString())
5508 jmod.toString()
5509 containsLine(output,l->l.equals("bin/command3"))
5510 l.equals("bin/command3")
5511 buildRule.executeTarget("commandpath-both")
5512 buildRule.getProject()
5513 buildRule.getProject().getProperty("jmod")
5514 jmod.exists()
5515 runJmod("list",jmod.toString())
5516 jmod.toString()
5517 containsAll(output,l->l.equals("bin/command4"),l->l.equals("bin/command5"))
5518 l.equals("bin/command4")
5519 l.equals("bin/command5")
5520 buildRule.executeTarget("headerpath")
5521 buildRule.getProject()
5522 buildRule.getProject().getProperty("jmod")
5523 jmod.exists()
5524 runJmod("list",jmod.toString())
5525 jmod.toString()
5526 containsLine(output,l->l.equals("include/header1.h"))
5527 l.equals("include/header1.h")
5528 buildRule.executeTarget("headerpathref")
5529 buildRule.getProject()
5530 buildRule.getProject().getProperty("jmod")
5531 jmod.exists()
5532 runJmod("list",jmod.toString())
5533 jmod.toString()
5534 containsLine(output,l->l.equals("include/header2.h"))
5535 l.equals("include/header2.h")
5536 buildRule.executeTarget("headerpath-nested")
5537 buildRule.getProject()
5538 buildRule.getProject().getProperty("jmod")
5539 jmod.exists()
5540 runJmod("list",jmod.toString())
5541 jmod.toString()
5542 containsLine(output,l->l.equals("include/header3.h"))
5543 l.equals("include/header3.h")
5544 buildRule.executeTarget("headerpath-both")
5545 buildRule.getProject()
5546 buildRule.getProject().getProperty("jmod")
5547 jmod.exists()
5548 runJmod("list",jmod.toString())
5549 jmod.toString()
5550 containsAll(output,l->l.equals("include/header4.h"),l->l.equals("include/header5.h"))
5551 l.equals("include/header4.h")
5552 l.equals("include/header5.h")
5553 buildRule.executeTarget("configpath")
5554 buildRule.getProject()
5555 buildRule.getProject().getProperty("jmod")
5556 jmod.exists()
5557 runJmod("list",jmod.toString())
5558 jmod.toString()
5559 containsLine(output,l->l.equals("conf/config1.properties"))
5560 l.equals("conf/config1.properties")
5561 buildRule.executeTarget("configpathref")
5562 buildRule.getProject()
5563 buildRule.getProject().getProperty("jmod")
5564 jmod.exists()
5565 runJmod("list",jmod.toString())
5566 jmod.toString()
5567 containsLine(output,l->l.equals("conf/config2.properties"))
5568 l.equals("conf/config2.properties")
5569 buildRule.executeTarget("configpath-nested")
5570 buildRule.getProject()
5571 buildRule.getProject().getProperty("jmod")
5572 jmod.exists()
5573 runJmod("list",jmod.toString())
5574 jmod.toString()
5575 containsLine(output,l->l.equals("conf/config3.properties"))
5576 l.equals("conf/config3.properties")
5577 buildRule.executeTarget("configpath-both")
5578 buildRule.getProject()
5579 buildRule.getProject().getProperty("jmod")
5580 jmod.exists()
5581 runJmod("list",jmod.toString())
5582 jmod.toString()
5583 containsAll(output,l->l.equals("conf/config4.properties"),l->l.equals("conf/config5.properties"))
5584 l.equals("conf/config4.properties")
5585 l.equals("conf/config5.properties")
5586 buildRule.executeTarget("legalpath")
5587 buildRule.getProject()
5588 buildRule.getProject().getProperty("jmod")
5589 jmod.exists()
5590 runJmod("list",jmod.toString())
5591 jmod.toString()
5592 containsLine(output,l->l.equals("legal/legal1.txt"))
5593 l.equals("legal/legal1.txt")
5594 buildRule.executeTarget("legalpathref")
5595 buildRule.getProject()
5596 buildRule.getProject().getProperty("jmod")
5597 jmod.exists()
5598 runJmod("list",jmod.toString())
5599 jmod.toString()
5600 containsLine(output,l->l.equals("legal/legal2.txt"))
5601 l.equals("legal/legal2.txt")
5602 buildRule.executeTarget("legalpath-nested")
5603 buildRule.getProject()
5604 buildRule.getProject().getProperty("jmod")
5605 jmod.exists()
5606 runJmod("list",jmod.toString())
5607 jmod.toString()
5608 containsLine(output,l->l.equals("legal/legal3.txt"))
5609 l.equals("legal/legal3.txt")
5610 buildRule.executeTarget("legalpath-both")
5611 buildRule.getProject()
5612 buildRule.getProject().getProperty("jmod")
5613 jmod.exists()
5614 runJmod("list",jmod.toString())
5615 jmod.toString()
5616 containsAll(output,l->l.equals("legal/legal4.txt"),l->l.equals("legal/legal5.txt"))
5617 l.equals("legal/legal4.txt")
5618 l.equals("legal/legal5.txt")
5619 buildRule.executeTarget("manpath")
5620 buildRule.getProject()
5621 buildRule.getProject().getProperty("jmod")
5622 jmod.exists()
5623 runJmod("list",jmod.toString())
5624 jmod.toString()
5625 containsLine(output,l->l.equals("man/man1.1"))
5626 l.equals("man/man1.1")
5627 buildRule.executeTarget("manpathref")
5628 buildRule.getProject()
5629 buildRule.getProject().getProperty("jmod")
5630 jmod.exists()
5631 runJmod("list",jmod.toString())
5632 jmod.toString()
5633 containsLine(output,l->l.equals("man/man2.1"))
5634 l.equals("man/man2.1")
5635 buildRule.executeTarget("manpath-nested")
5636 buildRule.getProject()
5637 buildRule.getProject().getProperty("jmod")
5638 jmod.exists()
5639 runJmod("list",jmod.toString())
5640 jmod.toString()
5641 containsLine(output,l->l.equals("man/man3.1"))
5642 l.equals("man/man3.1")
5643 buildRule.executeTarget("manpath-both")
5644 buildRule.getProject()
5645 buildRule.getProject().getProperty("jmod")
5646 jmod.exists()
5647 runJmod("list",jmod.toString())
5648 jmod.toString()
5649 containsAll(output,l->l.equals("man/man4.1"),l->l.equals("man/man5.1"))
5650 l.equals("man/man4.1")
5651 l.equals("man/man5.1")
5652 buildRule.executeTarget("nativelibpath")
5653 buildRule.getProject()
5654 buildRule.getProject().getProperty("jmod")
5655 jmod.exists()
5656 runJmod("list",jmod.toString())
5657 jmod.toString()
5658 containsLine(output,l->l.matches("lib/[^/]+\\.(dll|dylib|so)"))
5659 l.matches("lib/[^/]+\\.(dll|dylib|so)")
5660 buildRule.executeTarget("nativelibpathref")
5661 buildRule.getProject()
5662 buildRule.getProject().getProperty("jmod")
5663 jmod.exists()
5664 runJmod("list",jmod.toString())
5665 jmod.toString()
5666 containsLine(output,l->l.matches("lib/[^/]+\\.(dll|dylib|so)"))
5667 l.matches("lib/[^/]+\\.(dll|dylib|so)")
5668 buildRule.executeTarget("nativelibpath-nested")
5669 buildRule.getProject()
5670 buildRule.getProject().getProperty("jmod")
5671 jmod.exists()
5672 runJmod("list",jmod.toString())
5673 jmod.toString()
5674 containsLine(output,l->l.matches("lib/[^/]+\\.(dll|dylib|so)"))
5675 l.matches("lib/[^/]+\\.(dll|dylib|so)")
5676 buildRule.executeTarget("nativelibpath-both")
5677 buildRule.getProject()
5678 buildRule.getProject().getProperty("jmod")
5679 jmod.exists()
5680 runJmod("list",jmod.toString())
5681 jmod.toString()
5682 containsAll(output,l->l.matches("lib/(lib)?zip\\.(dll|dylib|so)"),l->l.matches("lib/(lib)?jvm\\.(dll|dylib|so)"))
5683 l.matches("lib/(lib)?zip\\.(dll|dylib|so)")
5684 l.matches("lib/(lib)?jvm\\.(dll|dylib|so)")
5685 buildRule.executeTarget("version")
5686 buildRule.getProject()
5687 buildRule.getProject().getProperty("jmod")
5688 jmod.exists()
5689 buildRule.getProject()
5690 buildRule.getProject().getProperty("version")
5691 version.isEmpty()
5692 runJmod("describe",jmod.toString())
5693 jmod.toString()
5694 containsLine(output,l->l.endsWith("@"+version))
5695 l.endsWith("@"+version)
5696 buildRule.executeTarget("version-nested")
5697 buildRule.getProject()
5698 buildRule.getProject().getProperty("jmod")
5699 jmod.exists()
5700 runJmod("describe",jmod.toString())
5701 jmod.toString()
5702 containsLine(output,l->l.matches(".*@1\\.0\\.1[-+]+99"))
5703 l.matches(".*@1\\.0\\.1[-+]+99")
5704 buildRule.executeTarget("version-nested-number")
5705 buildRule.getProject()
5706 buildRule.getProject().getProperty("jmod")
5707 jmod.exists()
5708 runJmod("describe",jmod.toString())
5709 jmod.toString()
5710 containsLine(output,l->l.endsWith("@1.0.1"))
5711 l.endsWith("@1.0.1")
5712 expected.expect(BuildException.class)
5713 buildRule.executeTarget("version-nested-no-number")
5714 expected.expect(BuildException.class)
5715 buildRule.executeTarget("version-nested-invalid-number")
5716 expected.expect(BuildException.class)
5717 buildRule.executeTarget("version-nested-invalid-prerelease")
5718 expected.expect(BuildException.class)
5719 buildRule.executeTarget("version-both")
5720 buildRule.executeTarget("mainclass")
5721 buildRule.getProject()
5722 buildRule.getProject().getProperty("jmod")
5723 jmod.exists()
5724 buildRule.getProject()
5725 buildRule.getProject().getProperty("hello.main-class")
5726 mainClass.isEmpty()
5727 runJmod("describe",jmod.toString())
5728 jmod.toString()
5729 Pattern.quote(mainClass)
5730 containsLine(output,l->l.matches(mainClassPattern))
5731 l.matches(mainClassPattern)
5732 buildRule.executeTarget("platform")
5733 buildRule.getProject()
5734 buildRule.getProject().getProperty("jmod")
5735 jmod.exists()
5736 buildRule.getProject()
5737 buildRule.getProject().getProperty("target-platform")
5738 platform.isEmpty()
5739 runJmod("describe",jmod.toString())
5740 jmod.toString()
5741 Pattern.quote(platform)
5742 containsLine(output,l->l.matches(platformPattern))
5743 l.matches(platformPattern)
5744 buildRule.executeTarget("hashing")
5745 buildRule.getProject()
5746 buildRule.getProject().getProperty("jmod")
5747 jmod.exists()
5748 runJmod("describe",jmod.toString())
5749 jmod.toString()
5750 containsLine(output,l->l.startsWith("hashes"))
5751 l.startsWith("hashes")
5752 ToolProvider.findFirst("jmod")
5753 ToolProvider.findFirst("jmod").orElseThrow(()->newRuntimeException("jmod tool not found in JDK."))
5754 jmod.run(out,err,args)
5755 stdout.toString()
5756 reader.lines()
5757 reader.lines().anyMatch(test)
5758 reader.readLine()
5759 test1.test(line)
5760 test2.test(line)
5761 buildRule.configureProject("src/etc/testcases/taskdefs/link.xml")
5762 buildRule.executeTarget("setUp")
5763 System.getProperty("os.name")
5764 System.getProperty("os.name").contains("Windows")
5765 Files.getLastModifiedTime(path)
5766 Files.getLastModifiedTime(path).toInstant()
5767 Files.getLastModifiedTime(path).toInstant().isBefore(time)
5768 isWindows()
5769 buildRule.getProject()
5770 buildRule.getProject().getProperty("image")
5771 image.root.exists()
5772 image.java.exists()
5773 buildRule.executeTarget("modulepath")
5774 verifyImageBuiltNormally()
5775 buildRule.executeTarget("imageNewerThanJmods")
5776 verifyImageBuiltNormally()
5777 Instant.now()
5778 Instant.now().plus(30,ChronoUnit.MINUTES)
5779 Files.walk(image.root.toPath())
5780 image.root.toPath()
5781 imageFiles.noneMatch(i->isEarlierThan(future,i))
5782 isEarlierThan(future,i)
5783 expected.expect(BuildException.class)
5784 buildRule.executeTarget("nomodulepath")
5785 expected.expect(BuildException.class)
5786 buildRule.executeTarget("nomodules")
5787 buildRule.executeTarget("modulepathref")
5788 verifyImageBuiltNormally()
5789 buildRule.executeTarget("modulepath-nested")
5790 verifyImageBuiltNormally()
5791 buildRule.executeTarget("modulepath-both")
5792 verifyImageBuiltNormally()
5793 buildRule.executeTarget("modules-nested")
5794 verifyImageBuiltNormally()
5795 image.java.toString()
5796 buildRule.getProject()
5797 buildRule.getProject().getProperty("hello.main-class")
5798 builder.inheritIO()
5799 builder.start()
5800 builder.start().waitFor()
5801 builder.command(image.java.toString(),buildRule.getProject().getProperty("smile.main-class"))
5802 image.java.toString()
5803 buildRule.getProject()
5804 buildRule.getProject().getProperty("smile.main-class")
5805 builder.start()
5806 builder.start().waitFor()
5807 expected.expect(BuildException.class)
5808 buildRule.executeTarget("modules-nested-missing-name")
5809 buildRule.executeTarget("modules-both")
5810 verifyImageBuiltNormally()
5811 expected.expect(BuildException.class)
5812 buildRule.executeTarget("observable")
5813 expected.expect(BuildException.class)
5814 buildRule.executeTarget("observable-nested")
5815 expected.expect(BuildException.class)
5816 buildRule.executeTarget("observable-nested-missing-name")
5817 buildRule.executeTarget("observable-both")
5818 verifyImageBuiltNormally()
5819 verifyImageBuiltNormally()
5820 isWindows()
5821 launcher1.exists()
5822 isWindows()
5823 launcher2.exists()
5824 buildRule.executeTarget("launchers")
5825 verifyLaunchersExist()
5826 buildRule.executeTarget("launchers-nested")
5827 verifyLaunchersExist()
5828 expected.expect(BuildException.class)
5829 buildRule.executeTarget("launchers-nested-missing-name")
5830 expected.expect(BuildException.class)
5831 buildRule.executeTarget("launchers-nested-missing-module")
5832 buildRule.executeTarget("launchers-both")
5833 verifyLaunchersExist()
5834 verifyImageBuiltNormally()
5835 buildRule.getProject()
5836 buildRule.getProject().getProperty("localefinder.main-class")
5837 image.java.toString()
5838 builder.inheritIO()
5839 builder.start()
5840 builder.start().waitFor()
5841 builder.command(image.java.toString(),mainClass,"ja")
5842 image.java.toString()
5843 builder.start()
5844 builder.start().waitFor()
5845 buildRule.executeTarget("locales")
5846 verifyLocales()
5847 buildRule.executeTarget("locales-nested")
5848 verifyLocales()
5849 expected.expect(BuildException.class)
5850 buildRule.executeTarget("locales-nested-missing-name")
5851 buildRule.executeTarget("locales-both")
5852 verifyLocales()
5853 buildRule.executeTarget("excluderesources")
5854 verifyImageBuiltNormally()
5855 buildRule.getProject()
5856 buildRule.getProject().getProperty("hello.main-class")
5857 image.java.toString()
5858 builder.redirectInput(ProcessBuilder.Redirect.INHERIT)
5859 builder.redirectErrorStream(true)
5860 builder.start()
5861 process.getInputStream()
5862 reader.lines()
5863 reader.lines().collect(Collectors.toList())
5864 Collectors.toList()
5865 outputLines.stream()
5866 outputLines.stream().anyMatch(l->l.endsWith("resource1.txt absent"))
5867 l.endsWith("resource1.txt absent")
5868 outputLines.stream()
5869 outputLines.stream().anyMatch(l->l.endsWith("resource2.txt present"))
5870 l.endsWith("resource2.txt present")
5871 buildRule.executeTarget("excluderesources-nested")
5872 verifyImageBuiltNormally()
5873 buildRule.getProject()
5874 buildRule.getProject().getProperty("hello.main-class")
5875 image.java.toString()
5876 builder.redirectInput(ProcessBuilder.Redirect.INHERIT)
5877 builder.redirectErrorStream(true)
5878 builder.start()
5879 process.getInputStream()
5880 reader.lines()
5881 reader.lines().collect(Collectors.toList())
5882 Collectors.toList()
5883 outputLines.stream()
5884 outputLines.stream().anyMatch(l->l.endsWith("resource1.txt absent"))
5885 l.endsWith("resource1.txt absent")
5886 outputLines.stream()
5887 outputLines.stream().anyMatch(l->l.endsWith("resource2.txt present"))
5888 l.endsWith("resource2.txt present")
5889 buildRule.executeTarget("excluderesources-nested-file")
5890 verifyImageBuiltNormally()
5891 buildRule.getProject()
5892 buildRule.getProject().getProperty("hello.main-class")
5893 image.java.toString()
5894 builder.redirectInput(ProcessBuilder.Redirect.INHERIT)
5895 builder.redirectErrorStream(true)
5896 builder.start()
5897 process.getInputStream()
5898 reader.lines()
5899 reader.lines().collect(Collectors.toList())
5900 Collectors.toList()
5901 outputLines.stream()
5902 outputLines.stream().anyMatch(l->l.endsWith("resource1.txt absent"))
5903 l.endsWith("resource1.txt absent")
5904 outputLines.stream()
5905 outputLines.stream().anyMatch(l->l.endsWith("resource2.txt present"))
5906 l.endsWith("resource2.txt present")
5907 expected.expect(BuildException.class)
5908 buildRule.executeTarget("excluderesources-nested-no-attr")
5909 expected.expect(BuildException.class)
5910 buildRule.executeTarget("excluderesources-nested-both")
5911 buildRule.executeTarget("excluderesources-both")
5912 verifyImageBuiltNormally()
5913 buildRule.getProject()
5914 buildRule.getProject().getProperty("hello.main-class")
5915 image.java.toString()
5916 builder.redirectInput(ProcessBuilder.Redirect.INHERIT)
5917 builder.redirectErrorStream(true)
5918 builder.start()
5919 process.getInputStream()
5920 reader.lines()
5921 reader.lines().collect(Collectors.toList())
5922 Collectors.toList()
5923 outputLines.stream()
5924 outputLines.stream().anyMatch(l->l.endsWith("resource1.txt absent"))
5925 l.endsWith("resource1.txt absent")
5926 outputLines.stream()
5927 outputLines.stream().anyMatch(l->l.endsWith("resource2.txt absent"))
5928 l.endsWith("resource2.txt absent")
5929 buildRule.executeTarget("excludefiles")
5930 verifyImageBuiltNormally()
5931 buildRule.executeTarget("excludefiles-nested")
5932 verifyImageBuiltNormally()
5933 buildRule.executeTarget("excludefiles-nested-file")
5934 verifyImageBuiltNormally()
5935 expected.expect(BuildException.class)
5936 buildRule.executeTarget("excludefiles-nested-no-attr")
5937 expected.expect(BuildException.class)
5938 buildRule.executeTarget("excludefiles-nested-both")
5939 buildRule.executeTarget("excludefiles-both")
5940 verifyImageBuiltNormally()
5941 buildRule.executeTarget("ordering")
5942 verifyImageBuiltNormally()
5943 buildRule.executeTarget("ordering-nested")
5944 verifyImageBuiltNormally()
5945 buildRule.executeTarget("ordering-nested-file")
5946 verifyImageBuiltNormally()
5947 expected.expect(BuildException.class)
5948 buildRule.executeTarget("ordering-nested-no-attr")
5949 expected.expect(BuildException.class)
5950 buildRule.executeTarget("ordering-nested-both")
5951 buildRule.executeTarget("ordering-both")
5952 verifyImageBuiltNormally()
5953 buildRule.executeTarget("includeheaders")
5954 verifyImageBuiltNormally()
5955 newFile(image.root,"include").listFiles()
5956 buildRule.executeTarget("includemanpages")
5957 verifyImageBuiltNormally()
5958 newFile(image.root,"man").listFiles()
5959 buildRule.executeTarget("includenativecommands")
5960 buildRule.getProject()
5961 buildRule.getProject().getProperty("image")
5962 image.root.exists()
5963 image.java.exists()
5964 Files.isDirectory(path)
5965 Files.newDirectoryStream(path)
5966 totalSizeOf(child)
5967 Files.isRegularFile(path)
5968 Files.size(path)
5969 buildRule.executeTarget("compression")
5970 verifyImageBuiltNormally()
5971 buildRule.getProject()
5972 buildRule.getProject().getProperty("compressed-image")
5973 totalSizeOf(image.root.toPath())
5974 image.root.toPath()
5975 totalSizeOf(compressedImageRoot.toPath())
5976 compressedImageRoot.toPath()
5977 buildRule.executeTarget("compression-nested")
5978 verifyImageBuiltNormally()
5979 buildRule.getProject()
5980 buildRule.getProject().getProperty("compressed-image")
5981 totalSizeOf(image.root.toPath())
5982 image.root.toPath()
5983 totalSizeOf(compressedImageRoot.toPath())
5984 compressedImageRoot.toPath()
5985 expected.expect(BuildException.class)
5986 buildRule.executeTarget("compression-nested-no-attr")
5987 expected.expect(BuildException.class)
5988 buildRule.executeTarget("compression-both")
5989 buildRule.executeTarget("endian")
5990 verifyImageBuiltNormally()
5991 buildRule.executeTarget("vm")
5992 verifyImageBuiltNormally()
5993 buildRule.executeTarget("releaseinfo-file")
5994 verifyImageBuiltNormally()
5995 Files.newBufferedReader(release.toPath())
5996 release.toPath()
5997 reader.lines()
5998 reader.lines().anyMatch(l->l.equals("test=true"))
5999 l.equals("test=true")
6000 buildRule.executeTarget("releaseinfo-delete")
6001 verifyImageBuiltNormally()
6002 Files.newBufferedReader(release.toPath())
6003 release.toPath()
6004 reader.lines()
6005 reader.lines().anyMatch(l->l.startsWith("test="))
6006 l.startsWith("test=")
6007 buildRule.executeTarget("releaseinfo-nested-delete")
6008 verifyImageBuiltNormally()
6009 Files.newBufferedReader(release.toPath())
6010 release.toPath()
6011 reader.lines()
6012 reader.lines().anyMatch(l->l.startsWith("test="))
6013 l.startsWith("test=")
6014 expected.expect(BuildException.class)
6015 buildRule.executeTarget("releaseinfo-nested-delete-no-key")
6016 buildRule.executeTarget("releaseinfo-nested-delete-both")
6017 verifyImageBuiltNormally()
6018 Files.newBufferedReader(release.toPath())
6019 release.toPath()
6020 reader.lines()
6021 reader.lines().noneMatch(l->l.startsWith("test=")||l.startsWith("foo="))
6022 l.startsWith("test=")
6023 l.startsWith("foo=")
6024 buildRule.executeTarget("releaseinfo-add-file")
6025 verifyImageBuiltNormally()
6026 reader.lines()
6027 reader.lines().anyMatch(l->l.equals("test=s\u00ed"))
6028 l.equals("test=s\u00ed")
6029 buildRule.executeTarget("releaseinfo-add-file-charset")
6030 verifyImageBuiltNormally()
6031 reader.lines()
6032 reader.lines().anyMatch(l->l.equals("test=s\u00ed"))
6033 l.equals("test=s\u00ed")
6034 buildRule.executeTarget("releaseinfo-add-key")
6035 verifyImageBuiltNormally()
6036 Files.newBufferedReader(release.toPath())
6037 release.toPath()
6038 reader.lines()
6039 reader.lines().anyMatch(l->l.equals("test=true"))
6040 l.equals("test=true")
6041 expected.expect(BuildException.class)
6042 buildRule.executeTarget("releaseinfo-add-no-value")
6043 expected.expect(BuildException.class)
6044 buildRule.executeTarget("releaseinfo-add-no-key")
6045 expected.expect(BuildException.class)
6046 buildRule.executeTarget("releaseinfo-add-file-and-key")
6047 expected.expect(BuildException.class)
6048 buildRule.executeTarget("releaseinfo-add-file-and-value")
6049 buildRule.executeTarget("debug")
6050 verifyImageBuiltNormally()
6051 image.java.toString()
6052 buildRule.getProject()
6053 buildRule.getProject().getProperty("thrower.main-class")
6054 builder.redirectInput(ProcessBuilder.Redirect.INHERIT)
6055 builder.redirectErrorStream(true)
6056 builder.start()
6057 process.getInputStream()
6058 linesReader.lines()
6059 linesReader.lines().noneMatch(l->l.matches(".*\\([^)]*:[0-9]+\\)"))
6060 l.matches(".*\\([^)]*:[0-9]+\\)")
6061 process.waitFor()
6062 buildRule.executeTarget("dedup")
6063 verifyImageBuiltNormally()
6064 buildRule.getProject()
6065 buildRule.getProject().getProperty("hello.mod")
6066 buildRule.getProject()
6067 buildRule.getProject().getProperty("smile.mod")
6068 Assume.assumeFalse("Checking that this operating system"+" supports symbolic links as a means of license de-duplication.",System.getProperty("os.name").contains("Windows"))
6069 System.getProperty("os.name")
6070 System.getProperty("os.name").contains("Windows")
6071 image.root.toPath()
6072 image.root.toPath().resolve("legal")
6073 legal.resolve(helloModuleName)
6074 legal.resolve(helloModuleName).resolve("USELESSLICENSE")
6075 legal.resolve(smileModuleName)
6076 legal.resolve(smileModuleName).resolve("USELESSLICENSE")
6077 Files.isSymbolicLink(license)
6078 buildRule.executeTarget("ignoresigning")
6079 verifyImageBuiltNormally()
6080 expected.expect(BuildException.class)
6081 buildRule.executeTarget("dedup-identical")
6082 buildRule.executeTarget("bindservices")
6083 verifyImageBuiltNormally()
6084 buildRule.getProject()
6085 buildRule.getProject().getProperty("inc.main-class")
6086 image.java.toString()
6087 builder.redirectInput(ProcessBuilder.Redirect.INHERIT)
6088 builder.redirectError(ProcessBuilder.Redirect.INHERIT)
6089 builder.start()
6090 process.getInputStream()
6091 linesReader.lines()
6092 linesReader.lines().count()
6093 process.waitFor()
6094 buildRule.getProject()
6095 buildRule.getProject().getProperty("image2")
6096 image.root.exists()
6097 image.java.exists()
6098 image.java.toString()
6099 builder.redirectInput(ProcessBuilder.Redirect.INHERIT)
6100 builder.redirectError(ProcessBuilder.Redirect.INHERIT)
6101 builder.start()
6102 process.getInputStream()
6103 linesReader.lines()
6104 linesReader.lines().count()
6105 process.waitFor()
6106 ToolProvider.findFirst("jlink")
6107 ToolProvider.findFirst("jlink").orElseThrow(()->newRuntimeException("jlink tool not found in JDK."))
6108 jlink.run(out,err,args)
6109 stdout.toString()
6110 createLiaison()
6111 getClass()
6112 getClass().getResource(name)
6113 FILE_UTILS.fromURI(url.toExternalForm())
6114 url.toExternalForm()
6115 getFile("/taskdefs/optional/xsltliaison-in.xsl")
6116 liaison.setStylesheet(xsl)
6117 liaison.addParam("param","value")
6118 getFile("/taskdefs/optional/xsltliaison-in.xml")
6119 testFolder.newFile("xsltliaison.tmp")
6120 liaison.transform(in,out)
6121 getFile("/taskdefs/optional/xsltliaison-encoding-in.xsl")
6122 liaison.setStylesheet(xsl)
6123 getFile("/taskdefs/optional/xsltliaison-encoding-in.xml")
6124 testFolder.newFile("xsltliaison-encoding.tmp")
6125 liaison.transform(in,out)
6126 parseXML(out)
6127 doc.getDocumentElement()
6128 doc.getDocumentElement().getNodeName()
6129 doc.getDocumentElement()
6130 doc.getDocumentElement().getFirstChild()
6131 doc.getDocumentElement().getFirstChild().getNodeName()
6132 doc.getDocumentElement()
6133 doc.getDocumentElement().getFirstChild()
6134 doc.getDocumentElement().getFirstChild().getFirstChild()
6135 doc.getDocumentElement().getFirstChild().getFirstChild().getNodeValue()
6136 DocumentBuilderFactory.newInstance()
6137 dbfactory.newDocumentBuilder()
6138 dbuilder.parse(file)
6139 buildRule.configureProject("src/etc/testcases/taskdefs/optional/antlr/antlr.xml")
6140 buildRule.executeTarget("test1")
6141 buildRule.executeTarget("test2")
6142 buildRule.executeTarget("test3")
6143 buildRule.executeTarget("test4")
6144 buildRule.executeTarget("test5")
6145 buildRule.executeTarget("test6")
6146 buildRule.executeTarget("test7")
6147 buildRule.executeTarget("test8")
6148 buildRule.executeTarget("test9")
6149 buildRule.executeTarget("test10")
6150 buildRule.getProject()
6151 buildRule.getProject().getProperty("output")
6152 outputDirectory.list(newHTMLFilter())
6153 buildRule.executeTarget("test11")
6154 buildRule.executeTarget("test12")
6155 buildRule.executeTarget("test13")
6156 buildRule.executeTarget("test9")
6157 buildRule.getFullLog()
6158 not(containsString("Skipped grammar file."))
6159 containsString("Skipped grammar file.")
6160 buildRule.executeTarget("noRecompile")
6161 buildRule.getFullLog()
6162 containsString("Skipped grammar file.")
6163 buildRule.executeTarget("test9")
6164 buildRule.getFullLog()
6165 not(containsString("Skipped grammar file."))
6166 containsString("Skipped grammar file.")
6167 FileUtilities.rollbackTimestamps(buildRule.getOutputDir(),5)
6168 buildRule.getOutputDir()
6169 buildRule.executeTarget("normalRecompile")
6170 buildRule.getFullLog()
6171 not(containsString("Skipped grammar file."))
6172 containsString("Skipped grammar file.")
6173 buildRule.executeTarget("test9")
6174 buildRule.getFullLog()
6175 not(containsString("Skipped grammar file."))
6176 containsString("Skipped grammar file.")
6177 FileUtilities.rollbackTimestamps(buildRule.getOutputDir(),5)
6178 buildRule.getOutputDir()
6179 buildRule.executeTarget("supergrammarChangeRecompile")
6180 buildRule.getFullLog()
6181 not(containsString("Skipped grammar file."))
6182 containsString("Skipped grammar file.")
6183 name.endsWith("html")
6184 buildRule.configureProject("src/etc/testcases/taskdefs/optional/script.xml")
6185 buildRule.executeTarget("useBeanshell")
6186 buildRule.getLog()
6187 buildRule.configureProject("src/etc/testcases/taskdefs/optional/echoproperties.xml")
6188 buildRule.getProject()
6189 buildRule.getProject().setProperty("test.property",TEST_VALUE)
6190 buildRule.executeTarget("cleanup")
6191 buildRule.executeTarget("testEchoToLog")
6192 buildRule.getLog()
6193 containsString("test.property="+TEST_VALUE)
6194 buildRule.executeTarget("testEchoWithEmptyPrefixToLog")
6195 buildRule.getLog()
6196 containsString("test.property="+TEST_VALUE)
6197 thrown.expect(BuildException.class)
6198 thrown.expectMessage("srcfile is a directory!")
6199 buildRule.executeTarget("testReadBadFile")
6200 buildRule.executeTarget("testReadBadFileNoFail")
6201 buildRule.getLog()
6202 containsString("srcfile is a directory!")
6203 thrown.expect(BuildException.class)
6204 thrown.expectMessage("destfile is a directory!")
6205 buildRule.executeTarget("testEchoToBadFile")
6206 buildRule.executeTarget("testEchoToBadFileNoFail")
6207 buildRule.getLog()
6208 containsString("destfile is a directory!")
6209 buildRule.executeTarget("testEchoToGoodFile")
6210 buildRule.executeTarget("testEchoToGoodFileXml")
6211 buildRule.getProject()
6212 buildRule.getProject().getBaseDir()
6213 br.lines()
6214 br.lines().anyMatch(line->line.contains("<property name=\"test.property\" value=\""+TEST_VALUE+"\" />"))
6215 line.contains("<property name=\"test.property\" value=\""+TEST_VALUE+"\" />")
6216 buildRule.executeTarget("testEchoToGoodFileFail")
6217 buildRule.executeTarget("testEchoToGoodFileNoFail")
6218 testEchoPrefixVarious("testEchoPrefix")
6219 testEchoPrefixVarious("testEchoPrefixAsPropertyset")
6220 testEchoPrefixVarious("testEchoPrefixAsNegatedPropertyset")
6221 testEchoPrefixVarious("testEchoPrefixAsDoublyNegatedPropertyset")
6222 thrown.expect(BuildException.class)
6223 thrown.expectMessage("Please specify either prefix or regex, but not both")
6224 buildRule.executeTarget("testWithPrefixAndRegex")
6225 buildRule.executeTarget("testEchoWithEmptyPrefixToLog")
6226 buildRule.getLog()
6227 containsString("test.property="+TEST_VALUE)
6228 assumeTrue("Test skipped because no regexp matcher is present.",RegexpMatcherFactory.regexpMatcherPresent(buildRule.getProject()))
6229 RegexpMatcherFactory.regexpMatcherPresent(buildRule.getProject())
6230 buildRule.getProject()
6231 buildRule.executeTarget("testWithRegex")
6232 buildRule.getFullLog()
6233 containsString("ant.version=")
6234 buildRule.executeTarget(target)
6235 loadPropFile(PREFIX_OUTFILE)
6236 props.getProperty("a.set")
6237 props.getProperty("b.set")
6238 buildRule.getProject()
6239 buildRule.getProject().getBaseDir()
6240 f.getAbsolutePath()
6241 f.exists()
6242 props.load(in)
6243 loadPropFile(GOOD_OUTFILE)
6244 props.list(System.out)
6245 props.getProperty("test.property")
6246 buildRule.configureProject("src/etc/testcases/taskdefs/optional/javah/build.xml")
6247 buildRule.executeTarget("tearDown")
6248 assumeFalse(JavaEnvUtils.isAtLeastJavaVersion("10"))
6249 JavaEnvUtils.isAtLeastJavaVersion("10")
6250 buildRule.executeTarget("simple-compile")
6251 buildRule.getProject()
6252 buildRule.getProject().getProperty("output")
6253 newFile(buildRule.getProject().getProperty("output"),"org_example_Foo.h").exists()
6254 assumeFalse(JavaEnvUtils.isAtLeastJavaVersion("10"))
6255 JavaEnvUtils.isAtLeastJavaVersion("10")
6256 buildRule.executeTarget("test-fileset")
6257 buildRule.getProject()
6258 buildRule.getProject().getProperty("output")
6259 newFile(buildRule.getProject().getProperty("output"),"org_example_Foo.h").exists()
6260 buildRule.configureProject("src/etc/testcases/taskdefs/optional/jspc.xml")
6261 executeJspCompile("testSimple","simple_jsp.java")
6262 executeJspCompile("testUriroot","uriroot_jsp.java")
6263 executeJspCompile("testXml","xml_jsp.java")
6264 executeJspCompile("testKeyword","default_jsp.java")
6265 executeJspCompile("testInvalidClassname","_1nvalid_0002dclassname_jsp.java")
6266 thrown.expect(BuildException.class)
6267 thrown.expectMessage("Java returned: 9")
6268 buildRule.executeTarget("testNoTld")
6269 buildRule.executeTarget("testNotAJspFile")
6270 buildRule.executeTarget("testWebapp")
6271 buildRule.executeTarget(target)
6272 getOutputFile(filename)
6273 file.exists()
6274 file.length()
6275 buildRule.getProject()
6276 buildRule.getProject().getProperty("output")
6277 JspCompilerAdapterFactory.getCompiler("jasper",null,null)
6278 adapter.createMangler()
6279 instanceOf(JspNameMangler.class)
6280 JspCompilerAdapterFactory.getCompiler("jasper41",null,null)
6281 adapter.createMangler()
6282 instanceOf(Jasper41Mangler.class)
6283 mangler.mapJspToJavaName(newFile(filename))
6284 buildRule.configureProject("src/etc/testcases/taskdefs/optional/native2ascii/build.xml")
6285 buildRule.executeTarget("tearDown")
6286 buildRule.executeTarget("testIso8859-1")
6287 buildRule.getProject()
6288 buildRule.getProject().resolveFile("expected/iso8859-1.test")
6289 buildRule.getProject()
6290 buildRule.getProject().getProperty("output")
6291 FileUtils.getFileUtils()
6292 FileUtils.getFileUtils().contentEquals(in,out,true)
6293 buildRule.configureProject(projectFilePath)
6294 buildRule.executeTarget("setUp")
6295 initTestPropFile()
6296 initBuildPropFile()
6297 buildRule.configureProject(projectFilePath)
6298 buildRule.getProject()
6299 buildRule.getProject().setProperty(valueDoesNotGetOverwrittenPropertyFileKey,valueDoesNotGetOverwrittenPropertyFile)
6300 pf.setProject(buildRule.getProject())
6301 buildRule.getProject()
6302 pf.setFile(file)
6303 file.exists()
6304 pf.execute()
6305 file.exists()
6306 file.delete()
6307 getTestProperties()
6308 beforeUpdate.getProperty(FNAME_KEY)
6309 beforeUpdate.getProperty(LNAME_KEY)
6310 beforeUpdate.getProperty(EMAIL_KEY)
6311 beforeUpdate.getProperty(PHONE_KEY)
6312 beforeUpdate.getProperty(AGE_KEY)
6313 beforeUpdate.getProperty(DATE_KEY)
6314 buildRule.executeTarget("update-existing-properties")
6315 getTestProperties()
6316 afterUpdate.getProperty(FNAME_KEY)
6317 afterUpdate.getProperty(LNAME_KEY)
6318 afterUpdate.getProperty(EMAIL_KEY)
6319 afterUpdate.getProperty(PHONE_KEY)
6320 afterUpdate.getProperty(AGE_KEY)
6321 afterUpdate.getProperty(DATE_KEY)
6322 getTestProperties()
6323 beforeUpdate.getProperty(FNAME_KEY)
6324 beforeUpdate.getProperty(LNAME_KEY)
6325 buildRule.executeTarget("delete-properties")
6326 getTestProperties()
6327 afterUpdate.getProperty(LNAME_KEY)
6328 afterUpdate.getProperty(FNAME_KEY)
6329 buildRule.executeTarget("exercise")
6330 buildRule.getProject()
6331 buildRule.getProject().getProperty("int.with.default")
6332 buildRule.getProject()
6333 buildRule.getProject().getProperty("int.without.default")
6334 buildRule.getProject()
6335 buildRule.getProject().getProperty("string.with.default")
6336 buildRule.getProject()
6337 buildRule.getProject().getProperty("string.without.default")
6338 buildRule.getProject()
6339 buildRule.getProject().getProperty("ethans.birth")
6340 buildRule.getProject()
6341 buildRule.getProject().getProperty("first.birthday")
6342 buildRule.getProject()
6343 buildRule.getProject().getProperty("olderThanAWeek")
6344 buildRule.getProject()
6345 buildRule.getProject().getProperty("existing.prop")
6346 buildRule.getProject()
6347 buildRule.getProject().getProperty("int.without.value")
6348 buildRule.executeTarget("bugDemo1")
6349 buildRule.executeTarget("bugDemo2")
6350 buildRule.getProject()
6351 buildRule.getProject().getProperty("foo")
6352 pf.setProject(buildRule.getProject())
6353 buildRule.getProject()
6354 pf.setFile(newFile(buildRule.getOutputDir(),testPropsFilePath))
6355 buildRule.getOutputDir()
6356 pf.createEntry()
6357 entry.setKey("date")
6358 entry.setValue(String.valueOf(delta))
6359 String.valueOf(delta)
6360 type.setValue("date")
6361 entry.setType(type)
6362 entry.setPattern("yyyy/MM/dd")
6363 operation.setValue("+")
6364 entry.setOperation(operation)
6365 pf.execute()
6366 getTestProperties()
6367 LocalDate.now()
6368 LocalDate.now().plusDays(delta)
6369 String.format("%d/%02d/%02d",currentDate.getYear(),currentDate.getMonthValue(),currentDate.getDayOfMonth())
6370 currentDate.getYear()
6371 currentDate.getMonthValue()
6372 currentDate.getDayOfMonth()
6373 props.getProperty("date")
6374 buildRule.getOutputDir()
6375 testProps.load(propsFile)
6376 propsFile.close()
6377 testProps.put(FNAME_KEY,FNAME)
6378 testProps.put(LNAME_KEY,LNAME)
6379 testProps.put(EMAIL_KEY,EMAIL)
6380 testProps.put("existing.prop","37")
6381 buildRule.getOutputDir()
6382 testProps.store(fos,"defaults")
6383 fos.close()
6384 buildProps.put(testPropertyFileKey,testPropertyFile)
6385 buildProps.put(FNAME_KEY,NEW_FNAME)
6386 buildProps.put(LNAME_KEY,NEW_LNAME)
6387 buildProps.put(EMAIL_KEY,NEW_EMAIL)
6388 buildProps.put(PHONE_KEY,NEW_PHONE)
6389 buildProps.put(AGE_KEY,NEW_AGE)
6390 buildProps.put(DATE_KEY,NEW_DATE)
6391 buildRule.getOutputDir()
6392 buildProps.store(fos,null)
6393 fos.close()
6394 buildRule.configureProject("src/etc/testcases/taskdefs/optional/pvcs.xml")
6395 buildRule.executeTarget("test1")
6396 buildRule.executeTarget("test2")
6397 buildRule.executeTarget("test3")
6398 buildRule.executeTarget("test4")
6399 buildRule.executeTarget("test5")
6400 buildRule.executeTarget("test6")
6401 buildRule.configureProject("src/etc/testcases/taskdefs/optional/replaceregexp.xml")
6402 buildRule.getProject()
6403 buildRule.getProject().getBaseDir()
6404 original.load(propsFile)
6405 original.get("OldAbc")
6406 buildRule.executeTarget("testReplace")
6407 buildRule.getOutputDir()
6408 after.load(propsFile)
6409 after.get("OldAbc")
6410 after.get("NewProp")
6411 buildRule.executeTarget("touchDirectory")
6412 buildRule.getOutputDir()
6413 myFile.lastModified()
6414 buildRule.executeTarget("testDirectoryDateDoesNotChange")
6415 myFile.lastModified()
6416 buildRule.executeTarget("testDontAddNewline1")
6417 FileUtilities.getFileContents(newFile(buildRule.getOutputDir(),"test.properties"))
6418 buildRule.getOutputDir()
6419 FileUtilities.getFileContents(newFile(buildRule.getProject().getBaseDir(),"replaceregexp2.result.properties"))
6420 buildRule.getProject()
6421 buildRule.getProject().getBaseDir()
6422 buildRule.executeTarget("testDontAddNewline2")
6423 FileUtilities.getFileContents(newFile(buildRule.getOutputDir(),"test.properties"))
6424 buildRule.getOutputDir()
6425 FileUtilities.getFileContents(newFile(buildRule.getProject().getBaseDir(),"replaceregexp2.result.properties"))
6426 buildRule.getProject()
6427 buildRule.getProject().getBaseDir()
6428 buildRule.executeTarget("lastModifiedSetup")
6429 buildRule.getOutputDir()
6430 assumeTrue(testFile.setLastModified(testFile.lastModified()-FileUtils.getFileUtils().getFileTimestampGranularity()*3))
6431 testFile.setLastModified(testFile.lastModified()-FileUtils.getFileUtils().getFileTimestampGranularity()*3)
6432 testFile.lastModified()
6433 FileUtils.getFileUtils()
6434 FileUtils.getFileUtils().getFileTimestampGranularity()
6435 testFile.lastModified()
6436 buildRule.executeTarget("testNoPreserve")
6437 testFile.lastModified()
6438 buildRule.executeTarget("lastModifiedSetup")
6439 buildRule.getOutputDir()
6440 assumeTrue(testFile.setLastModified(testFile.lastModified()-FileUtils.getFileUtils().getFileTimestampGranularity()*3))
6441 testFile.setLastModified(testFile.lastModified()-FileUtils.getFileUtils().getFileTimestampGranularity()*3)
6442 testFile.lastModified()
6443 FileUtils.getFileUtils()
6444 FileUtils.getFileUtils().getFileTimestampGranularity()
6445 testFile.lastModified()
6446 buildRule.executeTarget("testPreserve")
6447 testFile.lastModified()
6448 buildRule.configureProject("src/etc/testcases/taskdefs/optional/script_reference.xml")
6449 buildRule.executeTarget("script")
6450 buildRule.configureProject("src/etc/testcases/taskdefs/optional/script.xml")
6451 buildRule.executeTarget("example1")
6452 buildRule.getLog()
6453 buildRule.getLog().indexOf("1")
6454 buildRule.getLog()
6455 buildRule.getLog().indexOf("4",index)
6456 buildRule.getLog()
6457 buildRule.getLog().indexOf("9",index)
6458 buildRule.getLog()
6459 buildRule.getLog().indexOf("16",index)
6460 buildRule.getLog()
6461 buildRule.getLog().indexOf("25",index)
6462 buildRule.getLog()
6463 buildRule.getLog().indexOf("36",index)
6464 buildRule.getLog()
6465 buildRule.getLog().indexOf("49",index)
6466 buildRule.getLog()
6467 buildRule.getLog().indexOf("64",index)
6468 buildRule.getLog()
6469 buildRule.getLog().indexOf("81",index)
6470 buildRule.getLog()
6471 buildRule.getLog().indexOf("100",index)
6472 buildRule.getProject()
6473 buildRule.getProject().setProperty("useSrcAndEncoding.reader.encoding","UTF-8")
6474 buildRule.executeTarget("useSrcAndEncoding")
6475 thrown.expect(BuildException.class)
6476 thrown.expectMessage("expected <eacute [\u00e9]> but was <eacute [\u00c3\u00a9]>")
6477 buildRule.getProject()
6478 buildRule.getProject().setProperty("useSrcAndEncoding.reader.encoding","ISO-8859-1")
6479 buildRule.executeTarget("useSrcAndEncoding")
6480 thrown.expect(BuildException.class)
6481 thrown.expectMessage("' failed with exit code 2")
6482 rpm.setProject(newProject())
6483 rpm.setFailOnError(true)
6484 rpm.execute()
6485 rpm.execute()
6486 buildRule.configureProject("src/etc/testcases/taskdefs/optional/schemavalidate.xml")
6487 buildRule.executeTarget("testNoNamespace")
6488 buildRule.executeTarget("testNSMapping")
6489 thrown.expect(BuildException.class)
6490 thrown.expectMessage(SchemaValidate.SchemaLocation.ERROR_NO_URI)
6491 buildRule.executeTarget("testNoEmptySchemaNamespace")
6492 thrown.expect(BuildException.class)
6493 thrown.expectMessage(SchemaValidate.SchemaLocation.ERROR_NO_LOCATION)
6494 buildRule.executeTarget("testNoEmptySchemaLocation")
6495 thrown.expect(BuildException.class)
6496 thrown.expectMessage(SchemaValidate.SchemaLocation.ERROR_NO_FILE)
6497 buildRule.executeTarget("testNoFile")
6498 thrown.expect(BuildException.class)
6499 thrown.expectMessage(SchemaValidate.SchemaLocation.ERROR_TWO_LOCATIONS)
6500 buildRule.executeTarget("testNoDoubleSchemaLocation")
6501 thrown.expect(BuildException.class)
6502 thrown.expectMessage(SchemaValidate.ERROR_DUPLICATE_SCHEMA)
6503 buildRule.executeTarget("testNoDuplicateSchema")
6504 buildRule.executeTarget("testEqualsSchemasOK")
6505 buildRule.executeTarget("testFileset")
6506 f.exists()
6507 f.delete()
6508 l.setLogger(this)
6509 name.startsWith("META-INF/services/")
6510 super.getResourceAsStream(name)
6511 System.setSecurityManager(newSecurityManager(){publicvoidcheckPermission(Permissionperm){}})
6512 liaison.transform(in,out)
6513 out.delete()
6514 Thread.currentThread()
6515 Thread.currentThread().setContextClassLoader(orig)
6516 System.setSecurityManager(null)
6517 liaison.transform(in,out)
6518 out.delete()
6519 Thread.currentThread()
6520 Thread.currentThread().setContextClassLoader(orig)
6521 System.setSecurityManager(null)
6522 liaison.transform(in,out)
6523 out.delete()
6524 Thread.currentThread()
6525 Thread.currentThread().setContextClassLoader(orig)
6526 System.setSecurityManager(null)
6527 liaison.transform(in,out)
6528 out.delete()
6529 System.setSecurityManager(null)
6530 getFile("/taskdefs/optional/xsltliaison-in.xsl")
6531 liaison.setStylesheet(xsl)
6532 liaison.addParam("param","value")
6533 getFile("/taskdefs/optional/xsltliaison-in.xml")
6534 liaison.transform(in,out)
6535 out.delete()
6536 JAXPUtils.getSystemId(file)
6537 startsWith("file:/")
6538 not(startsWith("file:////"))
6539 startsWith("file:////")
6540 buildRule.configureProject("src/etc/testcases/taskdefs/optional/xmlvalidate.xml")
6541 buildRule.executeTarget("xmlcatalogfiles")
6542 buildRule.executeTarget("xmlcatalogpath")
6543 buildRule.configureProject("src/etc/testcases/taskdefs/optional/xmlvalidate.xml")
6544 buildRule.executeTarget("testValidate")
6545 buildRule.executeTarget("testDeepValidate")
6546 buildRule.executeTarget("xmlcatalog")
6547 buildRule.executeTarget("xmlcatalogViaRefid")
6548 buildRule.executeTarget("xmlcatalogfiles-override")
6549 buildRule.executeTarget("xmlcatalogpath-override")
6550 buildRule.executeTarget("xmlcatalognested")
6551 buildRule.executeTarget("testSchemaGood")
6552 thrown.expect(BuildException.class)
6553 thrown.expectMessage("not a valid XML document")
6554 buildRule.executeTarget("testSchemaBad")
6555 buildRule.executeTarget("testIso2022Jp")
6556 buildRule.executeTarget("testUtf8")
6557 buildRule.executeTarget("testProperty.validXML")
6558 buildRule.executeTarget("testProperty.invalidXML")
6559 buildRule.configureProject("src/etc/testcases/taskdefs/optional/xslt.xml")
6560 buildRule.executeTarget("testCatchNoDtd")
6561 buildRule.executeTarget("testCatalog")
6562 buildRule.executeTarget("testOutputProperty")
6563 buildRule.executeTarget("testXMLWithEntitiesInNonAsciiPath")
6564 buildRule.executeTarget("testStyleSheetWithInclude")
6565 buildRule.getLog()
6566 not(containsString("java.io.FileNotFoundException"))
6567 containsString("java.io.FileNotFoundException")
6568 buildRule.configureProject("src/etc/testcases/taskdefs/optional/depend/depend.xml")
6569 buildRule.executeTarget("src1setup")
6570 buildRule.executeTarget("compile")
6571 FileUtilities.rollbackTimestamps(newFile(buildRule.getProject().getProperty("tempsrc.dir")),5)
6572 buildRule.getProject()
6573 buildRule.getProject().getProperty("tempsrc.dir")
6574 FileUtilities.rollbackTimestamps(newFile(buildRule.getProject().getProperty("classes.dir")),5)
6575 buildRule.getProject()
6576 buildRule.getProject().getProperty("classes.dir")
6577 buildRule.executeTarget("testdirect")
6578 getResultFiles()
6579 files.size()
6580 hasKey("A.class")
6581 hasKey("D.class")
6582 buildRule.executeTarget("src1setup")
6583 buildRule.executeTarget("compile")
6584 FileUtilities.rollbackTimestamps(newFile(buildRule.getProject().getProperty("tempsrc.dir")),5)
6585 buildRule.getProject()
6586 buildRule.getProject().getProperty("tempsrc.dir")
6587 FileUtilities.rollbackTimestamps(newFile(buildRule.getProject().getProperty("classes.dir")),5)
6588 buildRule.getProject()
6589 buildRule.getProject().getProperty("classes.dir")
6590 buildRule.executeTarget("testclosure")
6591 getResultFiles()
6592 files.size()
6593 hasKey("D.class")
6594 buildRule.executeTarget("src2setup")
6595 buildRule.executeTarget("compile")
6596 FileUtilities.rollbackTimestamps(newFile(buildRule.getProject().getProperty("tempsrc.dir")),5)
6597 buildRule.getProject()
6598 buildRule.getProject().getProperty("tempsrc.dir")
6599 FileUtilities.rollbackTimestamps(newFile(buildRule.getProject().getProperty("classes.dir")),5)
6600 buildRule.getProject()
6601 buildRule.getProject().getProperty("classes.dir")
6602 buildRule.executeTarget("testinner")
6603 getResultFiles()
6604 getResultFiles().size()
6605 buildRule.executeTarget("src3setup")
6606 buildRule.executeTarget("compile")
6607 FileUtilities.rollbackTimestamps(newFile(buildRule.getProject().getProperty("tempsrc.dir")),5)
6608 buildRule.getProject()
6609 buildRule.getProject().getProperty("tempsrc.dir")
6610 FileUtilities.rollbackTimestamps(newFile(buildRule.getProject().getProperty("classes.dir")),5)
6611 buildRule.getProject()
6612 buildRule.getProject().getProperty("classes.dir")
6613 buildRule.executeTarget("testinnerinner")
6614 getResultFiles()
6615 getResultFiles().size()
6616 thrown.expect(BuildException.class)
6617 thrown.expectMessage("srcdir attribute must be set")
6618 buildRule.executeTarget("testnosource")
6619 thrown.expect(BuildException.class)
6620 thrown.expectMessage("srcdir attribute must be non-empty")
6621 buildRule.executeTarget("testemptysource")
6622 buildRule.getProject()
6623 buildRule.getProject().getReference(RESULT_FILESET)
6624 resultFileSet.getDirectoryScanner(buildRule.getProject())
6625 buildRule.getProject()
6626 Arrays.stream(scanner.getIncludedFiles())
6627 scanner.getIncludedFiles()
6628 Arrays.stream(scanner.getIncludedFiles()).collect(Collectors.toMap(file->file,file->file,(a,b)->b,Hashtable::new))
6629 Collectors.toMap(file->file,file->file,(a,b)->b,Hashtable::new)
6630 buildRule.executeTarget("testinnerclosure")
6631 getResultFiles()
6632 getResultFiles().size()
6633 buildRule.executeTarget("testcache")
6634 buildRule.executeTarget("src5setup")
6635 buildRule.executeTarget("compile")
6636 FileUtilities.rollbackTimestamps(newFile(buildRule.getProject().getProperty("tempsrc.dir")),5)
6637 buildRule.getProject()
6638 buildRule.getProject().getProperty("tempsrc.dir")
6639 FileUtilities.rollbackTimestamps(newFile(buildRule.getProject().getProperty("classes.dir")),5)
6640 buildRule.getProject()
6641 buildRule.getProject().getProperty("classes.dir")
6642 buildRule.executeTarget("testnonpublic")
6643 buildRule.getLog()
6644 both(containsString("The class APrivate in file"))
6645 containsString("The class APrivate in file")
6646 both(containsString("The class APrivate in file")).and(containsString("but has not been deleted because its source file could not be determined"))
6647 containsString("but has not been deleted because its source file could not be determined")
6648 atLeastJava9.setAtLeast("9")
6649 Assume.assumeTrue("Skipping test execution since Java version is lesser than 9",atLeastJava9.eval())
6650 atLeastJava9.eval()
6651 buildRule.executeTarget("testmoduleinfo")
6652 buildRule.configureProject(TASKDEFS_DIR+"/translate.xml")
6653 buildRule.executeTarget("test1")
6654 compareFiles(newFile(buildRule.getProject().getBaseDir(),"expected/de/template.txt"),newFile(buildRule.getOutputDir(),"de/template.txt"))
6655 buildRule.getProject()
6656 buildRule.getProject().getBaseDir()
6657 buildRule.getOutputDir()
6658 file1.exists()
6659 file2.exists()
6660 file1.length()
6661 file2.length()
6662 fis1.read(buffer1)
6663 fis2.read(buffer2)
6664 buildRule.configureProject("src/etc/testcases/taskdefs/optional/image/imageio.xml")
6665 buildRule.executeTarget("testEchoToLog")
6666 buildRule.getLog()
6667 containsString("Processing File")
6668 buildRule.executeTarget("testSimpleScale")
6669 buildRule.getLog()
6670 containsString("Processing File")
6671 buildRule.getOutputDir()
6672 f.getAbsolutePath()
6673 f.exists()
6674 buildRule.executeTarget("testSimpleScale")
6675 buildRule.getLog()
6676 containsString("Processing File")
6677 buildRule.getOutputDir()
6678 assumeTrue("Could not change file modification date",f.setLastModified(f.lastModified()-FILE_UTILS.getFileTimestampGranularity()*2))
6679 f.setLastModified(f.lastModified()-FILE_UTILS.getFileTimestampGranularity()*2)
6680 f.lastModified()
6681 FILE_UTILS.getFileTimestampGranularity()
6682 f.lastModified()
6683 buildRule.executeTarget("testOverwriteTrue")
6684 buildRule.getLog()
6685 containsString("Processing File")
6686 buildRule.getOutputDir()
6687 f.lastModified()
6688 buildRule.executeTarget("testSimpleScale")
6689 buildRule.getLog()
6690 containsString("Processing File")
6691 buildRule.getOutputDir()
6692 assumeTrue("Could not change file modification date",f.setLastModified(f.lastModified()-FILE_UTILS.getFileTimestampGranularity()*2))
6693 f.setLastModified(f.lastModified()-FILE_UTILS.getFileTimestampGranularity()*2)
6694 f.lastModified()
6695 FILE_UTILS.getFileTimestampGranularity()
6696 f.lastModified()
6697 buildRule.executeTarget("testDrawOverwriteTrue")
6698 buildRule.getLog()
6699 containsString("Processing File")
6700 buildRule.getOutputDir()
6701 f.lastModified()
6702 buildRule.executeTarget("testSimpleScale")
6703 buildRule.getLog()
6704 containsString("Processing File")
6705 buildRule.getOutputDir()
6706 f.lastModified()
6707 buildRule.executeTarget("testOverwriteFalse")
6708 buildRule.getLog()
6709 containsString("Processing File")
6710 buildRule.getOutputDir()
6711 f.lastModified()
6712 buildRule.executeTarget("testSimpleScaleWithMapper")
6713 buildRule.getLog()
6714 containsString("Processing File")
6715 buildRule.getOutputDir()
6716 f.getAbsolutePath()
6717 f.exists()
6718 buildRule.executeTarget("testFlip")
6719 buildRule.getFullLog()
6720 containsString("Flipping an image")
6721 buildRule.getOutputDir()
6722 f.getAbsolutePath()
6723 f.exists()
6724 thrown.expect(BuildException.class)
6725 thrown.expectMessage(message)
6726 buildRule.executeTarget("testFailOnError")
6727 buildRule.getLog()
6728 containsString(message)
6729 assumeFalse(JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9))
6730 JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
6731 buildRule.configureProject("src/etc/testcases/taskdefs/optional/image/image.xml")
6732 buildRule.executeTarget("testEchoToLog")
6733 buildRule.getLog()
6734 containsString("Processing File")
6735 buildRule.executeTarget("testSimpleScale")
6736 buildRule.getLog()
6737 containsString("Processing File")
6738 buildRule.getOutputDir()
6739 f.getAbsolutePath()
6740 f.exists()
6741 buildRule.executeTarget("testSimpleScale")
6742 buildRule.getLog()
6743 containsString("Processing File")
6744 buildRule.getOutputDir()
6745 assumeTrue("Could not change file modification date",f.setLastModified(f.lastModified()-FILE_UTILS.getFileTimestampGranularity()*2))
6746 f.setLastModified(f.lastModified()-FILE_UTILS.getFileTimestampGranularity()*2)
6747 f.lastModified()
6748 FILE_UTILS.getFileTimestampGranularity()
6749 f.lastModified()
6750 buildRule.executeTarget("testOverwriteTrue")
6751 buildRule.getLog()
6752 containsString("Processing File")
6753 buildRule.getOutputDir()
6754 f.lastModified()
6755 buildRule.executeTarget("testSimpleScale")
6756 buildRule.getLog()
6757 containsString("Processing File")
6758 buildRule.getOutputDir()
6759 f.lastModified()
6760 buildRule.executeTarget("testOverwriteFalse")
6761 buildRule.getLog()
6762 containsString("Processing File")
6763 buildRule.getOutputDir()
6764 f.lastModified()
6765 buildRule.executeTarget("testSimpleScaleWithMapper")
6766 buildRule.getLog()
6767 containsString("Processing File")
6768 buildRule.getOutputDir()
6769 f.getAbsolutePath()
6770 f.exists()
6771 thrown.expect(RuntimeException.class)
6772 thrown.expectMessage(message)
6773 buildRule.executeTarget("testFailOnError")
6774 buildRule.getLog()
6775 containsString(message)
6776 System.getProperty("build.tests.value")
6777 buildRule.configureProject("src/etc/testcases/taskdefs/optional/jdepend/jdepend.xml")
6778 buildRule.executeTarget("simple")
6779 buildRule.getOutput()
6780 containsString("Package: org.apache.tools.ant.util.facade")
6781 buildRule.executeTarget("xml")
6782 buildRule.getOutput()
6783 containsString("<DependsUpon>")
6784 buildRule.executeTarget("fork")
6785 buildRule.getLog()
6786 containsString("Package: org.apache.tools.ant.util.facade")
6787 buildRule.executeTarget("fork-xml")
6788 buildRule.getLog()
6789 containsString("<DependsUpon>")
6790 buildRule.executeTarget("fork-timeout")
6791 buildRule.getLog()
6792 containsString("JDepend FAILED - Timed out")
6793 buildRule.executeTarget("fork-timeout-not")
6794 buildRule.getLog()
6795 containsString("Package: org.apache.tools.ant.util.facade")
6796 Arrays.asList(null,","," ,",", "," , ",",a"," ,a","  ,a","  , a","  ,a  ","  ,a  ,","ab,,cd","ab, ,cd","ab,  ,cd","ab,  ,cd,",",ab,  ,cd,","1","1a","1ab","1abc","1abc d","1abc de","1abc def","1abc def,",",1abc def")
6797 JUnitTest.parseTestMethodNamesList(argument)
6798 Arrays.asList(null,","," ,",", "," , ",",a"," ,a","  ,a","  , a","  ,a  ","  ,a  ,","ab,,cd","ab, ,cd","ab,  ,cd","ab,  ,cd,",",ab,  ,cd,","1","1a","1ab","1abc","1abc d","1abc de","1abc def","1abc def,",",1abc def")
6799 JUnitTest.parseTestMethodNamesList(argument)
6800 JAXPUtils.getDocumentBuilder()
6801 this.getClass()
6802 this.getClass().getClassLoader()
6803 this.getClass().getClassLoader().getResourceAsStream("taskdefs/optional/junit/matches.xml")
6804 db.parse(is)
6805 DOMUtil.listChildNodes(doc.getDocumentElement(),newFooNodeFilter(),true)
6806 doc.getDocumentElement()
6807 nl.getLength()
6808 node.getNodeName()
6809 node.getNodeName().equals("foo")
6810 Thread.currentThread()
6811 Thread.currentThread().getContextClassLoader()
6812 getClass()
6813 getClass().getClassLoader()
6814 buildRule.configureProject("src/etc/testcases/taskdefs/optional/junitreport.xml")
6815 buildRule.executeTarget("reports1")
6816 buildRule.getProject()
6817 buildRule.getProject().resolveFile("junitreport/test/html/junit-noframes.html")
6818 buildRule.getProject().resolveFile("junitreport/test/html/junit-noframes.html").exists()
6819 commonIndexFileAssertions()
6820 buildRule.getOutputDir()
6821 commonIndexFileAssertions(reportFile)
6822 buildRule.getOutputDir()
6823 commonIndexFileAssertions(reportFile)
6824 buildRule.executeTarget("testEmptyFile")
6825 buildRule.getLog()
6826 containsString(XMLResultAggregator.WARNING_EMPTY_FILE)
6827 buildRule.executeTarget("testIncompleteFile")
6828 buildRule.getLog()
6829 containsString(XMLResultAggregator.WARNING_IS_POSSIBLY_CORRUPTED)
6830 buildRule.executeTarget("testWrongElement")
6831 buildRule.getLog()
6832 containsString(XMLResultAggregator.WARNING_INVALID_ROOT_ELEMENT)
6833 buildRule.executeTarget("testStackTraceLineBreaks")
6834 buildRule.getOutputDir()
6835 FileUtils.readFully(r)
6836 containsString("junit.framework.AssertionFailedError: DOEG<br>")
6837 containsString("cur['line.separator'] = '\\r\\n';")
6838 buildRule.executeTarget("testSpecialSignsInSrcPath")
6839 commonIndexFileAssertions()
6840 buildRule.executeTarget("testSpecialSignsInHtmlPath")
6841 buildRule.getOutputDir()
6842 commonIndexFileAssertions(reportFile)
6843 buildRule.executeTarget("testWithStyleFromDir")
6844 commonIndexFileAssertions()
6845 buildRule.executeTarget("testNoFrames")
6846 buildRule.getOutputDir()
6847 commonIndexFileAssertions(reportFile)
6848 buildRule.executeTarget("testWithStyleFromDirAndXslImport")
6849 commonIndexFileAssertions()
6850 buildRule.executeTarget("testWithStyleFromClasspath")
6851 commonIndexFileAssertions()
6852 buildRule.executeTarget("testWithParams")
6853 buildRule.getLog()
6854 containsString("key1=value1,key2=value2")
6855 commonIndexFileAssertions()
6856 buildRule.executeTarget("testWithStyleFromClasspath")
6857 commonIndexFileAssertions()
6858 System.setSecurityManager(null)
6859 buildRule.executeTarget("testWithStyleFromClasspath")
6860 commonIndexFileAssertions()
6861 System.setSecurityManager(null)
6862 name.startsWith("META-INF/services/")
6863 super.getResourceAsStream(name)
6864 System.setSecurityManager(newSecurityManager(){publicvoidcheckPermission(Permissionperm){}})
6865 buildRule.executeTarget("testWithStyleFromClasspath")
6866 commonIndexFileAssertions()
6867 System.setSecurityManager(null)
6868 buildRule.executeTarget("testWithStyleFromClasspath")
6869 commonIndexFileAssertions()
6870 System.setSecurityManager(null)
6871 Thread.currentThread()
6872 Thread.currentThread().setContextClassLoader(orig)
6873 buildRule.configureProject("src/etc/testcases/taskdefs/optional/junit.xml")
6874 buildRule.executeTarget("crash")
6875 buildRule.getProject()
6876 buildRule.getProject().getProperty("crashed")
6877 buildRule.executeTarget("nocrash")
6878 buildRule.getProject()
6879 buildRule.getProject().getProperty("crashed")
6880 buildRule.executeTarget("timeout")
6881 buildRule.getProject()
6882 buildRule.getProject().getProperty("timeout")
6883 buildRule.executeTarget("notimeout")
6884 buildRule.getProject()
6885 buildRule.getProject().getProperty("timeout")
6886 buildRule.executeTarget("capture")
6887 buildRule.getLog()
6888 buildRule.getFullLog()
6889 buildRule.getProject()
6890 buildRule.getProject().setProperty("fork","true")
6891 testNonForkedCapture()
6892 buildRule.getOutput()
6893 buildRule.getError()
6894 JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_1_5)
6895 Class.forName("junit.framework.JUnit4TestAdapter")
6896 assumeTrue("Skipping test since it fails with JUnit 4",clazz==null)
6897 buildRule.getOutputDir()
6898 buildRule.getOutputDir()
6899 testDir.getAbsolutePath()
6900 testDir.exists()
6901 collectorFile.getAbsolutePath()
6902 collectorFile.exists()
6903 buildRule.executeTarget("failureRecorder.prepare")
6904 testDir.getAbsolutePath()
6905 testDir.exists()
6906 (newFile(testDir,"A.class")).exists()
6907 collectorFile.getAbsolutePath()
6908 collectorFile.exists()
6909 buildRule.executeTarget("failureRecorder.runtest")
6910 collectorFile.getAbsolutePath()
6911 collectorFile.exists()
6912 buildRule.executeTarget("A.test01")
6913 buildRule.getOutput()
6914 containsString("1st run: should run A.test01")
6915 buildRule.executeTarget("B.test05")
6916 buildRule.getOutput()
6917 containsString("1st run: should run B.test05")
6918 buildRule.executeTarget("B.test06")
6919 buildRule.getOutput()
6920 containsString("1st run: should run B.test06")
6921 buildRule.executeTarget("C.test07")
6922 buildRule.getOutput()
6923 containsString("1st run: should run C.test07")
6924 buildRule.executeTarget("C.test08")
6925 buildRule.getOutput()
6926 containsString("1st run: should run C.test08")
6927 buildRule.executeTarget("C.test09")
6928 buildRule.getOutput()
6929 containsString("1st run: should run C.test09")
6930 buildRule.executeTarget("A.test02")
6931 buildRule.getOutput()
6932 containsString("1st run: should run A.test02")
6933 buildRule.executeTarget("A.test03")
6934 buildRule.getOutput()
6935 containsString("1st run: should run A.test03")
6936 buildRule.executeTarget("B.test04")
6937 buildRule.getOutput()
6938 containsString("1st run: should run B.test04")
6939 buildRule.executeTarget("D.test10")
6940 buildRule.getOutput()
6941 containsString("1st run: should run D.test10")
6942 buildRule.executeTarget("failureRecorder.runtest")
6943 collectorFile.getAbsolutePath()
6944 collectorFile.exists()
6945 buildRule.executeTarget("A.test01")
6946 buildRule.getOutput()
6947 not(containsString("2nd run: should not run A.test01"))
6948 containsString("2nd run: should not run A.test01")
6949 buildRule.executeTarget("B.test05")
6950 buildRule.getOutput()
6951 not(containsString("2nd run: should not run A.test05"))
6952 containsString("2nd run: should not run A.test05")
6953 buildRule.executeTarget("B.test06")
6954 buildRule.getOutput()
6955 not(containsString("2nd run: should not run B.test06"))
6956 containsString("2nd run: should not run B.test06")
6957 buildRule.executeTarget("C.test07")
6958 buildRule.getOutput()
6959 not(containsString("2nd run: should not run C.test07"))
6960 containsString("2nd run: should not run C.test07")
6961 buildRule.executeTarget("C.test08")
6962 buildRule.getOutput()
6963 not(containsString("2nd run: should not run C.test08"))
6964 containsString("2nd run: should not run C.test08")
6965 buildRule.executeTarget("C.test09")
6966 buildRule.getOutput()
6967 not(containsString("2nd run: should not run C.test09"))
6968 containsString("2nd run: should not run C.test09")
6969 buildRule.executeTarget("A.test02")
6970 buildRule.getOutput()
6971 containsString("2nd run: should run A.test02")
6972 buildRule.executeTarget("A.test03")
6973 buildRule.getOutput()
6974 containsString("2nd run: should run A.test03")
6975 buildRule.executeTarget("B.test04")
6976 buildRule.getOutput()
6977 containsString("2nd run: should run B.test04")
6978 buildRule.executeTarget("D.test10")
6979 buildRule.getOutput()
6980 containsString("2nd run: should run D.test10")
6981 buildRule.executeTarget("failureRecorder.fixing")
6982 buildRule.executeTarget("failureRecorder.runtest")
6983 collectorFile.getAbsolutePath()
6984 collectorFile.exists()
6985 buildRule.executeTarget("A.test02")
6986 buildRule.getOutput()
6987 containsString("3rd run: should run A.test02")
6988 buildRule.executeTarget("A.test03")
6989 buildRule.getOutput()
6990 containsString("3rd run: should run A.test03")
6991 buildRule.executeTarget("B.test04")
6992 buildRule.getOutput()
6993 containsString("3rd run: should run B.test04")
6994 buildRule.executeTarget("D.test10")
6995 buildRule.getOutput()
6996 containsString("3rd run: should run D.test10")
6997 buildRule.executeTarget("failureRecorder.runtest")
6998 collectorFile.getAbsolutePath()
6999 collectorFile.exists()
7000 buildRule.executeTarget("B.test04")
7001 buildRule.getOutput()
7002 containsString("4th run: should run B.test04")
7003 buildRule.executeTarget("D.test10")
7004 buildRule.getOutput()
7005 containsString("4th run: should run D.test10")
7006 buildRule.executeTarget("testMultilineAssertsNoFork")
7007 buildRule.getLog()
7008 not(containsString("messaged up"))
7009 containsString("messaged up")
7010 buildRule.getLog()
7011 not(containsString("crashed)"))
7012 containsString("crashed)")
7013 buildRule.executeTarget("testMultilineAssertsFork")
7014 buildRule.getLog()
7015 not(containsString("messaged up"))
7016 containsString("messaged up")
7017 buildRule.getLog()
7018 not(containsString("crashed)"))
7019 containsString("crashed)")
7020 buildRule.executeTarget(target)
7021 buildRule.getOutputDir()
7022 newFile(buildRule.getOutputDir(),"TEST-org.apache.tools.ant."+"taskdefs.optional.junit."+classNameFragment+"Test"+ext).exists()
7023 not(containsString("print to System."))
7024 containsString("print to System.")
7025 buildRule.getOutputDir()
7026 reader.readLine()
7027 reader.readLine()
7028 startsWith("Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed:")
7029 reader.readLine()
7030 reader.readLine()
7031 reader.readLine()
7032 reader.readLine()
7033 reader.readLine()
7034 reader.readLine()
7035 reader.readLine()
7036 reader.readLine()
7037 reader.readLine()
7038 reader.readLine()
7039 reader.readLine()
7040 reader.readLine()
7041 startsWith("Testcase: testNoCrash took ")
7042 buildRule.executeTarget("testSkippableTests")
7043 DocumentBuilderFactory.newInstance()
7044 dbFactory.newDocumentBuilder()
7045 dBuilder.parse(newFile(buildRule.getOutputDir(),"TEST-org.example.junit.JUnit4Skippable.xml"))
7046 buildRule.getOutputDir()
7047 doc.getElementsByTagName("testcase")
7048 doc.getElementsByTagName("testcase").getLength()
7049 XPathFactory.newInstance()
7050 factory.newXPath()
7051 Integer.parseInt(xpath.compile("//testsuite/@skipped").evaluate(doc))
7052 xpath.compile("//testsuite/@skipped")
7053 xpath.compile("//testsuite/@skipped").evaluate(doc)
7054 Integer.parseInt(xpath.compile("//testsuite/@errors").evaluate(doc))
7055 xpath.compile("//testsuite/@errors")
7056 xpath.compile("//testsuite/@errors").evaluate(doc)
7057 Integer.parseInt(xpath.compile("//testsuite/@failures").evaluate(doc))
7058 xpath.compile("//testsuite/@failures")
7059 xpath.compile("//testsuite/@failures").evaluate(doc)
7060 Integer.parseInt(xpath.compile("//testsuite/@tests").evaluate(doc))
7061 xpath.compile("//testsuite/@tests")
7062 xpath.compile("//testsuite/@tests").evaluate(doc)
7063 xpath.compile("//testsuite/testcase[@name='explicitIgnoreTest']/skipped/@message")
7064 xpath.compile("//testsuite/testcase[@name='explicitIgnoreTest']/skipped/@message").evaluate(doc)
7065 xpath.compile("//testsuite/testcase[@name='explicitlyIgnoreTestNoMessage']/skipped")
7066 xpath.compile("//testsuite/testcase[@name='explicitlyIgnoreTestNoMessage']/skipped").evaluate(doc,XPathConstants.NODE)
7067 ((Node)xpath.compile("//testsuite/testcase[@name='explicitlyIgnoreTestNoMessage']/skipped").evaluate(doc,XPathConstants.NODE)).getAttributes()
7068 ((Node)xpath.compile("//testsuite/testcase[@name='explicitlyIgnoreTestNoMessage']/skipped").evaluate(doc,XPathConstants.NODE)).getAttributes().getLength()
7069 xpath.compile("//testsuite/testcase[@name='implicitlyIgnoreTest']/skipped/@message")
7070 xpath.compile("//testsuite/testcase[@name='implicitlyIgnoreTest']/skipped/@message").evaluate(doc)
7071 xpath.compile("//testsuite/testcase[@name='implicitlyIgnoreTestNoMessage']/skipped")
7072 xpath.compile("//testsuite/testcase[@name='implicitlyIgnoreTestNoMessage']/skipped").evaluate(doc,XPathConstants.NODE)
7073 buildRule.executeTarget("testTestMethods")
7074 buildRule.executeTarget("testNonTests")
7075 buildRule.getOutputDir()
7076 newFile(buildRule.getOutputDir(),"TEST-org.example.junit.NonTestMissed.xml").exists()
7077 buildRule.getOutputDir()
7078 newFile(buildRule.getOutputDir(),"TEST-org.example.junit.JUnit3TestMissed.xml").exists()
7079 buildRule.getOutputDir()
7080 newFile(buildRule.getOutputDir(),"TEST-org.example.junit.AbstractTestMissed.xml").exists()
7081 buildRule.getOutputDir()
7082 newFile(buildRule.getOutputDir(),"TEST-org.example.junit.AbstractJUnit3TestMissed.xml").exists()
7083 buildRule.getOutputDir()
7084 newFile(buildRule.getOutputDir(),"TEST-org.example.junit.AbstractTestNotMissed.xml").exists()
7085 buildRule.getOutputDir()
7086 newFile(buildRule.getOutputDir(),"TEST-org.example.junit.AbstractJUnit3TestNotMissed.xml").exists()
7087 buildRule.getOutputDir()
7088 newFile(buildRule.getOutputDir(),"TEST-org.example.junit.TestNotMissed.xml").exists()
7089 buildRule.getOutputDir()
7090 newFile(buildRule.getOutputDir(),"TEST-org.example.junit.JUnit3TestNotMissed.xml").exists()
7091 buildRule.getOutputDir()
7092 newFile(buildRule.getOutputDir(),"TEST-org.example.junit.TestWithSuiteNotMissed.xml").exists()
7093 buildRule.executeTarget("testNonTestsRun")
7094 buildRule.getOutputDir()
7095 newFile(buildRule.getOutputDir(),"TEST-org.example.junit.NonTestMissed.xml").exists()
7096 buildRule.getOutputDir()
7097 newFile(buildRule.getOutputDir(),"TEST-org.example.junit.JUnit3NonTestMissed.xml").exists()
7098 buildRule.getOutputDir()
7099 newFile(buildRule.getOutputDir(),"TEST-org.example.junit.TestNotMissed.xml").exists()
7100 buildRule.getOutputDir()
7101 newFile(buildRule.getOutputDir(),"TEST-org.example.junit.JUnit3TestNotMissed.xml").exists()
7102 buildRule.getOutputDir()
7103 newFile(buildRule.getOutputDir(),"TEST-org.example.junit.AbstractTestMissed.xml").exists()
7104 buildRule.getOutputDir()
7105 newFile(buildRule.getOutputDir(),"TEST-org.example.junit.AbstractTestNotMissed.xml").exists()
7106 buildRule.getOutputDir()
7107 newFile(buildRule.getOutputDir(),"TEST-org.example.junit.AbstractJUnit3TestMissed.xml").exists()
7108 buildRule.getOutputDir()
7109 newFile(buildRule.getOutputDir(),"TEST-org.example.junit.JUnit3NonTestMissed.xml").exists()
7110 buildRule.getOutputDir()
7111 newFile(buildRule.getOutputDir(),"TEST-org.example.junit.TestWithSuiteNotMissed.xml").exists()
7112 project.init()
7113 task.setProject(project)
7114 p.setPath("modules")
7115 task.createModulepath()
7116 task.createModulepath().add(p)
7117 task.addTest(newJUnitTest("org.apache.tools.ant.taskdefs.optional.junit.TestTest"))
7118 task.execute()
7119 project.init()
7120 task.setProject(project)
7121 p.setPath("modules")
7122 task.createUpgrademodulepath()
7123 task.createUpgrademodulepath().add(p)
7124 task.addTest(newJUnitTest("org.apache.tools.ant.taskdefs.optional.junit.TestTest"))
7125 task.execute()
7126 System.getProperty("java.io.tmpdir")
7127 String.format("%s_testJCP%d",getClass().getName(),System.currentTimeMillis()/1000)
7128 getClass()
7129 getClass().getName()
7130 System.currentTimeMillis()
7131 workDir.mkdirs()
7132 modulesDir.mkdirs()
7133 project.init()
7134 project.setBaseDir(workDir)
7135 project.addReference(MagicNames.ANT_VM_LAUNCHER_REF_ID,mockProcLauncher)
7136 task.setDir(workDir)
7137 task.setFork(true)
7138 task.setProject(project)
7139 LoaderUtils.getResourceSource(JUnitTask.class.getClassLoader(),"junit/framework/Test.class")
7140 JUnitTask.class.getClassLoader()
7141 cp.setPath(junit.getAbsolutePath())
7142 junit.getAbsolutePath()
7143 task.createClasspath()
7144 task.createClasspath().add(cp)
7145 mp.setPath(modulesDir.getName())
7146 modulesDir.getName()
7147 task.createModulepath()
7148 task.createModulepath().add(mp)
7149 task.addTest(newJUnitTest("org.apache.tools.ant.taskdefs.optional.junit.TestTest"))
7150 task.execute()
7151 "-classpath".equals(mockProcLauncher.cmd[i])
7152 "--module-path".equals(mockProcLauncher.cmd[i])
7153 mockProcLauncher.cmd[i].equals("--add-exports")
7154 resExports.add(mockProcLauncher.cmd[++i])
7155 JUnitTestRunner.class.getName()
7156 JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])
7157 resExports.isEmpty()
7158 project.getProperty(MagicNames.BUILD_SYSCLASSPATH)
7159 System.getProperty(MagicNames.BUILD_SYSCLASSPATH)
7160 cp.toString()
7161 mp.toString()
7162 delete(workDir)
7163 System.getProperty("java.io.tmpdir")
7164 String.format("%s_testJMP%d",getClass().getName(),System.currentTimeMillis()/1000)
7165 getClass()
7166 getClass().getName()
7167 System.currentTimeMillis()
7168 workDir.mkdirs()
7169 modulesDir.mkdirs()
7170 project.init()
7171 project.setBaseDir(workDir)
7172 project.addReference(MagicNames.ANT_VM_LAUNCHER_REF_ID,mockProcLauncher)
7173 task.setDir(workDir)
7174 task.setFork(true)
7175 task.setProject(project)
7176 LoaderUtils.getResourceSource(JUnitTask.class.getClassLoader(),"junit/framework/Test.class")
7177 JUnitTask.class.getClassLoader()
7178 mp.add(newPath(project,junit.getAbsolutePath()))
7179 junit.getAbsolutePath()
7180 mp.add(newPath(project,modulesDir.getName()))
7181 modulesDir.getName()
7182 task.createModulepath()
7183 task.createModulepath().add(mp)
7184 task.addTest(newJUnitTest("org.apache.tools.ant.taskdefs.optional.junit.TestTest"))
7185 task.execute()
7186 "-classpath".equals(mockProcLauncher.cmd[i])
7187 "--module-path".equals(mockProcLauncher.cmd[i])
7188 mockProcLauncher.cmd[i].equals("--add-exports")
7189 resExports.add(mockProcLauncher.cmd[++i])
7190 JUnitTestRunner.class.getName()
7191 JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])
7192 resExports.isEmpty()
7193 project.getProperty(MagicNames.BUILD_SYSCLASSPATH)
7194 System.getProperty(MagicNames.BUILD_SYSCLASSPATH)
7195 mp.toString()
7196 delete(workDir)
7197 LoaderUtils.classNameToResource(Project.class.getName())
7198 Project.class.getName()
7199 LoaderUtils.getResourceSource(Project.class.getClassLoader(),projectResourceName)
7200 Project.class.getClassLoader()
7201 LoaderUtils.classNameToResource(junit.framework.Test.class.getName())
7202 junit.framework.Test.class.getName()
7203 LoaderUtils.getResourceSource(Project.class.getClassLoader(),testResourceName)
7204 Project.class.getClassLoader()
7205 buildRule.getProject()
7206 buildRule.getProject().setProperty("antclasses",antclasses.getAbsolutePath())
7207 antclasses.getAbsolutePath()
7208 buildRule.getProject()
7209 buildRule.getProject().setProperty("junitjar",junitJar.getAbsolutePath())
7210 junitJar.getAbsolutePath()
7211 setupCheckDuplicateTest()
7212 buildRule.executeTarget("testCheckForkedPath")
7213 buildRule.getLog()
7214 containsString("WARNING: multiple versions of ant detected in path for junit")
7215 setupCheckDuplicateTest()
7216 buildRule.getProject()
7217 buildRule.getProject().setProperty("includeantruntime","no")
7218 buildRule.executeTarget("testCheckForkedPath")
7219 buildRule.getLog()
7220 not(containsString("WARNING: multiple versions of ant detected in path for junit"))
7221 containsString("WARNING: multiple versions of ant detected in path for junit")
7222 f.isDirectory()
7223 f.listFiles()
7224 Arrays.stream(clds)
7225 Arrays.stream(clds).forEach(this::delete)
7226 f.delete()
7227 Arrays.copyOf(cmd,cmd.length)
7228 exitValue()
7229 buildRule.configureProject("src/etc/testcases/taskdefs/optional/junit.xml")
7230 buildRule.getProject()
7231 buildRule.getProject().setProperty("enableEvents","true")
7232 buildRule.executeTarget(PASS_TEST_TARGET)
7233 buildRule.getFullLog()
7234 containsString(JUnitTask.TESTLISTENER_PREFIX)
7235 buildRule.getProject()
7236 buildRule.getProject().setProperty("enableEvents","true")
7237 buildRule.executeTarget(PASS_TEST_TARGET)
7238 buildRule.getLog()
7239 not(containsString(JUnitTask.TESTLISTENER_PREFIX))
7240 containsString(JUnitTask.TESTLISTENER_PREFIX)
7241 buildRule.getProject()
7242 buildRule.getProject().setProperty("enableEvents","true")
7243 buildRule.executeTarget(PASS_TEST_TARGET)
7244 buildRule.getFullLog()
7245 containsString(JUnitTask.TESTLISTENER_PREFIX+"tests to run: ")
7246 buildRule.getProject()
7247 buildRule.getProject().setProperty("enableEvents","true")
7248 buildRule.executeTarget(PASS_TEST_TARGET)
7249 buildRule.getFullLog()
7250 containsString(JUnitTask.TESTLISTENER_PREFIX+"startTest("+PASS_TEST+")")
7251 buildRule.getProject()
7252 buildRule.getProject().setProperty("enableEvents","true")
7253 buildRule.executeTarget(PASS_TEST_TARGET)
7254 buildRule.getFullLog()
7255 containsString(JUnitTask.TESTLISTENER_PREFIX+"endTest("+PASS_TEST+")")
7256 buildRule.executeTarget(PASS_TEST_TARGET)
7257 buildRule.getFullLog()
7258 not(containsString(JUnitTask.TESTLISTENER_PREFIX))
7259 containsString(JUnitTask.TESTLISTENER_PREFIX)
7260 buildRule.getProject()
7261 buildRule.getProject().setProperty(JUnitTask.ENABLE_TESTLISTENER_EVENTS,"true")
7262 buildRule.executeTarget(PASS_TEST_TARGET)
7263 buildRule.getFullLog()
7264 containsString(JUnitTask.TESTLISTENER_PREFIX)
7265 buildRule.getProject()
7266 buildRule.getProject().setProperty(JUnitTask.ENABLE_TESTLISTENER_EVENTS,"false")
7267 buildRule.getProject()
7268 buildRule.getProject().setProperty("enableEvents","true")
7269 buildRule.executeTarget(PASS_TEST_TARGET)
7270 buildRule.getFullLog()
7271 not(containsString(JUnitTask.TESTLISTENER_PREFIX))
7272 containsString(JUnitTask.TESTLISTENER_PREFIX)
7273 createRunnerForTestMethod(ValidMethodTestCase.class,"testA")
7274 runner.run()
7275 runner.getFormatter()
7276 runner.getFormatter().getError()
7277 runner.getRetCode()
7278 createRunnerForTestMethod(InvalidMethodTestCase.class,"testInvalid")
7279 runner.run()
7280 runner.getFormatter()
7281 runner.getFormatter().getError()
7282 runner.getRetCode()
7283 createRunner(NoSuiteTestCase.class)
7284 runner.run()
7285 runner.getFormatter()
7286 runner.getFormatter().getError()
7287 runner.getRetCode()
7288 createRunner(SuiteTestCase.class)
7289 runner.run()
7290 runner.getFormatter()
7291 runner.getFormatter().getError()
7292 runner.getRetCode()
7293 createRunner(InvalidSuiteTestCase.class)
7294 runner.run()
7295 runner.getFormatter()
7296 runner.getFormatter().getError()
7297 runner.getRetCode()
7298 containsString("thrown on purpose")
7299 createRunner(NoTestCase.class)
7300 runner.run()
7301 runner.getRetCode()
7302 createRunner(NoTestCase.class,true)
7303 runner.run()
7304 runner.getFormatter()
7305 runner.getFormatter().getError()
7306 runner.getRetCode()
7307 createRunner(NoTestCaseStaticInitializerError.class,true)
7308 runner.run()
7309 runner.getFormatter()
7310 runner.getFormatter().getError()
7311 runner.getRetCode()
7312 createRunner(StaticInitializerErrorTestCase.class)
7313 runner.run()
7314 runner.getRetCode()
7315 createRunner(InvalidTestCase.class)
7316 runner.run()
7317 runner.getRetCode()
7318 createRunnerForTestMethod(AssertionErrorTest.class,"throwsAssertionError")
7319 runner.run()
7320 runner.getFormatter()
7321 runner.getFormatter().getFailure()
7322 failure.getMessage()
7323 failure.getCause()
7324 cause.getClass()
7325 cause.getMessage()
7326 clazz.getName()
7327 clazz.getName()
7328 clazz.getName()
7329 super(test,methods,haltonerror,filtertrace,haltonfailure,false,false,TestRunner.class.getClassLoader())
7330 TestRunner.class.getClassLoader()
7331 addFormatter(formatter)
7332 error.printStackTrace(newPrintWriter(sw))
7333 sw.toString()
7334 error()
7335 super(name)
7336 super(name)
7337 super(name)
7338 super(name)
7339 super(name)
7340 super(name)
7341 super(name)
7342 super(name)
7343 super(name)
7344 super(name)
7345 JUnitVersionHelper.getTestCaseName(JUnit4TestAdapterCache.getDefault().asTest(Description.createTestDescription(JUnitVersionHelperTest.class,"testMyOwnName")))
7346 JUnit4TestAdapterCache.getDefault()
7347 JUnit4TestAdapterCache.getDefault().asTest(Description.createTestDescription(JUnitVersionHelperTest.class,"testMyOwnName"))
7348 Description.createTestDescription(JUnitVersionHelperTest.class,"testMyOwnName")
7349 JUnitVersionHelper.getTestCaseName(newFoo1())
7350 JUnitVersionHelper.getTestCaseName(newFoo2())
7351 JUnitVersionHelper.getTestCaseName(newFoo3())
7352 JUnitVersionHelper.getTestCaseName(newFoo4())
7353 JUnitVersionHelper.getTestCaseName(null)
7354 JUnitVersionHelper.getTestCaseName(newFoo5())
7355 super(name)
7356 buildRule.configureProject("src/etc/testcases/taskdefs/optional/junit/teardownlistener.xml")
7357 buildRule.executeTarget("testNoTeardown")
7358 buildRule.getProject()
7359 buildRule.getProject().getProperty("error")
7360 buildRule.getOutput()
7361 not(containsString("tearDown called on Timeout"))
7362 containsString("tearDown called on Timeout")
7363 buildRule.executeTarget("testTeardown")
7364 buildRule.getProject()
7365 buildRule.getProject().getProperty("error")
7366 buildRule.getOutput()
7367 containsString("tearDown called on Timeout")
7368 task.execute()
7369 newFile(d,"index.html").isFile()
7370 task.execute()
7371 newFile(d,"index.html").isFile()
7372 buildRule.configureProject("src/etc/testcases/taskdefs/optional/junitlauncher.xml")
7373 setupTrackerProperty(targetName)
7374 buildRule.executeTarget(targetName)
7375 Assert.fail(targetName+" was expected to fail")
7376 verifyFailed(trackerFile,AlwaysFailingJUnit4Test.class.getName(),"testWillFail")
7377 AlwaysFailingJUnit4Test.class.getName()
7378 setupTrackerProperty(targetName)
7379 buildRule.executeTarget(targetName)
7380 wasTestRun(trackerFile,AlwaysFailingJUnit4Test.class.getName(),"testWillFail")
7381 AlwaysFailingJUnit4Test.class.getName()
7382 verifyFailed(trackerFile,AlwaysFailingJUnit4Test.class.getName(),"testWillFail")
7383 AlwaysFailingJUnit4Test.class.getName()
7384 setupTrackerProperty(targetName)
7385 buildRule.executeTarget(targetName)
7386 wasTestRun(trackerFile,JUnit4SampleTest.class.getName())
7387 JUnit4SampleTest.class.getName()
7388 verifySuccess(trackerFile,JUnit4SampleTest.class.getName(),"testFoo")
7389 JUnit4SampleTest.class.getName()
7390 setupTrackerProperty(targetSpecificMethod)
7391 buildRule.executeTarget(targetSpecificMethod)
7392 wasTestRun(tracker1,JUnit4SampleTest.class.getName(),"testBar")
7393 JUnit4SampleTest.class.getName()
7394 wasTestRun(tracker1,JUnit4SampleTest.class.getName(),"testFoo")
7395 JUnit4SampleTest.class.getName()
7396 setupTrackerProperty(targetMultipleMethods)
7397 buildRule.executeTarget(targetMultipleMethods)
7398 wasTestRun(tracker2,JUnit4SampleTest.class.getName(),"testFooBar")
7399 JUnit4SampleTest.class.getName()
7400 wasTestRun(tracker2,JUnit4SampleTest.class.getName(),"testFoo")
7401 JUnit4SampleTest.class.getName()
7402 wasTestRun(tracker2,JUnit4SampleTest.class.getName(),"testBar")
7403 JUnit4SampleTest.class.getName()
7404 setupTrackerProperty(targetName+"-1")
7405 setupTrackerProperty(targetName+"-2")
7406 buildRule.executeTarget(targetName)
7407 wasTestRun(trackerFile1,AlwaysFailingJUnit4Test.class.getName(),"testWillFail")
7408 AlwaysFailingJUnit4Test.class.getName()
7409 wasTestRun(trackerFile2,JUnit4SampleTest.class.getName(),"testFoo")
7410 JUnit4SampleTest.class.getName()
7411 setupTrackerProperty(targetName)
7412 buildRule.executeTarget(targetName)
7413 verifySuccess(trackerFile,JUnit4SampleTest.class.getName(),"testFoo")
7414 JUnit4SampleTest.class.getName()
7415 verifyFailed(trackerFile,AlwaysFailingJUnit4Test.class.getName(),"testWillFail")
7416 AlwaysFailingJUnit4Test.class.getName()
7417 verifySuccess(trackerFile,JupiterSampleTest.class.getName(),"testSucceeds")
7418 JupiterSampleTest.class.getName()
7419 verifyFailed(trackerFile,JupiterSampleTest.class.getName(),"testFails")
7420 JupiterSampleTest.class.getName()
7421 verifySkipped(trackerFile,JupiterSampleTest.class.getName(),"testSkipped")
7422 JupiterSampleTest.class.getName()
7423 wasTestRun(trackerFile,ForkedTest.class.getName())
7424 ForkedTest.class.getName()
7425 setupTrackerProperty(targetName)
7426 System.setProperty(ForkedTest.SYS_PROP_ONE,"dummy")
7427 buildRule.executeTarget(targetName)
7428 System.getProperty(ForkedTest.SYS_PROP_ONE)
7429 verifySuccess(trackerFile,ForkedTest.class.getName(),"testSysProp")
7430 ForkedTest.class.getName()
7431 buildRule.executeTarget(targetName)
7432 Assert.fail(targetName+" was expected to fail since JUnit platform libraries "+"weren't included in the classpath of the forked JVM")
7433 ClassNotFoundException.class.getName()
7434 buildRule.getFullLog()
7435 buildRule.getFullLog().contains(cnfeMessage)
7436 buildRule.getFullLog()
7437 buildRule.getFullLog().contains(exclusionLogMsg)
7438 buildRule.executeTarget(targetName)
7439 Assert.fail(targetName+" was expected to fail since Ant runtime libraries "+"weren't included in the classpath of the forked JVM")
7440 StandaloneLauncher.class.getName()
7441 buildRule.getFullLog()
7442 buildRule.getFullLog().contains(missingMainClass)
7443 buildRule.getFullLog()
7444 buildRule.getFullLog().contains(exclusionLogMsg)
7445 setupTrackerProperty(targetName)
7446 buildRule.executeTarget(targetName)
7447 buildRule.getFullLog()
7448 buildRule.getFullLog().contains(exclusionLogMsg)
7449 verifySuccess(trackerFile,JupiterSampleTest.class.getName(),"testSucceeds")
7450 JupiterSampleTest.class.getName()
7451 verifyFailed(trackerFile,JupiterSampleTest.class.getName(),"testFails")
7452 JupiterSampleTest.class.getName()
7453 setupTrackerProperty(targetName)
7454 setupRuntimeClassesProperty()
7455 buildRule.executeTarget(targetName)
7456 buildRule.getFullLog()
7457 buildRule.getFullLog().contains(exclusionLogMsg)
7458 verifySuccess(trackerFile,JupiterSampleTest.class.getName(),"testSucceeds")
7459 JupiterSampleTest.class.getName()
7460 verifyFailed(trackerFile,JupiterSampleTest.class.getName(),"testFails")
7461 JupiterSampleTest.class.getName()
7462 verifyFailed(trackerFile,AlwaysFailingJUnit4Test.class.getName(),"testWillFail")
7463 AlwaysFailingJUnit4Test.class.getName()
7464 verifySuccess(trackerFile,ForkedTest.class.getName(),"testSysProp")
7465 ForkedTest.class.getName()
7466 setupTrackerProperty(targetName)
7467 setupRuntimeClassesProperty()
7468 buildRule.executeTarget(targetName)
7469 buildRule.getFullLog()
7470 buildRule.getFullLog().contains("Excluding Ant runtime libraries")
7471 buildRule.getFullLog()
7472 buildRule.getFullLog().contains("Excluding JUnit platform libraries")
7473 verifySuccess(trackerFile,JUnit4SampleTest.class.getName(),"testBar")
7474 JUnit4SampleTest.class.getName()
7475 setupTrackerProperty(target)
7476 buildRule.executeTarget(target)
7477 wasTestRun(tracker2,JupiterSampleTest.class.getName(),"testMethodIncludeTagisExecuted")
7478 JupiterSampleTest.class.getName()
7479 wasTestRun(tracker2,JupiterSampleTest.class.getName(),"testMethodIncludeTagisNotExecuted")
7480 JupiterSampleTest.class.getName()
7481 setupTrackerProperty(target)
7482 buildRule.executeTarget(target)
7483 wasTestRun(tracker2,JupiterSampleTest.class.getName(),"testMethodIncludeTagisExecuted")
7484 JupiterSampleTest.class.getName()
7485 wasTestRun(tracker2,JupiterSampleTest.class.getName(),"testMethodIncludeTagisNotExecuted")
7486 JupiterSampleTest.class.getName()
7487 setupTrackerProperty(target+"1")
7488 setupTrackerProperty(target+"2")
7489 buildRule.executeTarget(target)
7490 wasTestRun(tracker1,JupiterSampleTest.class.getName(),"testMethodIncludeTagisExecuted")
7491 JupiterSampleTest.class.getName()
7492 wasTestRun(tracker1,JupiterSampleTest.class.getName(),"testMethodIncludeTagisNotExecuted")
7493 JupiterSampleTest.class.getName()
7494 wasTestRun(tracker2,JupiterTagSampleTest.class.getName(),"testMethodIncludeTagisExecutedTagSampleTest")
7495 JupiterTagSampleTest.class.getName()
7496 wasTestRun(tracker2,JupiterTagSampleTest.class.getName(),"testMethodIncludeTagisNotExecutedTagSampleTest")
7497 JupiterTagSampleTest.class.getName()
7498 wasTestRun(tracker2,JupiterTagSampleTest.class.getName(),"testMethodIncludeTagisNotExecutedTagSampleTest2")
7499 JupiterTagSampleTest.class.getName()
7500 setupTrackerProperty(targetName)
7501 buildRule.executeTarget(targetName)
7502 Assert.fail(targetName+" was expected to fail")
7503 verifySetupFailed(trackerFile,JupiterSampleTestFailingBeforeAll.class.getName())
7504 JupiterSampleTestFailingBeforeAll.class.getName()
7505 setupTrackerProperty(targetName)
7506 buildRule.executeTarget(targetName)
7507 verifySetupFailed(trackerFile,JupiterSampleTestFailingBeforeAll.class.getName())
7508 JupiterSampleTestFailingBeforeAll.class.getName()
7509 setupTrackerProperty(target)
7510 buildRule.executeTarget(target)
7511 wasTestRun(tracker,JupiterSampleTest.class.getName(),"testMethodIncludeTagisExecuted")
7512 JupiterSampleTest.class.getName()
7513 wasTestRun(tracker,JupiterSampleTest.class.getName(),"testMethodIncludeTagisNotExecuted")
7514 JupiterSampleTest.class.getName()
7515 wasTestRun(tracker,JupiterTagSampleTest.class.getName(),"testMethodIncludeTagisExecutedTagSampleTest")
7516 JupiterTagSampleTest.class.getName()
7517 wasTestRun(tracker,JupiterTagSampleTest.class.getName(),"testMethodIncludeTagisNotExecutedTagSampleTest")
7518 JupiterTagSampleTest.class.getName()
7519 wasTestRun(tracker,JupiterTagSampleTest.class.getName(),"testMethodIncludeTagisNotExecutedTagSampleTest2")
7520 JupiterTagSampleTest.class.getName()
7521 setupTrackerProperty(target)
7522 buildRule.executeTarget(target)
7523 wasTestRun(tracker,JupiterSampleTest.class.getName(),"testMethodIncludeTagisExecuted")
7524 JupiterSampleTest.class.getName()
7525 wasTestRun(tracker,JupiterSampleTest.class.getName(),"testMethodIncludeTagisNotExecuted")
7526 JupiterSampleTest.class.getName()
7527 wasTestRun(tracker,JupiterTagSampleTest.class.getName(),"testMethodIncludeTagisExecutedTagSampleTest")
7528 JupiterTagSampleTest.class.getName()
7529 wasTestRun(tracker,JupiterTagSampleTest.class.getName(),"testMethodIncludeTagisNotExecutedTagSampleTest")
7530 JupiterTagSampleTest.class.getName()
7531 wasTestRun(tracker,JupiterTagSampleTest.class.getName(),"testMethodIncludeTagisNotExecutedTagSampleTest2")
7532 JupiterTagSampleTest.class.getName()
7533 Files.deleteIfExists(tracker)
7534 buildRule.getProject()
7535 buildRule.getProject().setProperty(targetName+".tracker",filename)
7536 buildRule.getProject()
7537 buildRule.getProject().getProperty("output.dir")
7538 Paths.get(outputDir,filename)
7539 LoaderUtils.classNameToResource(Project.class.getName())
7540 Project.class.getName()
7541 LoaderUtils.getResourceSource(Project.class.getClassLoader(),projectResourceName)
7542 Project.class.getClassLoader()
7543 buildRule.getProject()
7544 buildRule.getProject().setProperty("ant.runtime.classes.original.path",antClassesPath.getAbsolutePath())
7545 antClassesPath.getAbsolutePath()
7546 buildRule.configureProject("src/etc/testcases/taskdefs/optional/net/ftp.xml")
7547 buildRule.getProject()
7548 project.executeTarget("setup")
7549 project.getProperty("tmp.dir")
7550 project.getProperty("ftp.filesep")
7551 myFTPTask.setSeparator(ftpFileSep)
7552 myFTPTask.setProject(project)
7553 myFTPTask.resolveFile(tmpDir)
7554 project.getProperty("ftp.host")
7555 Integer.parseInt(project.getProperty("ftp.port"))
7556 project.getProperty("ftp.port")
7557 project.getProperty("ftp.user")
7558 project.getProperty("ftp.password")
7559 ftp.connect(remoteHost,port)
7560 ftp.login(remoteUser,password)
7561 ftp.disconnect()
7562 buildRule.getProject()
7563 buildRule.getProject().executeTarget("cleanup")
7564 ftp.cwd(remoteDir)
7565 System.out.println("could not change directory to "+remoteTmpDir)
7566 assumeTrue(loginFailureMessage,loginSucceeded)
7567 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7568 changeRemoteDir(remoteTmpDir)
7569 myFTPTask.newScanner(ftp)
7570 ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
7571 buildRule.getProject()
7572 buildRule.getProject().getBaseDir()
7573 ds.setIncludes(newString[]{"alpha"})
7574 ds.scan()
7575 compareFiles(ds,newString[]{},newString[]{"alpha"})
7576 assumeTrue(loginFailureMessage,loginSucceeded)
7577 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7578 changeRemoteDir(remoteTmpDir)
7579 myFTPTask.newScanner(ftp)
7580 ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
7581 buildRule.getProject()
7582 buildRule.getProject().getBaseDir()
7583 ds.setIncludes(newString[]{"alpha/"})
7584 ds.scan()
7585 compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
7586 assumeTrue(loginFailureMessage,loginSucceeded)
7587 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7588 changeRemoteDir(remoteTmpDir)
7589 myFTPTask.newScanner(ftp)
7590 ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
7591 buildRule.getProject()
7592 buildRule.getProject().getBaseDir()
7593 ds.scan()
7594 compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
7595 assumeTrue(loginFailureMessage,loginSucceeded)
7596 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7597 changeRemoteDir(remoteTmpDir)
7598 myFTPTask.newScanner(ftp)
7599 ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
7600 buildRule.getProject()
7601 buildRule.getProject().getBaseDir()
7602 ds.setIncludes(newString[]{"alpha/beta/gamma/GAMMA.XML"})
7603 ds.scan()
7604 compareFiles(ds,newString[]{},newString[]{})
7605 assumeTrue(loginFailureMessage,loginSucceeded)
7606 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7607 changeRemoteDir(remoteTmpDir)
7608 myFTPTask.newScanner(ftp)
7609 ds.setCaseSensitive(false)
7610 ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
7611 buildRule.getProject()
7612 buildRule.getProject().getBaseDir()
7613 ds.setIncludes(newString[]{"alpha/beta/gamma/GAMMA.XML"})
7614 ds.scan()
7615 compareFiles(ds,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{})
7616 assumeTrue(loginFailureMessage,loginSucceeded)
7617 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7618 changeRemoteDir(remoteTmpDir)
7619 myFTPTask.newScanner(ftp)
7620 ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
7621 buildRule.getProject()
7622 buildRule.getProject().getBaseDir()
7623 ds.setIncludes(newString[]{"ALPHA/"})
7624 ds.setCaseSensitive(false)
7625 ds.scan()
7626 compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
7627 assumeTrue(loginFailureMessage,loginSucceeded)
7628 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7629 changeRemoteDir(remoteTmpDir)
7630 myFTPTask.newScanner(ftp)
7631 ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
7632 buildRule.getProject()
7633 buildRule.getProject().getBaseDir()
7634 ds.setIncludes(newString[]{"alpha/BETA/gamma/"})
7635 ds.setCaseSensitive(false)
7636 ds.scan()
7637 compareFiles(ds,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{"alpha/beta/gamma"})
7638 buildRule.executeTarget("ftp-get-with-selector")
7639 buildRule.getLog()
7640 containsString("selectors are not supported in remote filesets")
7641 buildRule.getProject()
7642 buildRule.getProject().getReference("fileset-destination-without-selector")
7643 fsDestination.getDirectoryScanner(buildRule.getProject())
7644 buildRule.getProject()
7645 dsDestination.scan()
7646 dsDestination.getIncludedDirectories()
7647 dsDestination.getIncludedFiles()
7648 sortedDestinationDirectories[counter].replace(File.separatorChar,'/')
7649 sortedDestinationFiles[counter].replace(File.separatorChar,'/')
7650 buildRule.getProject()
7651 buildRule.getProject().getReference("fileset-source-without-selector")
7652 fsSource.getDirectoryScanner(buildRule.getProject())
7653 buildRule.getProject()
7654 dsSource.scan()
7655 compareFiles(dsSource,sortedDestinationFiles,sortedDestinationDirectories)
7656 assumeTrue("System does not support Symlinks",supportsSymlinks)
7657 assumeTrue(loginFailureMessage,loginSucceeded)
7658 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7659 changeRemoteDir(remoteTmpDir)
7660 buildRule.getProject()
7661 buildRule.getProject().executeTarget("ftp-get-directory-symbolic-link")
7662 buildRule.getProject()
7663 buildRule.getProject().getReference("fileset-destination-without-selector")
7664 fsDestination.getDirectoryScanner(buildRule.getProject())
7665 buildRule.getProject()
7666 dsDestination.scan()
7667 compareFiles(dsDestination,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
7668 assumeTrue("System does not support Symlinks",supportsSymlinks)
7669 assumeTrue(loginFailureMessage,loginSucceeded)
7670 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7671 changeRemoteDir(remoteTmpDir)
7672 buildRule.getProject()
7673 buildRule.getProject().executeTarget("ftp-get-directory-no-symbolic-link")
7674 buildRule.getProject()
7675 buildRule.getProject().getReference("fileset-destination-without-selector")
7676 fsDestination.getDirectoryScanner(buildRule.getProject())
7677 buildRule.getProject()
7678 dsDestination.scan()
7679 compareFiles(dsDestination,newString[]{},newString[]{})
7680 assumeTrue("System does not support Symlinks",supportsSymlinks)
7681 assumeTrue(loginFailureMessage,loginSucceeded)
7682 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7683 changeRemoteDir(remoteTmpDir)
7684 buildRule.getProject()
7685 buildRule.getProject().executeTarget("symlink-setup")
7686 myFTPTask.newScanner(ftp)
7687 ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
7688 buildRule.getProject()
7689 buildRule.getProject().getBaseDir()
7690 ds.setIncludes(newString[]{"alpha/beta/gamma/"})
7691 ds.setFollowSymlinks(true)
7692 ds.scan()
7693 compareFiles(ds,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{"alpha/beta/gamma"})
7694 assumeTrue("System does not support Symlinks",supportsSymlinks)
7695 assumeTrue(loginFailureMessage,loginSucceeded)
7696 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7697 changeRemoteDir(remoteTmpDir)
7698 buildRule.getProject()
7699 buildRule.getProject().executeTarget("symlink-setup")
7700 myFTPTask.newScanner(ftp)
7701 ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
7702 buildRule.getProject()
7703 buildRule.getProject().getBaseDir()
7704 ds.setIncludes(newString[]{"alpha/beta/gamma/"})
7705 ds.setFollowSymlinks(false)
7706 ds.scan()
7707 compareFiles(ds,newString[]{},newString[]{})
7708 assumeTrue("System does not support Symlinks",supportsSymlinks)
7709 assumeTrue(loginFailureMessage,loginSucceeded)
7710 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7711 changeRemoteDir(remoteTmpDir)
7712 buildRule.getProject()
7713 buildRule.getProject().executeTarget("symlink-file-setup")
7714 myFTPTask.newScanner(ftp)
7715 ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
7716 buildRule.getProject()
7717 buildRule.getProject().getBaseDir()
7718 ds.setIncludes(newString[]{"alpha/beta/gamma/"})
7719 ds.setFollowSymlinks(true)
7720 ds.scan()
7721 compareFiles(ds,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{"alpha/beta/gamma"})
7722 assumeTrue(loginFailureMessage,loginSucceeded)
7723 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7724 changeRemoteDir(remoteTmpDir)
7725 myFTPTask.newScanner(ftp)
7726 ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
7727 buildRule.getProject()
7728 buildRule.getProject().getBaseDir()
7729 ds.setIncludes(newString[]{"alpha/be?a/**","alpha/beta/gamma/"})
7730 ds.scan()
7731 compareFiles(ds,expectedFiles,expectedDirectories)
7732 myFTPTask.newScanner(ftp)
7733 ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
7734 buildRule.getProject()
7735 buildRule.getProject().getBaseDir()
7736 ds.setIncludes(newString[]{"alpha/beta/gamma/","alpha/be?a/**"})
7737 ds.scan()
7738 compareFiles(ds,expectedFiles,expectedDirectories)
7739 assumeTrue(loginFailureMessage,loginSucceeded)
7740 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7741 changeRemoteDir(remoteTmpDir)
7742 myFTPTask.newScanner(ftp)
7743 ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
7744 buildRule.getProject()
7745 buildRule.getProject().getBaseDir()
7746 ds.setIncludes(newString[]{"alpha/","ALPHA/"})
7747 ds.scan()
7748 compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
7749 assumeTrue(loginFailureMessage,loginSucceeded)
7750 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7751 changeRemoteDir(remoteTmpDir)
7752 myFTPTask.newScanner(ftp)
7753 ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
7754 buildRule.getProject()
7755 buildRule.getProject().getBaseDir()
7756 ds.setIncludes(newString[]{"alpha/","ALPHA/"})
7757 ds.setCaseSensitive(false)
7758 ds.scan()
7759 compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
7760 assumeTrue(loginFailureMessage,loginSucceeded)
7761 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7762 changeRemoteDir(remoteTmpDir)
7763 myFTPTask.newScanner(ftp)
7764 ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
7765 buildRule.getProject()
7766 buildRule.getProject().getBaseDir()
7767 ds.setIncludes(newString[]{"alpha/beta/gamma/gamma.xml","alpha/beta/gamma/GAMMA.XML"})
7768 ds.scan()
7769 compareFiles(ds,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{})
7770 assumeTrue(loginFailureMessage,loginSucceeded)
7771 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7772 changeRemoteDir(remoteTmpDir)
7773 myFTPTask.newScanner(ftp)
7774 ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
7775 buildRule.getProject()
7776 buildRule.getProject().getBaseDir()
7777 ds.setIncludes(newString[]{"alpha/beta/gamma/gamma.xml","alpha/beta/gamma/GAMMA.XML"})
7778 ds.setCaseSensitive(false)
7779 ds.scan()
7780 compareFiles(ds,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{})
7781 assumeTrue(loginFailureMessage,loginSucceeded)
7782 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7783 changeRemoteDir(remoteTmpDir)
7784 myFTPTask.newScanner(ftp)
7785 ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
7786 buildRule.getProject()
7787 buildRule.getProject().getBaseDir()
7788 ds.setIncludes(newString[]{"alpha/","ALPHA/beta/"})
7789 ds.scan()
7790 compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
7791 assumeTrue(loginFailureMessage,loginSucceeded)
7792 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7793 changeRemoteDir(remoteTmpDir)
7794 myFTPTask.newScanner(ftp)
7795 ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
7796 buildRule.getProject()
7797 buildRule.getProject().getBaseDir()
7798 ds.setIncludes(newString[]{"alpha/","ALPHA/beta/"})
7799 ds.setCaseSensitive(false)
7800 ds.scan()
7801 compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml"},newString[]{"alpha","alpha/beta","alpha/beta/gamma"})
7802 assumeTrue(loginFailureMessage,loginSucceeded)
7803 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7804 changeRemoteDir(remoteTmpDir)
7805 myFTPTask.newScanner(ftp)
7806 ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
7807 buildRule.getProject()
7808 buildRule.getProject().getBaseDir()
7809 ds.setIncludes(newString[]{"**/*.xml"})
7810 ds.setExcludes(newString[]{"alpha/beta/b*xml"})
7811 ds.scan()
7812 compareFiles(ds,newString[]{"alpha/beta/gamma/gamma.xml"},newString[]{})
7813 assumeTrue(loginFailureMessage,loginSucceeded)
7814 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7815 changeRemoteDir(remoteTmpDir)
7816 myFTPTask.newScanner(ftp)
7817 ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
7818 buildRule.getProject()
7819 buildRule.getProject().getBaseDir()
7820 ds.setIncludes(newString[]{"alpha/**"})
7821 ds.setExcludes(newString[]{"alpha/**"})
7822 ds.scan()
7823 compareFiles(ds,newString[]{},newString[]{})
7824 assumeTrue(loginFailureMessage,loginSucceeded)
7825 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7826 changeRemoteDir(remoteTmpDir)
7827 myFTPTask.newScanner(ftp)
7828 ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
7829 buildRule.getProject()
7830 buildRule.getProject().getBaseDir()
7831 ds.setIncludes(newString[]{"alpha/**","alpha/beta/gamma/**"})
7832 ds.setExcludes(newString[]{"alpha/beta/**"})
7833 ds.scan()
7834 compareFiles(ds,newString[]{},newString[]{"alpha"})
7835 assumeTrue(loginFailureMessage,loginSucceeded)
7836 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7837 changeRemoteDir(remoteTmpDir)
7838 myFTPTask.newScanner(ftp)
7839 ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
7840 buildRule.getProject()
7841 buildRule.getProject().getBaseDir()
7842 ds.setExcludes(newString[]{"alpha/**","alpha/beta/gamma/**"})
7843 ds.setIncludes(newString[]{"alpha/beta/**"})
7844 ds.scan()
7845 compareFiles(ds,newString[]{},newString[]{})
7846 assumeTrue(loginFailureMessage,loginSucceeded)
7847 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7848 changeRemoteDir(remoteTmpDir)
7849 buildRule.getProject()
7850 buildRule.getProject().executeTarget("children-of-excluded-dir-setup")
7851 myFTPTask.newScanner(ftp)
7852 ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
7853 buildRule.getProject()
7854 buildRule.getProject().getBaseDir()
7855 ds.setExcludes(newString[]{"alpha/**"})
7856 ds.scan()
7857 compareFiles(ds,newString[]{"delta/delta.xml"},newString[]{"delta"})
7858 myFTPTask.newScanner(ftp)
7859 assumeTrue("Could not change remote directory",changeRemoteDir(remoteTmpDir))
7860 changeRemoteDir(remoteTmpDir)
7861 ds.setBasedir(newFile(buildRule.getProject().getBaseDir(),"tmp"))
7862 buildRule.getProject()
7863 buildRule.getProject().getBaseDir()
7864 ds.setExcludes(newString[]{"alpha"})
7865 ds.scan()
7866 compareFiles(ds,newString[]{"alpha/beta/beta.xml","alpha/beta/gamma/gamma.xml","delta/delta.xml"},newString[]{"alpha/beta","alpha/beta/gamma","delta"})
7867 newRegexpMatcherFactory().newRegexpMatcher()
7868 super()
7869 this.matcher.setPattern(pattern)
7870 event.getMessage()
7871 this.matcher.matches(message)
7872 this.matcher.getGroups(message)
7873 super.messageLogged(event)
7874 Integer.parseInt(this.lastMatchGroups.get(1))
7875 this.lastMatchGroups.get(1)
7876 searchMap.put(message,0)
7877 event.getMessage()
7878 this.matcher.matches(message)
7879 this.matcher.getGroups(message)
7880 super.messageLogged(event)
7881 searchMap.get(message)
7882 buildRule.getProject()
7883 buildRule.getProject().executeTarget("timed.test.setup")
7884 buildRule.getProject()
7885 buildRule.getProject().addBuildListener(log)
7886 buildRule.getProject()
7887 buildRule.getProject().executeTarget("timed.test.put.older")
7888 log.getCount()
7889 buildRule.getProject()
7890 buildRule.getProject().executeTarget("timed.test.setup")
7891 buildRule.getProject()
7892 buildRule.getProject().addBuildListener(log)
7893 buildRule.getProject()
7894 buildRule.getProject().executeTarget("timed.test.get.older")
7895 log.getCount()
7896 performConfigTest("configuration.1",expectedCounts)
7897 performConfigTest("configuration.2",expectedCounts)
7898 performConfigTest("configuration.3",expectedCounts)
7899 performConfigTest("configuration.lang.good",expectedCounts)
7900 performConfigTest("configuration.lang.bad",expectedCounts)
7901 performConfigTest("configuration.none",expectedCounts)
7902 buildRule.getProject()
7903 buildRule.getProject().getProperty("ftp.server.timezone")
7904 Arrays.stream(messages)
7905 Arrays.stream(messages).forEach(counter::addLogMessageToSearch)
7906 buildRule.getProject()
7907 buildRule.getProject().addBuildListener(counter)
7908 buildRule.getProject()
7909 buildRule.getProject().executeTarget(target)
7910 counter.getMatchCount(messages[i])
7911 buildRule.getProject()
7912 buildRule.getProject().executeTarget("ftp-delete")
7913 ds.getIncludedFiles()
7914 ds.getIncludedDirectories()
7915 includedFiles[counter].replace(File.separatorChar,'/')
7916 Arrays.sort(includedFiles)
7917 includedDirectories[counter].replace(File.separatorChar,'/')
7918 Arrays.sort(includedDirectories)
7919 super.resolveFile(file)
7920 super.getFile(ftp,dir,filename)
7921 super.executeRetryable(h,r,filename)
7922 super(1)
7923 super(2)
7924 super(3)
7925 super(newRandom().nextInt(Short.MAX_VALUE))
7926 newRandom().nextInt(Short.MAX_VALUE)
7927 buildRule.getProject()
7928 buildRule.getProject().addTaskDefinition("ftp",oneFailureFTP.class)
7929 buildRule.getProject()
7930 buildRule.getProject().executeTarget("ftp-get-with-selector-retryable")
7931 buildRule.getProject()
7932 buildRule.getProject().addTaskDefinition("ftp",twoFailureFTP.class)
7933 buildRule.getProject()
7934 buildRule.getProject().executeTarget("ftp-get-with-selector-retryable")
7935 buildRule.getProject()
7936 buildRule.getProject().addTaskDefinition("ftp",threeFailureFTP.class)
7937 buildRule.getProject()
7938 buildRule.getProject().executeTarget("ftp-get-with-selector-retryable")
7939 buildRule.getProject()
7940 buildRule.getProject().addTaskDefinition("ftp",randomFailureFTP.class)
7941 buildRule.getProject()
7942 buildRule.getProject().setProperty("ftp.retries","forever")
7943 buildRule.getProject()
7944 buildRule.getProject().executeTarget("ftp-get-with-selector-retryable")
7945 performCommandTest("test-initial-command",newint[]{1,0})
7946 performCommandTest("test-site-action",newint[]{1,0})
7947 Arrays.stream(messages)
7948 Arrays.stream(messages).forEach(counter::addLogMessageToSearch)
7949 buildRule.getProject()
7950 buildRule.getProject().addBuildListener(counter)
7951 buildRule.getProject()
7952 buildRule.getProject().executeTarget(target)
7953 counter.getMatchCount(messages[i])
7954 buildRule.configureProject("src/etc/testcases/taskdefs/optional/script/scriptdef.xml")
7955 buildRule.executeTarget("simple")
7956 buildRule.getProject()
7957 p.getReference("testfileset")
7958 fileset.getDir(p)
7959 buildRule.getLog()
7960 containsString("Attribute attr1 = test")
7961 containsString("Fileset basedir = "+baseDir.getAbsolutePath())
7962 baseDir.getAbsolutePath()
7963 thrown.expect(BuildException.class)
7964 thrown.expectMessage("requires a language attribute")
7965 buildRule.executeTarget("nolang")
7966 thrown.expect(BuildException.class)
7967 thrown.expectMessage("scriptdef requires a name attribute")
7968 buildRule.executeTarget("noname")
7969 buildRule.executeTarget("nestedbyclassname")
7970 buildRule.getProject()
7971 p.getReference("testfileset")
7972 fileset.getDir(p)
7973 buildRule.getLog()
7974 containsString("Attribute attr1 = test")
7975 containsString("Fileset basedir = "+baseDir.getAbsolutePath())
7976 baseDir.getAbsolutePath()
7977 buildRule.executeTarget("noelement")
7978 buildRule.getOutput()
7979 buildRule.getOutput().trim()
7980 thrown.expect(BuildException.class)
7981 thrown.expectMessage("TypeError")
7982 buildRule.executeTarget("exception")
7983 buildRule.executeTarget("doubledef")
7984 buildRule.getLog()
7985 containsString("Task1")
7986 containsString("Task2")
7987 thrown.expect(BuildException.class)
7988 thrown.expectMessage("attr1 attribute more than once")
7989 buildRule.executeTarget("doubleAttributeDef")
7990 buildRule.executeTarget("property")
7991 buildRule.getLog()
7992 containsString("Attribute value = test")
7993 buildRule.getProject()
7994 buildRule.getProject().setProperty("useSrcAndEncoding.reader.encoding",readerEncoding)
7995 buildRule.executeTarget("useSrcAndEncoding")
7996 thrown.expect(BuildException.class)
7997 thrown.expectMessage("expected <eacute [\u00e9]> but was <eacute [\u00c3\u00a9]>")
7998 buildRule.getProject()
7999 buildRule.getProject().setProperty("useSrcAndEncoding.reader.encoding",readerEncoding)
8000 buildRule.executeTarget("useSrcAndEncoding")
8001 System.nanoTime()
8002 buildRule.executeTarget("useCompiled")
8003 System.nanoTime()
8004 System.nanoTime()
8005 buildRule.executeTarget("useNotCompiled")
8006 System.nanoTime()
8007 project.init()
8008 project.setBasedir(".")
8009 project.getBaseDir()
8010 file.exists()
8011 file.delete()
8012 project.getBaseDir()
8013 project.getBaseDir().getAbsolutePath()
8014 sosGet.setProject(project)
8015 sosGet.setVssServerPath(VSS_SERVER_PATH)
8016 sosGet.setSosServerPath(SOS_SERVER_PATH)
8017 sosGet.setProjectPath(VSS_PROJECT_PATH)
8018 sosGet.setFile(SRC_FILE)
8019 sosGet.setUsername(SOS_USERNAME)
8020 sosGet.setPassword(SOS_PASSWORD)
8021 sosGet.setVersion(VERSION)
8022 sosGet.setLocalPath(newPath(project,LOCAL_PATH))
8023 sosGet.setNoCache(true)
8024 sosGet.setNoCompress(true)
8025 sosGet.setVerbose(true)
8026 sosGet.setRecursive(true)
8027 sosGet.buildCmdLine()
8028 checkCommandLines(sTestCmdLine,commandline.getCommandline())
8029 commandline.getCommandline()
8030 project.getBaseDir()
8031 project.getBaseDir().getAbsolutePath()
8032 sosGet.setProject(project)
8033 sosGet.setVssServerPath(VSS_SERVER_PATH)
8034 sosGet.setSosServerPath(SOS_SERVER_PATH)
8035 sosGet.setProjectPath(DS_VSS_PROJECT_PATH)
8036 sosGet.setLabel(SRC_LABEL)
8037 sosGet.setUsername(SOS_USERNAME)
8038 sosGet.setSosHome(SOS_HOME)
8039 sosGet.setNoCache(true)
8040 sosGet.setNoCompress(false)
8041 sosGet.setVerbose(false)
8042 sosGet.setRecursive(true)
8043 sosGet.buildCmdLine()
8044 checkCommandLines(sTestCmdLine,commandline.getCommandline())
8045 commandline.getCommandline()
8046 buildRule.configureProject("src/etc/testcases/taskdefs/optional/sos/sos.xml")
8047 expectSpecificBuildException("sosget.1","sosserverpath attribute must be set!")
8048 expectSpecificBuildException("sosget.2","username attribute must be set!")
8049 expectSpecificBuildException("sosget.3","vssserverpath attribute must be set!")
8050 expectSpecificBuildException("sosget.4","projectpath attribute must be set!")
8051 project.getBaseDir()
8052 project.getBaseDir().getAbsolutePath()
8053 sosCheckin.setProject(project)
8054 sosCheckin.setVssServerPath(VSS_SERVER_PATH)
8055 sosCheckin.setSosServerPath(SOS_SERVER_PATH)
8056 sosCheckin.setProjectPath(VSS_PROJECT_PATH)
8057 sosCheckin.setFile(SRC_FILE)
8058 sosCheckin.setComment(SRC_COMMENT)
8059 sosCheckin.setUsername(SOS_USERNAME)
8060 sosCheckin.setPassword(SOS_PASSWORD)
8061 sosCheckin.setLocalPath(newPath(project,LOCAL_PATH))
8062 sosCheckin.setNoCache(true)
8063 sosCheckin.setNoCompress(true)
8064 sosCheckin.setVerbose(true)
8065 sosCheckin.setRecursive(true)
8066 sosCheckin.buildCmdLine()
8067 checkCommandLines(sTestCmdLine,commandline.getCommandline())
8068 commandline.getCommandline()
8069 project.getBaseDir()
8070 project.getBaseDir().getAbsolutePath()
8071 sosCheckin.setProject(project)
8072 sosCheckin.setVssServerPath(VSS_SERVER_PATH)
8073 sosCheckin.setSosServerPath(SOS_SERVER_PATH)
8074 sosCheckin.setProjectPath(DS_VSS_PROJECT_PATH)
8075 sosCheckin.setComment(SRC_COMMENT)
8076 sosCheckin.setUsername(SOS_USERNAME)
8077 sosCheckin.setSosHome(SOS_HOME)
8078 sosCheckin.setNoCache(true)
8079 sosCheckin.setNoCompress(false)
8080 sosCheckin.setVerbose(false)
8081 sosCheckin.setRecursive(true)
8082 sosCheckin.buildCmdLine()
8083 checkCommandLines(sTestCmdLine,commandline.getCommandline())
8084 commandline.getCommandline()
8085 buildRule.configureProject("src/etc/testcases/taskdefs/optional/sos/sos.xml")
8086 expectSpecificBuildException("soscheckin.1","sosserverpath attribute must be set!")
8087 expectSpecificBuildException("soscheckin.2","username attribute must be set!")
8088 expectSpecificBuildException("soscheckin.3","vssserverpath attribute must be set!")
8089 expectSpecificBuildException("soscheckin.4","projectpath attribute must be set!")
8090 project.getBaseDir()
8091 project.getBaseDir().getAbsolutePath()
8092 sosCheckout.setProject(project)
8093 sosCheckout.setVssServerPath(VSS_SERVER_PATH)
8094 sosCheckout.setSosServerPath(SOS_SERVER_PATH)
8095 sosCheckout.setProjectPath(DS_VSS_PROJECT_PATH)
8096 sosCheckout.setFile(SRC_FILE)
8097 sosCheckout.setUsername(SOS_USERNAME)
8098 sosCheckout.setPassword(SOS_PASSWORD)
8099 sosCheckout.setLocalPath(newPath(project,LOCAL_PATH))
8100 sosCheckout.setNoCache(true)
8101 sosCheckout.setNoCompress(true)
8102 sosCheckout.setVerbose(true)
8103 sosCheckout.setRecursive(true)
8104 sosCheckout.buildCmdLine()
8105 checkCommandLines(sTestCmdLine,commandline.getCommandline())
8106 commandline.getCommandline()
8107 project.getBaseDir()
8108 project.getBaseDir().getAbsolutePath()
8109 sosCheckout.setProject(project)
8110 sosCheckout.setVssServerPath(VSS_SERVER_PATH)
8111 sosCheckout.setSosServerPath(SOS_SERVER_PATH)
8112 sosCheckout.setProjectPath(VSS_PROJECT_PATH)
8113 sosCheckout.setUsername(SOS_USERNAME)
8114 sosCheckout.setSosHome(SOS_HOME)
8115 sosCheckout.setNoCache(true)
8116 sosCheckout.setNoCompress(false)
8117 sosCheckout.setVerbose(false)
8118 sosCheckout.setRecursive(true)
8119 sosCheckout.buildCmdLine()
8120 checkCommandLines(sTestCmdLine,commandline.getCommandline())
8121 commandline.getCommandline()
8122 buildRule.configureProject("src/etc/testcases/taskdefs/optional/sos/sos.xml")
8123 expectSpecificBuildException("soscheckout.1","sosserverpath attribute must be set!")
8124 expectSpecificBuildException("soscheckout.2","username attribute must be set!")
8125 expectSpecificBuildException("soscheckout.3","vssserverpath attribute must be set!")
8126 expectSpecificBuildException("soscheckout.4","projectpath attribute must be set!")
8127 sosLabel.setVssServerPath(VSS_SERVER_PATH)
8128 sosLabel.setSosServerPath(SOS_SERVER_PATH)
8129 sosLabel.setProjectPath(DS_VSS_PROJECT_PATH)
8130 sosLabel.setUsername(SOS_USERNAME)
8131 sosLabel.setSosHome(SOS_HOME)
8132 sosLabel.setComment(SRC_COMMENT)
8133 sosLabel.setLabel(SRC_LABEL)
8134 sosLabel.setNoCache(true)
8135 sosLabel.setNoCompress(false)
8136 sosLabel.setVerbose(true)
8137 sosLabel.buildCmdLine()
8138 checkCommandLines(sTestCmdLine,commandline.getCommandline())
8139 commandline.getCommandline()
8140 buildRule.configureProject("src/etc/testcases/taskdefs/optional/sos/sos.xml")
8141 expectSpecificBuildException("soslabel.1","sosserverpath attribute must be set!")
8142 expectSpecificBuildException("soslabel.2","username attribute must be set!")
8143 expectSpecificBuildException("soslabel.3","vssserverpath attribute must be set!")
8144 expectSpecificBuildException("soslabel.4","projectpath attribute must be set!")
8145 expectSpecificBuildException("soslabel.5","label attribute must be set!")
8146 thrown.expect(BuildException.class)
8147 thrown.expectMessage(exceptionMessage)
8148 buildRule.executeTarget(target)
8149 String.valueOf(i)
8150 t.setProject(p)
8151 t.execute()
8152 Thread.sleep(2000)
8153 p.fireBuildFinished(null)
8154 System.err.println("finished")
8155 Thread.sleep(2000)
8156 System.err.println("exiting")
8157 System.exit(0)
8158 createTask()
8159 System.getProperty("scp.tmp")
8160 System.getProperty("scp.tmp")
8161 cleanUpList.clear()
8162 cleanUpList.forEach(File::delete)
8163 assumeNotNull("system property scp.host must be set",sshHostUri)
8164 createTemporaryFile()
8165 scpTask.setFile(uploadFile.getPath())
8166 uploadFile.getPath()
8167 scpTask.setTodir(sshHostUri)
8168 scpTask.execute()
8169 tempDir.getPath()
8170 addCleanup(testFile)
8171 testFile.exists()
8172 createTask()
8173 scpTask.setFile(sshHostUri+"/"+uploadFile.getName())
8174 uploadFile.getName()
8175 scpTask.setTodir(testFile.getPath())
8176 testFile.getPath()
8177 scpTask.execute()
8178 testFile.exists()
8179 compareFiles(uploadFile,testFile)
8180 assumeNotNull("system property scp.host must be set",sshHostUri)
8181 uploadList.add(createTemporaryFile())
8182 createTemporaryFile()
8183 selector.setName("scp*")
8184 fileset.setDir(tempDir)
8185 fileset.addFilename(selector)
8186 scpTask.addFileset(fileset)
8187 scpTask.setTodir(sshHostUri)
8188 scpTask.execute()
8189 multi.mkdir()
8190 addCleanup(multi)
8191 createTask()
8192 scpTask.setFile(sshHostUri+"/scp*")
8193 scpTask.setTodir(multi.getPath())
8194 multi.getPath()
8195 scpTask.execute()
8196 match.setFile1(f)
8197 f.getName()
8198 match.setFile2(f2)
8199 f.getPath()
8200 f2.getPath()
8201 match.eval()
8202 assumeNotNull("system property scp.host must be set",sshHostUri)
8203 uploadList.add(createTemporaryFile())
8204 createTemporaryFile()
8205 sort.setProject(scpTask.getProject())
8206 scpTask.getProject()
8207 reverse.add(newName())
8208 sort.add(reverse)
8209 selector.setName("scp*")
8210 fileset.setProject(scpTask.getProject())
8211 scpTask.getProject()
8212 fileset.setDir(tempDir)
8213 fileset.addFilename(selector)
8214 sort.add(fileset)
8215 scpTask.add(sort)
8216 scpTask.setTodir(sshHostUri)
8217 scpTask.execute()
8218 scpTask.setRemoteTodir("host:/a/path/without/an/at")
8219 scpTask.setRemoteTodir("user:password@host:/a/path/with/an/at")
8220 cleanUpList.add(file)
8221 match.setFile1(src)
8222 match.setFile2(dest)
8223 match.eval()
8224 File.createTempFile("scp","test",tempDir)
8225 writer.write("Can you hear me now?\n")
8226 writer.close()
8227 addCleanup(uploadFile)
8228 p.init()
8229 scp.setProject(p)
8230 scp.setKnownhosts(knownHosts)
8231 scp.setTrust(true)
8232 scp.setPort(port)
8233 assumeTrue("Symlinks not supported on current operating system",Os.isFamily("unix"))
8234 Os.isFamily("unix")
8235 buildRule.configureProject("src/etc/testcases/taskdefs/optional/unix/symlink.xml")
8236 buildRule.executeTarget("setUp")
8237 buildRule.executeTarget("test-single")
8238 buildRule.getProject()
8239 p.getProperty("test.single.file.created")
8240 p.getProperty("test.single.link.created")
8241 buildRule.executeTarget("test-delete")
8242 buildRule.getProject()
8243 p.getProperty("test.delete.file.still.there")
8244 p.getProperty("test.delete.link.still.there")
8245 buildRule.executeTarget("test-record")
8246 buildRule.getProject()
8247 p.getProperty("test.record.dir1.created")
8248 p.getProperty("test.record.dir2.created")
8249 p.getProperty("test.record.file1.created")
8250 p.getProperty("test.record.file2.created")
8251 p.getProperty("test.record.fileA.created")
8252 p.getProperty("test.record.fileB.created")
8253 p.getProperty("test.record.fileC.created")
8254 p.getProperty("test.record.link1.created")
8255 p.getProperty("test.record.link2.created")
8256 p.getProperty("test.record.link3.created")
8257 p.getProperty("test.record.dirlink.created")
8258 p.getProperty("test.record.dirlink2.created")
8259 p.getProperty("test.record.dir1.recorded")
8260 p.getProperty("test.record.dir2.recorded")
8261 p.getProperty("test.record.dir3.recorded")
8262 buildRule.executeTarget("test-recreate")
8263 buildRule.getProject()
8264 p.getProperty("test.recreate.link1.not.removed")
8265 p.getProperty("test.recreate.link2.not.removed")
8266 p.getProperty("test.recreate.link3.not.removed")
8267 p.getProperty("test.recreate.dirlink.not.removed")
8268 p.getProperty("test.recreate.link1.recreated")
8269 p.getProperty("test.recreate.link2.recreated")
8270 p.getProperty("test.recreate.link3.recreated")
8271 p.getProperty("test.recreate.dirlink.recreated")
8272 p.getProperty("test.recreate.dirlink2.recreated.twice")
8273 p.getProperty("test.recreate.dirlink3.was.altered")
8274 buildRule.executeTarget("test-fileutils")
8275 SymbolicLinkUtils.getSymbolicLinkUtils()
8276 buildRule.getOutputDir()
8277 f.exists()
8278 f.isDirectory()
8279 f.isFile()
8280 su.isSymbolicLink(f.getAbsolutePath())
8281 f.getAbsolutePath()
8282 su.isSymbolicLink(f.getParentFile(),f.getName())
8283 f.getParentFile()
8284 f.getName()
8285 su.isDanglingSymbolicLink(f.getAbsolutePath())
8286 f.getAbsolutePath()
8287 su.isDanglingSymbolicLink(f.getParentFile(),f.getName())
8288 f.getParentFile()
8289 f.getName()
8290 buildRule.getOutputDir()
8291 f.exists()
8292 f.isDirectory()
8293 f.isFile()
8294 su.isSymbolicLink(f.getAbsolutePath())
8295 f.getAbsolutePath()
8296 su.isSymbolicLink(f.getParentFile(),f.getName())
8297 f.getParentFile()
8298 f.getName()
8299 su.isDanglingSymbolicLink(f.getAbsolutePath())
8300 f.getAbsolutePath()
8301 su.isDanglingSymbolicLink(f.getParentFile(),f.getName())
8302 f.getParentFile()
8303 f.getName()
8304 buildRule.getOutputDir()
8305 f.exists()
8306 f.isDirectory()
8307 f.isFile()
8308 su.isSymbolicLink(f.getAbsolutePath())
8309 f.getAbsolutePath()
8310 su.isSymbolicLink(f.getParentFile(),f.getName())
8311 f.getParentFile()
8312 f.getName()
8313 su.isDanglingSymbolicLink(f.getAbsolutePath())
8314 f.getAbsolutePath()
8315 su.isDanglingSymbolicLink(f.getParentFile(),f.getName())
8316 f.getParentFile()
8317 f.getName()
8318 buildRule.getOutputDir()
8319 f.exists()
8320 f.isDirectory()
8321 f.isFile()
8322 su.isSymbolicLink(f.getAbsolutePath())
8323 f.getAbsolutePath()
8324 su.isSymbolicLink(f.getParentFile(),f.getName())
8325 f.getParentFile()
8326 f.getName()
8327 su.isDanglingSymbolicLink(f.getAbsolutePath())
8328 f.getAbsolutePath()
8329 su.isDanglingSymbolicLink(f.getParentFile(),f.getName())
8330 f.getParentFile()
8331 f.getName()
8332 buildRule.getOutputDir()
8333 f.exists()
8334 f.isDirectory()
8335 f.isFile()
8336 su.isSymbolicLink(f.getAbsolutePath())
8337 f.getAbsolutePath()
8338 su.isSymbolicLink(f.getParentFile(),f.getName())
8339 f.getParentFile()
8340 f.getName()
8341 su.isDanglingSymbolicLink(f.getAbsolutePath())
8342 f.getAbsolutePath()
8343 su.isDanglingSymbolicLink(f.getParentFile(),f.getName())
8344 f.getParentFile()
8345 f.getName()
8346 buildRule.getOutputDir()
8347 f.exists()
8348 f.isDirectory()
8349 f.isFile()
8350 su.isSymbolicLink(f.getAbsolutePath())
8351 f.getAbsolutePath()
8352 su.isSymbolicLink(f.getParentFile(),f.getName())
8353 f.getParentFile()
8354 f.getName()
8355 su.isDanglingSymbolicLink(f.getAbsolutePath())
8356 f.getAbsolutePath()
8357 su.isDanglingSymbolicLink(f.getParentFile(),f.getName())
8358 f.getParentFile()
8359 f.getName()
8360 buildRule.getOutputDir()
8361 f.exists()
8362 f.isDirectory()
8363 f.isFile()
8364 su.isSymbolicLink(f.getAbsolutePath())
8365 f.getAbsolutePath()
8366 su.isSymbolicLink(f.getParentFile(),f.getName())
8367 f.getParentFile()
8368 f.getName()
8369 su.isDanglingSymbolicLink(f.getAbsolutePath())
8370 f.getAbsolutePath()
8371 su.isDanglingSymbolicLink(f.getParentFile(),f.getName())
8372 f.getParentFile()
8373 f.getName()
8374 buildRule.getOutputDir()
8375 f.exists()
8376 f.isDirectory()
8377 f.isFile()
8378 su.isSymbolicLink(f.getAbsolutePath())
8379 f.getAbsolutePath()
8380 su.isSymbolicLink(f.getParentFile(),f.getName())
8381 f.getParentFile()
8382 f.getName()
8383 su.isDanglingSymbolicLink(f.getAbsolutePath())
8384 f.getAbsolutePath()
8385 su.isDanglingSymbolicLink(f.getParentFile(),f.getName())
8386 f.getParentFile()
8387 f.getName()
8388 buildRule.executeTarget("test-overwrite-link")
8389 buildRule.getProject()
8390 p.getProperty("test.overwrite.link.target.dir")
8391 Paths.get(linkTargetResource)
8392 Files.isDirectory(targetResourcePath)
8393 Files.list(targetResourcePath)
8394 Files.list(targetResourcePath).count()
8395 buildRule.getProject()
8396 buildRule.executeTarget("tearDown")
8397 project.setBasedir(".")
8398 project.init()
8399 project.getBaseDir()
8400 file.exists()
8401 file.delete()
8402 project.getBaseDir()
8403 project.getBaseDir().getAbsolutePath()
8404 vssGet.setProject(project)
8405 vssGet.setRecursive(true)
8406 vssGet.setLocalpath(newPath(project,LOCAL_PATH))
8407 vssGet.setLogin(VSS_USERNAME+","+VSS_PASSWORD)
8408 vssGet.setVersion(VERSION)
8409 vssGet.setQuiet(false)
8410 vssGet.setDate(DATE)
8411 vssGet.setLabel(SRC_LABEL)
8412 vssGet.setVsspath(VSS_PROJECT_PATH)
8413 cmu.setValue(TIME_UPDATED)
8414 vssGet.setFileTimeStamp(cmu)
8415 wf.setValue(WRITABLE_SKIP)
8416 vssGet.setWritableFiles(wf)
8417 vssGet.buildCmdLine()
8418 checkCommandLines(sTestCmdLine,commandline.getCommandline())
8419 commandline.getCommandline()
8420 buildRule.configureProject("src/etc/testcases/taskdefs/optional/vss/vss.xml")
8421 expectSpecificBuildException("vssget.1","vsspath attribute must be set!")
8422 vssLabel.setProject(project)
8423 vssLabel.setComment(SRC_COMMENT)
8424 vssLabel.setLogin(VSS_USERNAME+","+VSS_PASSWORD)
8425 vssLabel.setVersion(VERSION)
8426 vssLabel.setAutoresponse("Y")
8427 vssLabel.setLabel(SRC_LABEL)
8428 vssLabel.setVsspath(VSS_PROJECT_PATH)
8429 vssLabel.buildCmdLine()
8430 checkCommandLines(sTestCmdLine,commandline.getCommandline())
8431 commandline.getCommandline()
8432 vssLabel.setProject(project)
8433 vssLabel.setComment(SRC_COMMENT)
8434 vssLabel.setLogin(VSS_USERNAME+","+VSS_PASSWORD)
8435 vssLabel.setLabel(LONG_LABEL+"blahblah")
8436 vssLabel.setVsspath(VSS_PROJECT_PATH)
8437 vssLabel.buildCmdLine()
8438 checkCommandLines(sTestCmdLine,commandline.getCommandline())
8439 commandline.getCommandline()
8440 buildRule.configureProject("src/etc/testcases/taskdefs/optional/vss/vss.xml")
8441 expectSpecificBuildException("vsslabel.1","vsspath attribute must be set!")
8442 expectSpecificBuildException("vsslabel.2","label attribute must be set!")
8443 project.getBaseDir()
8444 project.getBaseDir().getAbsolutePath()
8445 vssHistory.setProject(project)
8446 vssHistory.setLogin(VSS_USERNAME+","+VSS_PASSWORD)
8447 vssHistory.setFromLabel(SRC_LABEL)
8448 vssHistory.setToLabel(LONG_LABEL+"blahblah")
8449 vssHistory.setVsspath(VSS_PROJECT_PATH)
8450 vssHistory.setRecursive(false)
8451 vssHistory.setOutput(newFile(project.getBaseDir().getAbsolutePath(),OUTPUT))
8452 project.getBaseDir()
8453 project.getBaseDir().getAbsolutePath()
8454 vssHistory.buildCmdLine()
8455 checkCommandLines(sTestCmdLine,commandline.getCommandline())
8456 commandline.getCommandline()
8457 vssHistory.setProject(project)
8458 vssHistory.setLogin(VSS_USERNAME+","+VSS_PASSWORD)
8459 vssHistory.setFromDate(DATE2)
8460 vssHistory.setToDate(DATE)
8461 vssHistory.setVsspath(VSS_PROJECT_PATH)
8462 vssHistory.setRecursive(true)
8463 vssHistory.buildCmdLine()
8464 checkCommandLines(sTestCmdLine,commandline.getCommandline())
8465 commandline.getCommandline()
8466 tstamp.setLocation(location)
8467 tstamp.setProject(project)
8468 tstamp.createFormat()
8469 format.setProperty("today")
8470 format.setPattern("HH:mm:ss z")
8471 format.setTimezone("GMT")
8472 Calendar.getInstance()
8473 Calendar.getInstance().getTime()
8474 format.execute(project,date,location)
8475 project.getProperty("today")
8476 sdf.setTimeZone(TimeZone.getTimeZone("GMT"))
8477 TimeZone.getTimeZone("GMT")
8478 sdf.format(date)
8479 vssHistory.setProject(project)
8480 vssHistory.setLogin(VSS_USERNAME)
8481 vssHistory.setToDate(today)
8482 vssHistory.setVsspath(VSS_PROJECT_PATH)
8483 vssHistory.buildCmdLine()
8484 checkCommandLines(sTestCmdLine,commandline.getCommandline())
8485 commandline.getCommandline()
8486 buildRule.configureProject("src/etc/testcases/taskdefs/optional/vss/vss.xml")
8487 expectSpecificBuildException("vsshistory.1","vsspath attribute must be set!")
8488 thrown.expect(BuildException.class)
8489 thrown.expectMessage(exceptionMessage)
8490 buildRule.executeTarget(target)
8491 vssCheckin.setProject(project)
8492 vssCheckin.setComment(SRC_COMMENT)
8493 vssCheckin.setLogin(VSS_USERNAME)
8494 vssCheckin.setAutoresponse("N")
8495 vssCheckin.setVsspath(VSS_PROJECT_PATH)
8496 vssCheckin.setWritable(true)
8497 vssCheckin.buildCmdLine()
8498 checkCommandLines(sTestCmdLine,commandline.getCommandline())
8499 commandline.getCommandline()
8500 buildRule.configureProject("src/etc/testcases/taskdefs/optional/vss/vss.xml")
8501 expectSpecificBuildException("vsscheckin.1","vsspath attribute must be set!")
8502 vssCheckout.setProject(project)
8503 vssCheckout.setLogin(VSS_USERNAME)
8504 vssCheckout.setVsspath(DS_VSS_PROJECT_PATH)
8505 vssCheckout.setRecursive(true)
8506 vssCheckout.setDate(DATE)
8507 vssCheckout.setLabel(SRC_LABEL)
8508 vssCheckout.setSsdir(SS_DIR)
8509 cmu.setValue(TIME_MODIFIED)
8510 vssCheckout.setFileTimeStamp(cmu)
8511 vssCheckout.setGetLocalCopy(false)
8512 vssCheckout.buildCmdLine()
8513 checkCommandLines(sTestCmdLine,commandline.getCommandline())
8514 commandline.getCommandline()
8515 buildRule.configureProject("src/etc/testcases/taskdefs/optional/vss/vss.xml")
8516 expectSpecificBuildException("vsscheckout.1","vsspath attribute must be set!")
8517 expectSpecificBuildException("vsscheckout.2","blah is not a legal value for this attribute")
8518 project.getBaseDir()
8519 project.getBaseDir().getAbsolutePath()
8520 vssAdd.setProject(project)
8521 vssAdd.setLogin(VSS_USERNAME+","+VSS_PASSWORD)
8522 vssAdd.setVsspath(DS_VSS_PROJECT_PATH)
8523 vssAdd.setRecursive(true)
8524 vssAdd.setSsdir(SS_DIR)
8525 vssAdd.setWritable(false)
8526 vssAdd.setLocalpath(newPath(project,LOCAL_PATH))
8527 vssAdd.buildCmdLine()
8528 checkCommandLines(sTestCmdLine,commandline.getCommandline())
8529 commandline.getCommandline()
8530 buildRule.configureProject("src/etc/testcases/taskdefs/optional/vss/vss.xml")
8531 expectSpecificBuildException("vssadd.1","localPath attribute must be set!")
8532 vssCp.setProject(project)
8533 vssCp.setLogin(VSS_USERNAME)
8534 vssCp.setVsspath(DS_VSS_PROJECT_PATH)
8535 vssCp.buildCmdLine()
8536 checkCommandLines(sTestCmdLine,commandline.getCommandline())
8537 commandline.getCommandline()
8538 buildRule.configureProject("src/etc/testcases/taskdefs/optional/vss/vss.xml")
8539 expectSpecificBuildException("vsscp.1","vsspath attribute must be set!")
8540 vssCreate.setProject(project)
8541 vssCreate.setComment(SRC_COMMENT)
8542 vssCreate.setLogin(VSS_USERNAME)
8543 vssCreate.setVsspath(DS_VSS_PROJECT_PATH)
8544 vssCreate.setFailOnError(true)
8545 vssCreate.setAutoresponse("N")
8546 vssCreate.setQuiet(true)
8547 vssCreate.buildCmdLine()
8548 checkCommandLines(sTestCmdLine,commandline.getCommandline())
8549 commandline.getCommandline()
8550 buildRule.configureProject("src/etc/testcases/taskdefs/optional/vss/vss.xml")
8551 expectSpecificBuildException("vsscreate.1","vsspath attribute must be set!")
8552 sGeneratedCmdLine[genIndex].isEmpty()
8553 Arrays.stream(sGeneratedCmdLine)
8554 Arrays.stream(sGeneratedCmdLine).filter(String::isEmpty)
8555 Arrays.stream(sGeneratedCmdLine).filter(String::isEmpty).count()
8556 project.setBasedir(".")
8557 getInstance()
8558 thrown.expect(BuildException.class)
8559 thrown.expectMessage("You must not specify more than one attribute when using refid")
8560 f.setIncludes("**/*.java")
8561 f.setRefid(newReference(getProject(),"dummyref"))
8562 getProject()
8563 thrown.expect(BuildException.class)
8564 thrown.expectMessage("You must not specify nested elements when using refid")
8565 f.createPatternSet()
8566 f.setRefid(newReference(getProject(),"dummyref"))
8567 getProject()
8568 thrown.expect(BuildException.class)
8569 thrown.expectMessage("You must not specify more than one attribute when using refid")
8570 f.createInclude()
8571 f.setRefid(newReference(getProject(),"dummyref"))
8572 getProject()
8573 thrown.expect(BuildException.class)
8574 thrown.expectMessage("You must not specify more than one attribute when using refid")
8575 f.setRefid(newReference(getProject(),"dummyref"))
8576 getProject()
8577 f.setIncludes("**/*.java")
8578 thrown.expect(BuildException.class)
8579 thrown.expectMessage("You must not specify more than one attribute when using refid")
8580 f.setRefid(newReference(getProject(),"dummyref"))
8581 getProject()
8582 f.setIncludesfile(newFile("/a"))
8583 thrown.expect(BuildException.class)
8584 thrown.expectMessage("You must not specify more than one attribute when using refid")
8585 f.setRefid(newReference(getProject(),"dummyref"))
8586 getProject()
8587 f.setExcludes("**/*.java")
8588 thrown.expect(BuildException.class)
8589 thrown.expectMessage("You must not specify more than one attribute when using refid")
8590 f.setRefid(newReference(getProject(),"dummyref"))
8591 getProject()
8592 f.setExcludesfile(newFile("/a"))
8593 thrown.expect(BuildException.class)
8594 thrown.expectMessage("You must not specify more than one attribute when using refid")
8595 f.setRefid(newReference(getProject(),"dummyref"))
8596 getProject()
8597 f.setDir(project.resolveFile("."))
8598 project.resolveFile(".")
8599 thrown.expect(BuildException.class)
8600 thrown.expectMessage("You must not specify nested elements when using refid")
8601 f.setRefid(newReference(getProject(),"dummyref"))
8602 getProject()
8603 f.createInclude()
8604 thrown.expect(BuildException.class)
8605 thrown.expectMessage("You must not specify nested elements when using refid")
8606 f.setRefid(newReference(getProject(),"dummyref"))
8607 getProject()
8608 f.createExclude()
8609 thrown.expect(BuildException.class)
8610 thrown.expectMessage("You must not specify nested elements when using refid")
8611 f.setRefid(newReference(getProject(),"dummyref"))
8612 getProject()
8613 f.createIncludesFile()
8614 thrown.expect(BuildException.class)
8615 thrown.expectMessage("You must not specify nested elements when using refid")
8616 f.setRefid(newReference(getProject(),"dummyref"))
8617 getProject()
8618 f.createExcludesFile()
8619 thrown.expect(BuildException.class)
8620 thrown.expectMessage("You must not specify nested elements when using refid")
8621 f.setRefid(newReference(getProject(),"dummyref"))
8622 getProject()
8623 f.createPatternSet()
8624 thrown.expect(BuildException.class)
8625 thrown.expectMessage("This data type contains a circular reference.")
8626 project.addReference("dummy",f)
8627 f.setRefid(newReference(getProject(),"dummy"))
8628 getProject()
8629 f.getDir(project)
8630 thrown.expect(BuildException.class)
8631 thrown.expectMessage("This data type contains a circular reference.")
8632 project.addReference("dummy",f)
8633 f.setRefid(newReference(getProject(),"dummy"))
8634 getProject()
8635 f.getDirectoryScanner(project)
8636 thrown.expect(BuildException.class)
8637 thrown.expectMessage("This data type contains a circular reference.")
8638 project.addReference("dummy1",f)
8639 f.setRefid(newReference(getProject(),"dummy2"))
8640 getProject()
8641 getInstance()
8642 project.addReference("dummy2",fa)
8643 fa.setRefid(newReference(getProject(),"dummy3"))
8644 getProject()
8645 getInstance()
8646 project.addReference("dummy3",fb)
8647 fb.setRefid(newReference(getProject(),"dummy1"))
8648 getProject()
8649 f.getDir(project)
8650 thrown.expect(BuildException.class)
8651 thrown.expectMessage("This data type contains a circular reference.")
8652 project.addReference("dummy1",f)
8653 f.setRefid(newReference(getProject(),"dummy2"))
8654 getProject()
8655 getInstance()
8656 project.addReference("dummy2",fa)
8657 fa.setRefid(newReference(getProject(),"dummy3"))
8658 getProject()
8659 getInstance()
8660 project.addReference("dummy3",fb)
8661 fb.setRefid(newReference(getProject(),"dummy1"))
8662 getProject()
8663 f.getDirectoryScanner(project)
8664 project.addReference("dummy1",f)
8665 f.setRefid(newReference(getProject(),"dummy2"))
8666 getProject()
8667 getInstance()
8668 project.addReference("dummy2",fa)
8669 fa.setRefid(newReference(getProject(),"dummy3"))
8670 getProject()
8671 getInstance()
8672 project.addReference("dummy3",fb)
8673 fb.setDir(project.resolveFile("."))
8674 project.resolveFile(".")
8675 f.getDir(project)
8676 project.getBaseDir()
8677 f.setFile(newFile("/a"))
8678 f.setFile(newFile("/a"))
8679 thrown.expect(BuildException.class)
8680 thrown.expectMessage("setFile cannot be called twice with different arguments")
8681 f.setFile(newFile("/a"))
8682 f.setFile(newFile("/b"))
8683 buildRule.configureProject("src/etc/testcases/types/addtype.xml")
8684 buildRule.executeTarget("addpath")
8685 buildRule.executeTarget("addcondition")
8686 buildRule.executeTarget("addfilter")
8687 buildRule.executeTarget("addselector")
8688 buildRule.executeTarget("nested.a")
8689 buildRule.getLog()
8690 containsString("add A called")
8691 buildRule.executeTarget("nested.b")
8692 buildRule.getLog()
8693 containsString("add B called")
8694 buildRule.executeTarget("nested.c")
8695 buildRule.getLog()
8696 containsString("add C called")
8697 thrown.expect(BuildException.class)
8698 thrown.expectMessage("ambiguous")
8699 buildRule.executeTarget("nested.ab")
8700 buildRule.executeTarget("condition.type")
8701 buildRule.getLog()
8702 containsString("beforeafter")
8703 buildRule.executeTarget("condition.task")
8704 buildRule.getLog()
8705 containsString("My Condition execution")
8706 buildRule.executeTarget("condition.condition.type")
8707 buildRule.getLog()
8708 containsString("My Condition eval")
8709 thrown.expect(BuildException.class)
8710 thrown.expectMessage("doesn't support the nested")
8711 buildRule.executeTarget("condition.condition.task")
8712 buildRule.executeTarget("myaddconfigured")
8713 buildRule.getLog()
8714 containsString("value is Value Setexecute: value is Value Set")
8715 buildRule.executeTarget("myaddconfiguredvalue")
8716 buildRule.getLog()
8717 containsString("value is Value Setexecute: value is Value Set")
8718 buildRule.executeTarget("namespacetest")
8719 log("add A called")
8720 log("add A called")
8721 log("add A called")
8722 project.log("My Condition eval")
8723 project.log("My Condition execution")
8724 log("value is "+value)
8725 log("add A called")
8726 project.log("My Condition execution")
8727 log("value is "+value)
8728 project.log("My Condition execution")
8729 thrown.expect(BuildException.class)
8730 thrown.expectMessage("Java returned: 1")
8731 buildRule.executeTarget(target)
8732 expectAssertion("test-classname")
8733 expectAssertion("test-package")
8734 buildRule.executeTarget("test-disable")
8735 expectAssertion("test-override")
8736 buildRule.executeTarget("test-override2")
8737 expectAssertion("test-references")
8738 thrown.expect(BuildException.class)
8739 thrown.expect(BuildException.class)
8740 thrown.expectMessage("You must not specify")
8741 buildRule.executeTarget("test-reference-abuse")
8742 assumeFalse("ran Ant tests with -ea and this would fail spuriously",AssertionsTest.class.desiredAssertionStatus())
8743 AssertionsTest.class.desiredAssertionStatus()
8744 buildRule.executeTarget("test-nofork")
8745 buildRule.getLog()
8746 containsString("Assertion statements are currently ignored in non-forked mode")
8747 buildRule.executeTarget("test-junit")
8748 Arrays.asList("UTF-8","ISO-8859-1","037","us","IBM500","ascii","utf-8","Cp1252")
8749 equalToIgnoringCase(cs.getValue())
8750 cs.getValue()
8751 Arrays.asList("UTF-8","ISO-8859-1","037","us","IBM500","ascii","utf-8","Cp1252")
8752 Arrays.asList("UTF-8","ISO-8859-1","037","us","IBM500","ascii","utf-8","Cp1252")
8753 equalToIgnoringCase(cs.getValue())
8754 cs.getValue()
8755 Arrays.asList("UTF-8","ISO-8859-1","037","us","IBM500","ascii","utf-8","Cp1252")
8756 newCharSet(argument).equivalent(CharSet.getUtf8())
8757 CharSet.getUtf8()
8758 System.getProperty(MagicTestNames.TEST_ROOT_DIRECTORY)
8759 project.setBasedir(System.getProperty(MagicTestNames.TEST_ROOT_DIRECTORY))
8760 System.getProperty(MagicTestNames.TEST_ROOT_DIRECTORY)
8761 project.setProperty("build.sysclasspath","ignore")
8762 System.getProperty("ant.build.clonevm")
8763 System.setProperty("ant.build.clonevm","false")
8764 System.setProperty("ant.build.clonevm",cloneVm)
8765 System.getProperty(MagicNames.ANT_HOME)
8766 c.createArgument()
8767 c.createArgument().setValue("org.apache.tools.ant.CommandlineJavaTest")
8768 c.setClassname("junit.textui.TestRunner")
8769 c.createVmArgument()
8770 c.createVmArgument().setValue("-Djava.compiler=NONE")
8771 c.getCommandline()
8772 c.clone()
8773 c.createClasspath(project)
8774 c.createClasspath(project).setLocation(project.resolveFile("build.xml"))
8775 project.resolveFile("build.xml")
8776 c.createClasspath(project)
8777 c.createClasspath(project).setLocation(project.resolveFile(System.getProperty(MagicNames.ANT_HOME)+"/lib/ant.jar"))
8778 project.resolveFile(System.getProperty(MagicNames.ANT_HOME)+"/lib/ant.jar")
8779 System.getProperty(MagicNames.ANT_HOME)
8780 c.getCommandline()
8781 containsString("build.xml"+File.pathSeparator)
8782 endsWith("ant.jar")
8783 c.createArgument()
8784 c.createArgument().setValue("arg1")
8785 c.setJar("myfile.jar")
8786 c.createVmArgument()
8787 c.createVmArgument().setValue("-classic")
8788 c.createVmArgument()
8789 c.createVmArgument().setValue("-Dx=y")
8790 c.getCommandline()
8791 System.getProperty("java.class.path")
8792 System.getProperty("key")
8793 v.setKey("key")
8794 v.setValue("value")
8795 c.addSysproperty(v)
8796 project.setProperty("key2","value2")
8797 ps.setProject(project)
8798 ps.appendName("key2")
8799 c.addSyspropertyset(ps)
8800 c.setSystemProperties()
8801 System.getProperty("java.class.path")
8802 System.getProperty("key")
8803 System.getProperty("key")
8804 System.getProperties()
8805 hasKey("java.class.path")
8806 System.getProperty("key2")
8807 System.getProperty("key2")
8808 c.restoreSystemProperties()
8809 System.getProperty("key")
8810 System.getProperty("key2")
8811 c.createArgument()
8812 c.createArgument().setValue("org.apache.tools.ant.CommandlineJavaTest")
8813 c.setClassname("junit.textui.TestRunner")
8814 c.createVmArgument()
8815 c.createVmArgument().setValue("-Djava.compiler=NONE")
8816 a.setProject(project)
8817 ea.setClass("junit.textui.TestRunner")
8818 a.addEnable(ea)
8819 c.setAssertions(a)
8820 c.getCommandline()
8821 c.clone()
8822 c2.getCommandline()
8823 Commandline.translateCommandline("1 2 3")
8824 Commandline.translateCommandline("")
8825 Commandline.translateCommandline(null)
8826 Commandline.translateCommandline("1 \'2\' 3")
8827 Commandline.translateCommandline("1 \"2\" 3")
8828 Commandline.translateCommandline("1 \"2 3\" 4")
8829 Commandline.translateCommandline("1 \"2\'3\" 4")
8830 Commandline.translateCommandline("1 \'2 3\' 4")
8831 Commandline.translateCommandline("1 \'2\"3\' 4")
8832 Commandline.translateCommandline("1 2\\ 3 4")
8833 Commandline.translateCommandline("\"\" a")
8834 Commandline.translateCommandline("a \"\"")
8835 Commandline.translateCommandline("\"\"")
8836 Commandline.translateCommandline("\'\' a")
8837 Commandline.translateCommandline("a \'\'")
8838 Commandline.translateCommandline("\'\'")
8839 thrown.expect(BuildException.class)
8840 thrown.expectMessage("unbalanced quotes in a \'b c")
8841 Commandline.translateCommandline("a \'b c")
8842 thrown.expect(BuildException.class)
8843 thrown.expectMessage("unbalanced quotes in a \"b c")
8844 Commandline.translateCommandline("a \"b c")
8845 Commandline.toString(newString[0])
8846 Commandline.toString(null)
8847 Commandline.toString(newString[]{"1","2","3"})
8848 Commandline.toString(newString[]{"1","2 3"})
8849 Commandline.toString(newString[]{"1","2\'3"})
8850 Commandline.toString(newString[]{"1","2\"3"})
8851 c.setExecutable("awk")
8852 c.createArgument()
8853 c.createArgument().setValue("'NR == 2 { print $NF }'")
8854 c.getCommandline()
8855 c.createArgument()
8856 a.setValue("foo")
8857 a.setPrefix("-f=")
8858 c.getCommandline()
8859 c.createArgument()
8860 a.setValue("foo")
8861 a.setSuffix(",1")
8862 c.getCommandline()
8863 c.createArgument()
8864 a.setLine("one two")
8865 a.setPrefix("number ")
8866 a.setSuffix(".")
8867 c.getCommandline()
8868 Arrays.asList(newObject[][]{{"description1","Single","Test Project Description"},{"description2","Multi line","Multi Line\nProject Description"},{"description3","Multi instance","Multi Instance Project Description"},{"description4","Multi instance nested","Multi Instance Nested Project Description"}})
8869 buildRule.configureProject("src/etc/testcases/types/"+fileName+".xml")
8870 buildRule.getProject()
8871 buildRule.getProject().getDescription()
8872 super.setUp()
8873 getInstance()
8874 ds.setProject(getProject())
8875 getProject()
8876 thrown.expect(BuildException.class)
8877 thrown.expectMessage("dummy doesn\'t denote a DirSet")
8878 fs.setProject(getProject())
8879 getProject()
8880 getProject()
8881 getProject().addReference("dummy",fs)
8882 ds.setRefid(newReference(getProject(),"dummy"))
8883 getProject()
8884 ds.getDir(getProject())
8885 getProject()
8886 thrown.expect(BuildException.class)
8887 thrown.expectMessage("dummy doesn\'t denote a FileSet")
8888 getProject()
8889 getProject().addReference("dummy",ds)
8890 fs.setRefid(newReference(getProject(),"dummy"))
8891 getProject()
8892 fs.getDir(getProject())
8893 getProject()
8894 File.createTempFile("DirSetTest","")
8895 tmp.delete()
8896 a.mkdirs()
8897 bc.mkdirs()
8898 newFileOutputStream(newFile(a,"x")).close()
8899 newFileOutputStream(newFile(b,"x")).close()
8900 newFileOutputStream(newFile(bc,"x")).close()
8901 ds.setDir(tmp)
8902 ds.setIncludes("b/")
8903 ds.toString()
8904 newFile(tmp,"a/x").delete()
8905 newFile(tmp,"a").delete()
8906 newFile(tmp,"b/c/x").delete()
8907 newFile(tmp,"b/c").delete()
8908 newFile(tmp,"b/x").delete()
8909 newFile(tmp,"b").delete()
8910 tmp.delete()
8911 t1.containsValue(value)
8912 value.toUpperCase()
8913 t1.containsValue(value.toUpperCase())
8914 value.toUpperCase()
8915 t1.containsValue("d")
8916 (newTestNull()).containsValue("d")
8917 EnumeratedAttribute.getInstance(Factory.class,"one")
8918 ea.getValue()
8919 EnumeratedAttribute.getInstance(Factory.class,"illegal")
8920 Arrays.stream(expected)
8921 Arrays.stream(expected).forEach(newTestNormal()::setValue)
8922 newTestNormal().setValue("d")
8923 newTestNull().setValue("d")
8924 buildRule.configureProject("src/etc/testcases/types/filelist.xml")
8925 thrown.expect(BuildException.class)
8926 thrown.expectMessage("You must not specify more than one attribute when using refid")
8927 f.setDir(buildRule.getProject().resolveFile("."))
8928 buildRule.getProject()
8929 buildRule.getProject().resolveFile(".")
8930 f.setRefid(newReference(buildRule.getProject(),"dummyref"))
8931 buildRule.getProject()
8932 thrown.expect(BuildException.class)
8933 thrown.expectMessage("You must not specify more than one attribute when using refid")
8934 f.setFiles("foo.xml,c/d/bar.xml")
8935 f.setRefid(newReference(buildRule.getProject(),"dummyref"))
8936 buildRule.getProject()
8937 thrown.expect(BuildException.class)
8938 thrown.expectMessage("You must not specify more than one attribute when using refid")
8939 f.setRefid(newReference(buildRule.getProject(),"dummyref"))
8940 buildRule.getProject()
8941 f.setFiles("a/b/foo.java")
8942 thrown.expect(BuildException.class)
8943 thrown.expectMessage("You must not specify more than one attribute when using refid")
8944 f.setRefid(newReference(buildRule.getProject(),"dummyref"))
8945 buildRule.getProject()
8946 f.setDir(buildRule.getProject().resolveFile("."))
8947 buildRule.getProject()
8948 buildRule.getProject().resolveFile(".")
8949 thrown.expect(BuildException.class)
8950 thrown.expectMessage("This data type contains a circular reference.")
8951 buildRule.getProject()
8952 buildRule.getProject().addReference("dummy",f)
8953 f.setRefid(newReference(buildRule.getProject(),"dummy"))
8954 buildRule.getProject()
8955 f.getDir(buildRule.getProject())
8956 buildRule.getProject()
8957 thrown.expect(BuildException.class)
8958 thrown.expectMessage("This data type contains a circular reference.")
8959 buildRule.getProject()
8960 buildRule.getProject().addReference("dummy",f)
8961 f.setRefid(newReference(buildRule.getProject(),"dummy"))
8962 buildRule.getProject()
8963 f.getFiles(buildRule.getProject())
8964 buildRule.getProject()
8965 thrown.expect(BuildException.class)
8966 thrown.expectMessage("This data type contains a circular reference.")
8967 buildRule.getProject()
8968 buildRule.getProject().addReference("dummy",f)
8969 f.setRefid(newReference(buildRule.getProject(),"dummyA"))
8970 buildRule.getProject()
8971 buildRule.getProject()
8972 buildRule.getProject().addReference("dummyA",fa)
8973 fa.setRefid(newReference(buildRule.getProject(),"dummyB"))
8974 buildRule.getProject()
8975 buildRule.getProject()
8976 buildRule.getProject().addReference("dummyB",fb)
8977 fb.setRefid(newReference(buildRule.getProject(),"dummy"))
8978 buildRule.getProject()
8979 f.getDir(buildRule.getProject())
8980 buildRule.getProject()
8981 thrown.expect(BuildException.class)
8982 thrown.expectMessage("This data type contains a circular reference.")
8983 buildRule.getProject()
8984 buildRule.getProject().addReference("dummy",f)
8985 f.setRefid(newReference(buildRule.getProject(),"dummyA"))
8986 buildRule.getProject()
8987 buildRule.getProject()
8988 buildRule.getProject().addReference("dummyA",fa)
8989 fa.setRefid(newReference(buildRule.getProject(),"dummyB"))
8990 buildRule.getProject()
8991 buildRule.getProject()
8992 buildRule.getProject().addReference("dummyB",fb)
8993 fb.setRefid(newReference(buildRule.getProject(),"dummy"))
8994 buildRule.getProject()
8995 f.getFiles(buildRule.getProject())
8996 buildRule.getProject()
8997 buildRule.getProject()
8998 buildRule.getProject().addReference("dummy",f)
8999 f.setRefid(newReference(buildRule.getProject(),"dummyA"))
9000 buildRule.getProject()
9001 buildRule.getProject()
9002 buildRule.getProject().addReference("dummyA",fa)
9003 fa.setRefid(newReference(buildRule.getProject(),"dummyB"))
9004 buildRule.getProject()
9005 buildRule.getProject()
9006 buildRule.getProject().addReference("dummyB",fb)
9007 fb.setDir(buildRule.getProject().resolveFile("."))
9008 buildRule.getProject()
9009 buildRule.getProject().resolveFile(".")
9010 f.getDir(buildRule.getProject())
9011 buildRule.getProject()
9012 buildRule.getProject()
9013 buildRule.getProject().getBaseDir()
9014 buildRule.executeTarget("simple")
9015 buildRule.getLog()
9016 buildRule.executeTarget("double")
9017 buildRule.getLog()
9018 buildRule.executeTarget("nested")
9019 buildRule.getLog()
9020 buildRule.configureProject("src/etc/testcases/types/fileset.xml")
9021 buildRule.executeTarget("no-encoding")
9022 buildRule.getLog()
9023 buildRule.executeTarget("encoding")
9024 buildRule.getLog()
9025 buildRule.configureProject("src/etc/testcases/types/filterset.xml")
9026 buildRule.executeTarget("cleanup")
9027 buildRule.executeTarget("test1")
9028 compareFiles("gold/filterset1.txt","dest1.txt")
9029 buildRule.executeTarget("test2")
9030 compareFiles("gold/filterset2.txt","dest2.txt")
9031 buildRule.executeTarget("test3")
9032 compareFiles("gold/filterset3.txt","dest3.txt")
9033 fs.addFilter("test","@test1@")
9034 fs.addFilter("test1","@test2@")
9035 fs.addFilter("test2","it works")
9036 fs.setBeginToken("@")
9037 fs.setEndToken("@")
9038 fs.replaceTokens(line)
9039 fs.addFilter("test","@test1@")
9040 fs.addFilter("test1","@test2@")
9041 fs.addFilter("test2","@test@")
9042 fs.addFilter("test3","testvalue")
9043 fs.setBeginToken("@")
9044 fs.setEndToken("@")
9045 fs.replaceTokens(line)
9046 fs.addFilter("test","@test1@")
9047 fs.addFilter("test1","@test@")
9048 fs.addFilter("test2","testvalue")
9049 fs.setBeginToken("@")
9050 fs.setEndToken("@")
9051 fs.setRecurse(false)
9052 fs.replaceTokens(line)
9053 filters.setBeginToken("<")
9054 filters.setEndToken(">")
9055 filters.addFilter("ul","<itemizedlist>")
9056 filters.addFilter("/ul","</itemizedList>")
9057 filters.addFilter("li","<listitem>")
9058 filters.addFilter("/li","</listitem>")
9059 filters.replaceTokens(line)
9060 buildRule.executeTarget("test-nested-filtersets")
9061 buildRule.getProject()
9062 buildRule.getProject().getReference("1")
9063 fs.getFilterHash()
9064 filters.size()
9065 filters.get("token1")
9066 buildRule.getProject()
9067 buildRule.getProject().getReference("2")
9068 fs.getFilterHash()
9069 filters.size()
9070 filters.get("aaaa")
9071 filters.get("bbbb")
9072 buildRule.getProject()
9073 buildRule.getProject().getReference("3")
9074 fs.getFilterHash()
9075 filters.size()
9076 filters.get("token4")
9077 buildRule.getProject()
9078 buildRule.getProject().getReference("5")
9079 fs.getFilterHash()
9080 filters.size()
9081 filters.get("token1")
9082 buildRule.executeTarget("testFiltersFileElement")
9083 buildRule.executeTarget("testFiltersFileAttribute")
9084 buildRule.executeTarget("testMultipleFiltersFiles")
9085 buildRule.executeTarget("testMissingFiltersFile")
9086 buildRule.executeTarget("testAllowMissingFiltersFile")
9087 buildRule.getProject()
9088 buildRule.getProject().resolveFile(name1)
9089 buildRule.getProject()
9090 buildRule.getProject().resolveFile(name2)
9091 file1.exists()
9092 file2.exists()
9093 file1.length()
9094 file2.length()
9095 fis1.read(buffer1)
9096 fis2.read(buffer2)
9097 buildRule.configureProject("src/etc/testcases/types/flexinteger.xml")
9098 buildRule.executeTarget("test")
9099 buildRule.getProject()
9100 buildRule.getProject().getProperty("flexint.value1")
9101 buildRule.getProject()
9102 buildRule.getProject().getProperty("flexint.value2")
9103 taskProject.setNewProperty(propName,value.toString())
9104 value.toString()
9105 project.setBasedir(".")
9106 thrown.expect(BuildException.class)
9107 thrown.expectMessage("You must not specify more than one attribute when using refid")
9108 m.setFrom("*.java")
9109 m.setRefid(newReference(project,"dummy"))
9110 thrown.expect(BuildException.class)
9111 thrown.expectMessage("You must not specify more than one attribute when using refid")
9112 m.setRefid(newReference(project,"dummy"))
9113 m.setFrom("*.java")
9114 thrown.expect(BuildException.class)
9115 thrown.expectMessage("You must not specify more than one attribute when using refid")
9116 m.setRefid(newReference(project,"dummy"))
9117 m.setTo("*.java")
9118 thrown.expect(BuildException.class)
9119 thrown.expectMessage("You must not specify more than one attribute when using refid")
9120 m.setRefid(newReference(project,"dummy"))
9121 mt.setValue("glob")
9122 m.setType(mt)
9123 thrown.expect(BuildException.class)
9124 thrown.expectMessage("This data type contains a circular reference.")
9125 project.addReference("dummy",m)
9126 m.setRefid(newReference(project,"dummy"))
9127 m.getImplementation()
9128 thrown.expect(BuildException.class)
9129 thrown.expectMessage("This data type contains a circular reference.")
9130 project.addReference("dummy",m)
9131 m.setRefid(newReference(project,"dummy2"))
9132 project.addReference("dummy2",m2)
9133 m2.setRefid(newReference(project,"dummy3"))
9134 project.addReference("dummy3",m3)
9135 m3.setRefid(newReference(project,"dummy"))
9136 m.getImplementation()
9137 project.addReference("dummy",m)
9138 m.setRefid(newReference(project,"dummy2"))
9139 project.addReference("dummy2",m2)
9140 m2.setRefid(newReference(project,"dummy3"))
9141 project.addReference("dummy3",m3)
9142 mt.setValue("glob")
9143 m3.setType(mt)
9144 m3.setFrom("*.java")
9145 m3.setTo("*.class")
9146 m.getImplementation()
9147 instanceOf(GlobPatternMapper.class)
9148 fmm.mapFileName("a.java")
9149 mt.setValue("glob")
9150 mapper1.setType(mt)
9151 mapper1.setFrom("from*")
9152 mapper1.setTo("to*")
9153 mapper3.setTo("mergefile")
9154 m.addConfiguredMapper(mapper1)
9155 m.add(mapper2)
9156 m.add(mapper3)
9157 m.getImplementation()
9158 fileNameMapper.mapFileName("fromfilename")
9159 Arrays.asList(targets)
9160 hasItem("tofilename")
9161 hasItem("fromfilename")
9162 hasItem("mergefile")
9163 mapperAB.setFrom("a")
9164 mapperAB.setTo("b")
9165 mapperBC.setFrom("b")
9166 mapperBC.setTo("c")
9167 mapperDEF.setFrom("c")
9168 mapperDEF.setTo("def")
9169 mapperGHI.setFrom("c")
9170 mapperGHI.setTo("ghi")
9171 m.add(mapperDEF)
9172 m.add(mapperGHI)
9173 chained.setClassname(ChainedMapper.class.getName())
9174 ChainedMapper.class.getName()
9175 chained.add(mapperAB)
9176 chained.add(mapperBC)
9177 chained.addConfiguredMapper(m)
9178 chained.getImplementation()
9179 fileNameMapper.mapFileName("a")
9180 Arrays.asList(targets)
9181 hasItem("def")
9182 hasItem("ghi")
9183 fileNameMapper.mapFileName("z")
9184 buildRule.configureProject("src/etc/testcases/types/mapper.xml")
9185 buildRule.executeTarget("test1")
9186 moduleVersion.setNumber("1.1.3")
9187 moduleVersion.setPreRelease("ea")
9188 moduleVersion.setBuild("25")
9189 moduleVersion.toModuleVersionString()
9190 versionStr.matches("1\\.1\\.3[-+]ea\\+25")
9191 moduleVersion.setNumber("1.1.3")
9192 moduleVersion.setPreRelease("ea")
9193 moduleVersion.toModuleVersionString()
9194 versionStr.matches("1\\.1\\.3[-+]ea")
9195 moduleVersion.setNumber("1.1.3")
9196 moduleVersion.setBuild("25")
9197 moduleVersion.toModuleVersionString()
9198 versionStr.matches("1\\.1\\.3[-+]\\+25")
9199 moduleVersion.setNumber("1.1.3")
9200 moduleVersion.toModuleVersionString()
9201 expected.expect(IllegalStateException.class)
9202 moduleVersion.toModuleVersionString()
9203 expected.expect(NullPointerException.class)
9204 moduleVersion.setNumber(null)
9205 expected.expect(IllegalArgumentException.class)
9206 moduleVersion.setNumber("1-1-3")
9207 expected.expect(IllegalArgumentException.class)
9208 moduleVersion.setNumber("1.1+3")
9209 expected.expect(IllegalArgumentException.class)
9210 moduleVersion.setNumber("1.1.3")
9211 moduleVersion.setPreRelease("ea+interim")
9212 System.getProperty(MagicTestNames.TEST_ROOT_DIRECTORY)
9213 project.setBasedir(System.getProperty(MagicTestNames.TEST_ROOT_DIRECTORY))
9214 System.getProperty(MagicTestNames.TEST_ROOT_DIRECTORY)
9215 p.list()
9216 newFile(File.separator).getAbsolutePath()
9217 project.setBasedir(newFile(project.getBaseDir(),"src/etc").getAbsolutePath())
9218 project.getBaseDir()
9219 newFile(project.getBaseDir(),"src/etc").getAbsolutePath()
9220 p.list()
9221 endsWith("/src")
9222 endsWith("/src/etc/testcases")
9223 endsWith("\\src")
9224 endsWith("\\src\\etc\\testcases")
9225 endsWith("\\src")
9226 endsWith("\\src\\etc\\testcases")
9227 p.list()
9228 newFile(File.separator).getAbsolutePath()
9229 p.list()
9230 endsWith("/c")
9231 l[0].toLowerCase(Locale.US)
9232 l[0].toLowerCase(Locale.US)
9233 p.list()
9234 endsWith("/c")
9235 endsWith("/d")
9236 l[0].toLowerCase(Locale.US)
9237 l[1].toLowerCase(Locale.US)
9238 l[0].toLowerCase(Locale.US)
9239 l[1].toLowerCase(Locale.US)
9240 p.list()
9241 endsWith("/c")
9242 l[0].toLowerCase(Locale.US)
9243 l[0].toLowerCase(Locale.US)
9244 p.list()
9245 endsWith("/c")
9246 endsWith("/d")
9247 l[0].toLowerCase(Locale.US)
9248 l[1].toLowerCase(Locale.US)
9249 l[0].toLowerCase(Locale.US)
9250 l[1].toLowerCase(Locale.US)
9251 p.list()
9252 endsWith("/sys")
9253 l[0].toLowerCase(Locale.US)
9254 endsWith("\\sys")
9255 endsWith("\\test")
9256 p.list()
9257 endsWith("/sys")
9258 endsWith("/dev")
9259 l[0].toLowerCase(Locale.US)
9260 l[1].toLowerCase(Locale.US)
9261 endsWith("\\sys")
9262 endsWith("\\test")
9263 endsWith("\\dev")
9264 endsWith("\\temp")
9265 p.list()
9266 endsWith("/sys")
9267 l[0].toLowerCase(Locale.US)
9268 endsWith("\\sys")
9269 endsWith("\\test")
9270 p.list()
9271 endsWith("/sys")
9272 endsWith("/dev")
9273 l[0].toLowerCase(Locale.US)
9274 l[1].toLowerCase(Locale.US)
9275 endsWith("\\sys")
9276 endsWith("\\test")
9277 endsWith("\\dev")
9278 endsWith("\\temp")
9279 p.list()
9280 endsWith("/SYS")
9281 l[0].toLowerCase(Locale.US)
9282 l[1].toLowerCase(Locale.US)
9283 endsWith("\\SYS")
9284 endsWith("\\JAVA\\lib\\rt.jar")
9285 endsWith("\\JAVA\\lib\\classes.zip")
9286 p.list()
9287 newFile(File.separator).getAbsolutePath()
9288 p.setLocation(newFile(File.separatorChar+"a"))
9289 p.list()
9290 l[0].substring(1)
9291 p.list()
9292 p.setLocation(newFile("/c"))
9293 p.list()
9294 p.setPath("\\d;\\e")
9295 p.list()
9296 p.append(newPath(project,"\\f"))
9297 p.list()
9298 p.createPath()
9299 p.createPath().setLocation(newFile("/g"))
9300 p.list()
9301 p.list()
9302 p.setPath("")
9303 p.list()
9304 p.append(newPath(project))
9305 p.list()
9306 p.createPath()
9307 p.list()
9308 p.list()
9309 newFile(File.separator).getAbsolutePath()
9310 p.setLocation(newFile(base,"a"))
9311 p.list()
9312 p.setPath("\\a;/a")
9313 p.list()
9314 p.append(newPath(project,"/a;\\a:\\a"))
9315 p.list()
9316 p.createPath()
9317 p.createPath().setPath("\\a:/a")
9318 p.list()
9319 thrown.expect(BuildException.class)
9320 thrown.expectMessage("You must not specify more than one attribute when using refid")
9321 p.setRefid(newReference(project,"dummyref"))
9322 thrown.expect(BuildException.class)
9323 thrown.expectMessage("You must not specify more than one attribute when using refid")
9324 p.setLocation(newFile("/a"))
9325 p.setRefid(newReference(project,"dummyref"))
9326 thrown.expect(BuildException.class)
9327 thrown.expectMessage("You must not specify more than one attribute when using refid")
9328 project.addReference("dummyref",another)
9329 p.setRefid(newReference(project,"dummyref"))
9330 p.setLocation(newFile("/a"))
9331 thrown.expect(BuildException.class)
9332 thrown.expectMessage("You must not specify more than one attribute when using refid")
9333 p.setRefid(newReference(project,"dummyref"))
9334 p.setPath("/a;\\a")
9335 thrown.expect(BuildException.class)
9336 thrown.expectMessage("You must not specify nested elements when using refid")
9337 p.setRefid(newReference(project,"dummyref"))
9338 p.createPath()
9339 thrown.expect(BuildException.class)
9340 thrown.expectMessage("You must not specify nested elements when using refid")
9341 p.setRefid(newReference(project,"dummyref"))
9342 p.createPathElement()
9343 thrown.expect(BuildException.class)
9344 thrown.expectMessage("You must not specify nested elements when using refid")
9345 p.setRefid(newReference(project,"dummyref"))
9346 p.addFileset(newFileSet())
9347 thrown.expect(BuildException.class)
9348 thrown.expectMessage("You must not specify nested elements when using refid")
9349 p.setRefid(newReference(project,"dummyref"))
9350 p.addFilelist(newFileList())
9351 thrown.expect(BuildException.class)
9352 thrown.expectMessage("You must not specify nested elements when using refid")
9353 p.setRefid(newReference(project,"dummyref"))
9354 p.addDirset(newDirSet())
9355 thrown.expect(BuildException.class)
9356 thrown.expectMessage("This data type contains a circular reference.")
9357 project.addReference("dummy",p)
9358 p.setRefid(newReference(project,"dummy"))
9359 p.list()
9360 thrown.expect(BuildException.class)
9361 thrown.expectMessage("This data type contains a circular reference.")
9362 project.addReference("dummy1",p)
9363 p.createPath()
9364 project.addReference("dummy2",pa)
9365 pa.createPath()
9366 project.addReference("dummy3",pb)
9367 pb.setRefid(newReference(project,"dummy1"))
9368 p.list()
9369 project.addReference("dummy1",p)
9370 p.createPath()
9371 project.addReference("dummy2",pa)
9372 pa.createPath()
9373 project.addReference("dummy3",pb)
9374 pb.setLocation(newFile("/a"))
9375 p.list()
9376 l[0].substring(1)
9377 f.setProject(project)
9378 f.setDir(project.resolveFile("."))
9379 project.resolveFile(".")
9380 f.setFiles("build.xml")
9381 p.addFilelist(f)
9382 p.list()
9383 project.resolveFile("build.xml")
9384 project.resolveFile("build.xml").getAbsolutePath()
9385 f.setProject(project)
9386 f.setDir(project.resolveFile("."))
9387 project.resolveFile(".")
9388 f.setIncludes("build.xml")
9389 p.addFileset(f)
9390 p.list()
9391 project.resolveFile("build.xml")
9392 project.resolveFile("build.xml").getAbsolutePath()
9393 d.setProject(project)
9394 d.setDir(project.resolveFile("."))
9395 project.resolveFile(".")
9396 System.getProperty("build.tests.value")
9397 Paths.get(s)
9398 Paths.get(s).getParent()
9399 Paths.get(s).getParent().getFileName()
9400 Paths.get(s).getParent().getFileName().toString()
9401 Paths.get(s).getParent().getFileName().toString().equals("ant")
9402 d.setIncludes(n)
9403 p.addDirset(d)
9404 p.list()
9405 project.resolveFile(n)
9406 project.resolveFile(n).getAbsolutePath()
9407 thrown.expect(BuildException.class)
9408 thrown.expectMessage("circular")
9409 p.append(p)
9410 p.list()
9411 project.setBasedir(".")
9412 thrown.expect(BuildException.class)
9413 thrown.expectMessage("You must not specify more than one attribute when using refid")
9414 p.setIncludes("**/*.java")
9415 p.setRefid(newReference(project,"dummyref"))
9416 thrown.expect(BuildException.class)
9417 thrown.expectMessage("You must not specify more than one attribute when using refid")
9418 p.setRefid(newReference(project,"dummyref"))
9419 p.setIncludes("**/*.java")
9420 thrown.expect(BuildException.class)
9421 thrown.expectMessage("You must not specify more than one attribute when using refid")
9422 p.setRefid(newReference(project,"dummyref"))
9423 p.setIncludesfile(newFile("/a"))
9424 thrown.expect(BuildException.class)
9425 thrown.expectMessage("You must not specify more than one attribute when using refid")
9426 p.setRefid(newReference(project,"dummyref"))
9427 p.setExcludes("**/*.java")
9428 thrown.expect(BuildException.class)
9429 thrown.expectMessage("You must not specify more than one attribute when using refid")
9430 p.setRefid(newReference(project,"dummyref"))
9431 p.setExcludesfile(newFile("/a"))
9432 thrown.expect(BuildException.class)
9433 thrown.expectMessage("You must not specify nested elements when using refid")
9434 p.setRefid(newReference(project,"dummyref"))
9435 p.createInclude()
9436 thrown.expect(BuildException.class)
9437 thrown.expectMessage("You must not specify nested elements when using refid")
9438 p.setRefid(newReference(project,"dummyref"))
9439 p.createExclude()
9440 thrown.expect(BuildException.class)
9441 thrown.expectMessage("You must not specify nested elements when using refid")
9442 p.setRefid(newReference(project,"dummyref"))
9443 p.createIncludesFile()
9444 thrown.expect(BuildException.class)
9445 thrown.expectMessage("You must not specify nested elements when using refid")
9446 p.setRefid(newReference(project,"dummyref"))
9447 p.createExcludesFile()
9448 thrown.expect(BuildException.class)
9449 thrown.expectMessage("This data type contains a circular reference.")
9450 project.addReference("dummy",p)
9451 p.setRefid(newReference(project,"dummy"))
9452 p.getIncludePatterns(project)
9453 thrown.expect(BuildException.class)
9454 thrown.expectMessage("This data type contains a circular reference.")
9455 project.addReference("dummy",p)
9456 p.setRefid(newReference(project,"dummy"))
9457 p.getExcludePatterns(project)
9458 thrown.expect(BuildException.class)
9459 thrown.expectMessage("This data type contains a circular reference.")
9460 project.addReference("dummy",p)
9461 p.setRefid(newReference(project,"dummyA"))
9462 project.addReference("dummyA",pa)
9463 pa.setRefid(newReference(project,"dummyB"))
9464 project.addReference("dummyB",pb)
9465 pb.setRefid(newReference(project,"dummy"))
9466 p.getIncludePatterns(project)
9467 thrown.expect(BuildException.class)
9468 thrown.expectMessage("This data type contains a circular reference.")
9469 project.addReference("dummy",p)
9470 p.setRefid(newReference(project,"dummyA"))
9471 project.addReference("dummyA",pa)
9472 pa.setRefid(newReference(project,"dummyB"))
9473 project.addReference("dummyB",pb)
9474 pb.setRefid(newReference(project,"dummy"))
9475 p.getExcludePatterns(project)
9476 project.addReference("dummy",p)
9477 p.setRefid(newReference(project,"dummyA"))
9478 project.addReference("dummyA",pa)
9479 pa.setRefid(newReference(project,"dummyB"))
9480 project.addReference("dummyB",pb)
9481 pb.setIncludes("include")
9482 pb.createExclude()
9483 pb.createExclude().setName("exclude")
9484 p.getIncludePatterns(project)
9485 pb.getExcludePatterns(project)
9486 p.setIncludes("**/*.java")
9487 nested.setExcludes("**/*.class")
9488 p.addConfiguredPatternset(nested)
9489 p.getExcludePatterns(project)
9490 p.getIncludePatterns(project)
9491 testFolder.newFile("ant.pattern")
9492 w.write("\u00e4\n")
9493 p.createIncludesFile()
9494 ne.setName(testFile.getAbsolutePath())
9495 testFile.getAbsolutePath()
9496 ne.setEncoding(cs.name())
9497 cs.name()
9498 p.getIncludePatterns(project)
9499 perm.setActions("read, write")
9500 perm.setName("user.*")
9501 perm.setClass("java.util.PropertyPermission")
9502 perms.addConfiguredGrant(perm)
9503 perm.setActions("read")
9504 perm.setName("java.home")
9505 perm.setClass("java.util.PropertyPermission")
9506 perms.addConfiguredGrant(perm)
9507 perm.setActions("read")
9508 perm.setName("file.encoding")
9509 perm.setClass("java.util.PropertyPermission")
9510 perms.addConfiguredGrant(perm)
9511 perm.setActions("write")
9512 perm.setName("user.home")
9513 perm.setClass("java.util.PropertyPermission")
9514 perms.addConfiguredRevoke(perm)
9515 perm.setActions("read")
9516 perm.setName("os.*")
9517 perm.setClass("java.util.PropertyPermission")
9518 perms.addConfiguredRevoke(perm)
9519 perm.setActions("read")
9520 perm.setName("<<ALL FILES>>")
9521 perm.setClass("java.io.FilePermission")
9522 perms.addConfiguredGrant(perm)
9523 perms.setSecurityManager()
9524 perms.restoreSecurityManager()
9525 System.getProperty("line.separator")
9526 System.setProperty("user.name",System.getProperty("user.name"))
9527 System.getProperty("user.name")
9528 System.setProperty("user.home",System.getProperty("user.home"))
9529 System.getProperty("user.home")
9530 System.getProperty("os.name")
9531 System.setProperty("line.separator",System.lineSeparator())
9532 System.lineSeparator()
9533 thrown.expect(ExitException.class)
9534 thrown.expect(hasProperty("status",equalTo(3)))
9535 hasProperty("status",equalTo(3))
9536 equalTo(3)
9537 System.out.println("If this is the last line on standard out the testExit f.a.i.l.e.d")
9538 System.exit(3)
9539 System.out.println("testExit successful.")
9540 Arrays.asList(newObject[][]{{"fileset","types.FileSet"},{"fileset-ant-type","types.PolyTest$MyFileSet"},{"path","types.Path"},{"path-ant-type","types.PolyTest$MyPath"}})
9541 buildRule.configureProject("src/etc/testcases/types/poly.xml")
9542 buildRule.executeTarget(targetName)
9543 buildRule.getLog()
9544 containsString(outcome)
9545 super(project)
9546 log("class of path is "+path.getClass())
9547 path.getClass()
9548 log("class of fileset is "+fileset.getClass())
9549 fileset.getClass()
9550 buildRule.configureProject("src/etc/testcases/types/redirector.xml",Project.MSG_VERBOSE)
9551 buildRule.executeTarget("test1")
9552 buildRule.getProject()
9553 buildRule.getProject().getReference("test1")
9554 buildRule.executeTarget("test2")
9555 buildRule.executeTarget("test3")
9556 buildRule.executeTarget("test4")
9557 buildRule.executeTarget("testLogInputString")
9558 buildRule.getLog()
9559 buildRule.getLog().contains("testLogInputString can-cat")
9560 buildRule.getFullLog()
9561 containsString("Using input string")
9562 buildRule.executeTarget("testRefid")
9563 buildRule.configureProject("src/etc/testcases/types/resources/resourcelist.xml")
9564 buildRule.getProject()
9565 testoutputbe(newResource("foo"))
9566 testoutputbe(r)
9567 r.getValue()
9568 testoutput(r)
9569 r.getValue()
9570 testoutputbe(r)
9571 project.getProperty("bar")
9572 project.setNewProperty("bar","bar")
9573 testoutput(r)
9574 project.setNewProperty("bar","bar")
9575 project.getProperty("bar")
9576 thrown.expect(UnknownServiceException.class)
9577 project.resolveFile("testurloutput")
9578 FileUtils.getFileUtils()
9579 FileUtils.getFileUtils().createNewFile(f)
9580 testoutput(newURLResource(f))
9581 f.delete()
9582 f.deleteOnExit()
9583 thrown.expect(UnsupportedOperationException.class)
9584 z.setProject(project)
9585 create.setValue("create")
9586 z.setWhenempty(create)
9587 z.setBasedir(project.getBaseDir())
9588 project.getBaseDir()
9589 z.setExcludes("**/*")
9590 project.resolveFile("foo")
9591 z.setDestFile(f)
9592 z.execute()
9593 r.setZipfile(f)
9594 r.setName("foo")
9595 testoutputbe(r)
9596 f.delete()
9597 f.deleteOnExit()
9598 testoutput(dest)
9599 ResourceUtils.copyResource(newStringResource("foo"),dest,null)
9600 super.setUp()
9601 getInstance()
9602 thrown.expect(BuildException.class)
9603 thrown.expectMessage("Cannot set both dir and src attributes")
9604 tfs.setSrc(newFile("example.tar"))
9605 tfs.setDir(newFile("examples"))
9606 thrown.expect(BuildException.class)
9607 thrown.expectMessage("Cannot set both dir and src attributes")
9608 tfs.setDir(newFile("examples"))
9609 tfs.setSrc(newFile("example.tar"))
9610 thrown.expect(BuildException.class)
9611 thrown.expectMessage("Cannot set both fullpath and prefix attributes")
9612 tfs.setSrc(newFile("example.tar"))
9613 tfs.setPrefix("/examples")
9614 tfs.setFullpath("/doc/manual/index.html")
9615 thrown.expect(BuildException.class)
9616 thrown.expectMessage("Cannot set both fullpath and prefix attributes")
9617 tfs.setSrc(newFile("example.tar"))
9618 tfs.setFullpath("/doc/manual/index.html")
9619 tfs.setPrefix("/examples")
9620 thrown.expect(BuildException.class)
9621 thrown.expectMessage("You must not specify more than one attribute when using refid")
9622 tfs.setRefid(newReference(getProject(),"test"))
9623 getProject()
9624 tfs.setSrc(newFile("example.tar"))
9625 tfs.setSrc(newFile("example.tar"))
9626 tfs.setPrefix("/examples")
9627 tfs.setFileMode("600")
9628 tfs.setDirMode("530")
9629 getProject()
9630 getProject().addReference("test",tfs)
9631 getInstance()
9632 zid.setRefid(newReference(getProject(),"test"))
9633 getProject()
9634 tfs.getSrc(getProject())
9635 getProject()
9636 zid.getSrc(getProject())
9637 getProject()
9638 tfs.getPrefix(getProject())
9639 getProject()
9640 zid.getPrefix(getProject())
9641 getProject()
9642 tfs.getFileMode(getProject())
9643 getProject()
9644 zid.getFileMode(getProject())
9645 getProject()
9646 tfs.getDirMode(getProject())
9647 getProject()
9648 zid.getDirMode(getProject())
9649 getProject()
9650 buildRule.configureProject("src/etc/testcases/types/xmlcatalog.xml")
9651 buildRule.executeTarget("testentitynocatalog")
9652 buildRule.getProject()
9653 buildRule.getProject().getProperty("val1")
9654 buildRule.executeTarget("testentitywithcatalog")
9655 buildRule.getProject()
9656 buildRule.getProject().getProperty("val2")
9657 buildRule.executeTarget("testdocumentnocatalog")
9658 buildRule.getProject()
9659 buildRule.getProject().getProperty("val3")
9660 buildRule.executeTarget("testdocumentwithcatalog")
9661 buildRule.getProject()
9662 buildRule.getProject().getProperty("val4")
9663 cat.setProject(project)
9664 JAXPUtils.getSystemId(file)
9665 ExpectedException.none()
9666 System.getProperty(MagicTestNames.TEST_ROOT_DIRECTORY)
9667 project.setBasedir(System.getProperty(MagicTestNames.TEST_ROOT_DIRECTORY))
9668 System.getProperty(MagicTestNames.TEST_ROOT_DIRECTORY)
9669 newCatalog()
9670 catalog.resolveEntity("PUBLIC ID ONE","i/dont/exist.dtd")
9671 toURLString(newFile(project.getBaseDir()+"/i/dont/exist.dtd"))
9672 project.getBaseDir()
9673 catalog.resolve("i/dont/exist.dtd",null)
9674 fileURLPartWithoutLeadingSlashes((SAXSource)result)
9675 endsWith(resultStr)
9676 result.getInputSource()
9677 result.getInputSource().getSystemId()
9678 newURL(result.getInputSource().getSystemId()).getFile()
9679 resultStr.startsWith("/")
9680 resultStr.substring(1)
9681 dtd.setPublicId("PUBLIC ID ONE")
9682 dtd.setLocation("i/dont/exist.dtd")
9683 catalog.resolveEntity("PUBLIC ID ONE","i/dont/exist.dtd")
9684 catalog.resolve("i/dont/exist.dtd",null)
9685 toURLString(newFile(project.getBaseDir().toURL()+"/i/dont/exist.dtd"))
9686 project.getBaseDir()
9687 project.getBaseDir().toURL()
9688 fileURLPartWithoutLeadingSlashes((SAXSource)result)
9689 endsWith(resultStr)
9690 thrown.expect(BuildException.class)
9691 thrown.expectMessage("You must not specify more than one attribute when using refid")
9692 dtd.setPublicId("PUBLIC ID ONE")
9693 dtd.setLocation("i/dont/exist.dtd")
9694 catalog.addDTD(dtd)
9695 project.addReference("catalog",catalog)
9696 catalog.setRefid(newReference(project,"dummyref"))
9697 thrown.expect(BuildException.class)
9698 thrown.expectMessage("You must not specify nested elements when using refid")
9699 newCatalog()
9700 catalogA.setRefid(newReference(project,"catalog"))
9701 catalogA.addConfiguredXMLCatalog(catalog)
9702 thrown.expect(BuildException.class)
9703 thrown.expectMessage("This data type contains a circular reference.")
9704 project.addReference("catalog",catalog)
9705 catalog.setRefid(newReference(project,"catalog"))
9706 catalog.resolveEntity("PUBLIC ID ONE","i/dont/exist.dtd")
9707 thrown.expect(BuildException.class)
9708 thrown.expectMessage("This data type contains a circular reference.")
9709 project.addReference("catalog",catalog)
9710 newCatalog()
9711 project.addReference("catalogA",catalogA)
9712 newCatalog()
9713 project.addReference("catalogB",catalogB)
9714 catalogB.setRefid(newReference(project,"catalog"))
9715 catalogA.setRefid(newReference(project,"catalogB"))
9716 catalog.setRefid(newReference(project,"catalogA"))
9717 catalog.resolveEntity("PUBLIC ID ONE","i/dont/exist.dtd")
9718 dtd.setPublicId("-//stevo//DTD doc 1.0//EN")
9719 project.resolveFile("src/etc/testcases/taskdefs/optional/xml/doc.dtd")
9720 project.resolveFile("src/etc/testcases/taskdefs/optional/xml/doc.dtd").getAbsolutePath()
9721 dtd.setLocation(sysid)
9722 catalog.addDTD(dtd)
9723 catalog.resolveEntity("-//stevo//DTD doc 1.0//EN","nap:chemical+brothers")
9724 project.resolveFile(sysid)
9725 toURLString(dtdFile)
9726 result.getSystemId()
9727 dtd.setPublicId("-//stevo//DTD doc 1.0//EN")
9728 dtd.setLocation(sysid)
9729 catalog.addDTD(dtd)
9730 catalog.resolveEntity("-//stevo//DTD doc 1.0//EN","nap:chemical+brothers")
9731 project.resolveFile(sysid)
9732 toURLString(dtdFile)
9733 result.getSystemId()
9734 dtd.setPublicId(publicId)
9735 dtd.setLocation(sysid)
9736 catalog.addDTD(dtd)
9737 entity.setPublicId(uri)
9738 entity.setLocation(uriLoc)
9739 catalog.addEntity(entity)
9740 project.addReference("catalog",catalog)
9741 newCatalog()
9742 project.addReference("catalogA",catalogA)
9743 newCatalog()
9744 project.addReference("catalogB",catalogB)
9745 catalogA.setRefid(newReference(project,"catalog"))
9746 catalogB.setRefid(newReference(project,"catalogA"))
9747 catalogB.resolveEntity(publicId,"nap:chemical+brothers")
9748 project.resolveFile(sysid)
9749 toURLString(dtdFile)
9750 isResult.getSystemId()
9751 catalog.resolve(uri,null)
9752 project.resolveFile(uriLoc)
9753 toURLString(xmlFile)
9754 result.getSystemId()
9755 dtd.setPublicId(publicId)
9756 dtd.setLocation(dtdLoc)
9757 catalog.addDTD(dtd)
9758 entity.setPublicId(uri)
9759 entity.setLocation(uriLoc)
9760 catalog.addEntity(entity)
9761 newCatalog()
9762 catalogA.addConfiguredXMLCatalog(catalog)
9763 catalogA.resolveEntity(publicId,"nap:chemical+brothers")
9764 project.resolveFile(dtdLoc)
9765 toURLString(dtdFile)
9766 isResult.getSystemId()
9767 catalog.resolve(uri,null)
9768 project.resolveFile(uriLoc)
9769 toURLString(xmlFile)
9770 result.getSystemId()
9771 toURLString(project.getBaseDir())
9772 project.getBaseDir()
9773 entity.setPublicId(uri)
9774 entity.setLocation(uriLoc)
9775 catalog.addEntity(entity)
9776 catalog.resolve(uri,base)
9777 project.resolveFile("src/"+uriLoc)
9778 toURLString(xmlFile)
9779 result.getSystemId()
9780 project.getBaseDir()
9781 project.getBaseDir().toString()
9782 dtd.setPublicId(publicId)
9783 dtd.setLocation(dtdLoc)
9784 catalog.addDTD(dtd)
9785 project.getBaseDir()
9786 project.getBaseDir().toString()
9787 entity.setPublicId(uri)
9788 entity.setLocation(uriLoc)
9789 catalog.addEntity(entity)
9790 aPath.append(newPath(project,path2))
9791 catalog.setClasspath(aPath)
9792 catalog.resolveEntity(publicId,"nap:chemical+brothers")
9793 isResult.getSystemId()
9794 newURL(isResult.getSystemId()).getFile()
9795 project.resolveFile("src/etc/"+dtdLoc)
9796 toURLString(dtdFile)
9797 endsWith(resultStr1)
9798 catalog.resolve(uri,null)
9799 project.resolveFile("src/"+uriLoc)
9800 result.getSystemId()
9801 newURL(result.getSystemId()).getFile()
9802 toURLString(xmlFile)
9803 endsWith(resultStr)
9804 super.setUp()
9805 getInstance()
9806 thrown.expect(BuildException.class)
9807 thrown.expectMessage("Cannot set both dir and src attributes")
9808 zfs.setSrc(newFile("example.zip"))
9809 zfs.setDir(newFile("examples"))
9810 thrown.expect(BuildException.class)
9811 thrown.expectMessage("Cannot set both dir and src attributes")
9812 zfs.setDir(newFile("examples"))
9813 zfs.setSrc(newFile("example.zip"))
9814 thrown.expect(BuildException.class)
9815 thrown.expectMessage("Cannot set both fullpath and prefix attributes")
9816 zfs.setSrc(newFile("example.zip"))
9817 zfs.setPrefix("/examples")
9818 zfs.setFullpath("/doc/manual/index.html")
9819 thrown.expect(BuildException.class)
9820 thrown.expectMessage("Cannot set both fullpath and prefix attributes")
9821 zfs.setSrc(newFile("example.zip"))
9822 zfs.setFullpath("/doc/manual/index.html")
9823 zfs.setPrefix("/examples")
9824 thrown.expect(BuildException.class)
9825 thrown.expectMessage("You must not specify more than one attribute when using refid")
9826 zfs.setRefid(newReference(getProject(),"test"))
9827 getProject()
9828 zfs.setSrc(newFile("example.zip"))
9829 zfs.setSrc(newFile("example.zip"))
9830 zfs.setPrefix("/examples")
9831 zfs.setFileMode("600")
9832 zfs.setDirMode("530")
9833 getProject()
9834 getProject().addReference("test",zfs)
9835 getInstance()
9836 zid.setRefid(newReference(getProject(),"test"))
9837 getProject()
9838 zfs.getSrc(getProject())
9839 getProject()
9840 zid.getSrc(getProject())
9841 getProject()
9842 zfs.getPrefix(getProject())
9843 getProject()
9844 zid.getPrefix(getProject())
9845 getProject()
9846 zfs.getFileMode(getProject())
9847 getProject()
9848 zid.getFileMode(getProject())
9849 getProject()
9850 zfs.getDirMode(getProject())
9851 getProject()
9852 zid.getDirMode(getProject())
9853 getProject()
9854 buildRule.configureProject("src/etc/testcases/types/mappers/globmapper.xml")
9855 buildRule.executeTarget("ignore.case")
9856 buildRule.executeTarget("handle.dirsep")
9857 buildRule.configureProject("src/etc/testcases/types/mappers/regexpmapper.xml")
9858 buildRule.executeTarget("ignore.case")
9859 buildRule.executeTarget("handle.dirsep")
9860 buildRule.configureProject("src/etc/testcases/types/mappers/scriptmapper.xml")
9861 buildRule.executeTarget("testClear")
9862 buildRule.executeTarget("testSetMultiple")
9863 buildRule.executeTarget("testPassthrough")
9864 buildRule.configureProject("src/etc/testcases/types/selectors/scriptselector.xml")
9865 thrown.expect(BuildException.class)
9866 thrown.expectMessage("script language must be specified")
9867 buildRule.executeTarget("testNolanguage")
9868 buildRule.executeTarget("testSelectionSetByDefault")
9869 buildRule.executeTarget("testSelectionSetWorks")
9870 buildRule.executeTarget("testSelectionClearWorks")
9871 buildRule.executeTarget("testFilenameAttribute")
9872 buildRule.executeTarget("testFileAttribute")
9873 buildRule.executeTarget("testBasedirAttribute")
9874 buildRule.configureProject("src/etc/testcases/taskdefs/optional/depend/depend.xml")
9875 buildRule.executeTarget("testbasicset")
9876 getFiles()
9877 files.size()
9878 hasKey("A.class")
9879 hasKey("B.class")
9880 hasKey("C.class")
9881 hasKey("D.class")
9882 buildRule.executeTarget("testsmallset")
9883 getFiles()
9884 files.size()
9885 hasKey("B.class")
9886 hasKey("C.class")
9887 buildRule.executeTarget("testcomboset")
9888 getFiles()
9889 files.size()
9890 hasKey("C.class")
9891 buildRule.executeTarget("testbyreference")
9892 buildRule.executeTarget("testmethodparam")
9893 getFiles()
9894 files.size()
9895 hasKey("A.class")
9896 hasKey("B.class")
9897 hasKey("C.class")
9898 hasKey("D.class")
9899 hasKey("E.class")
9900 buildRule.executeTarget("testmethodparaminner")
9901 getFiles()
9902 files.size()
9903 hasKey("test"+File.separator+"Outer$Inner.class")
9904 hasKey("test"+File.separator+"Outer.class")
9905 hasKey("test"+File.separator+"ContainsOnlyInner.class")
9906 hasKey("test"+File.separator+"MethodParam.class")
9907 buildRule.executeTarget("testresourcecollection")
9908 buildRule.getProject()
9909 buildRule.getProject().getReference(RESULT_FILESET)
9910 resultFileSet.getDirectoryScanner(buildRule.getProject())
9911 buildRule.getProject()
9912 scanner.getIncludedFiles()
9913 Arrays.stream(scannedFiles)
9914 Arrays.stream(scannedFiles).collect(Collectors.toMap(file->file,file->file,(a,b)->b,Hashtable::new))
9915 Collectors.toMap(file->file,file->file,(a,b)->b,Hashtable::new)
9916 System.getProperty(MagicTestNames.TEST_ROOT_DIRECTORY)
9917 newFile(".").getCanonicalFile()
9918 System.getProperty(MagicTestNames.TEST_ROOT_DIRECTORY)
9919 f.setBaseDir(root)
9920 f.setName("foo")
9921 f.getFile()
9922 f.getBaseDir()
9923 f.getName()
9924 f.setBaseDir(root)
9925 f.setName("foo/bar")
9926 f.getFile()
9927 f.getBaseDir()
9928 f.getName()
9929 f.getName().replace(File.separatorChar,'/')
9930 f.getFile()
9931 f.getBaseDir()
9932 f.getName()
9933 f.getFile()
9934 f.getBaseDir()
9935 f.getName()
9936 f.getFile()
9937 f.getBaseDir()
9938 f.getName()
9939 f.getName().replace(File.separatorChar,'/')
9940 p.setBaseDir(root)
9941 f.getFile()
9942 f.getBaseDir()
9943 f.getName()
9944 f.getResource("bar")
9945 f.getResource("bar").as(FileResource.class)
9946 relative.getFile()
9947 relative.getName()
9948 relative.getName().replace(File.separatorChar,'/')
9949 relative.getBaseDir()
9950 f.getBaseDir()
9951 f.getResource(bar.getAbsolutePath())
9952 bar.getAbsolutePath()
9953 f.getResource(bar.getAbsolutePath()).as(FileResource.class)
9954 fromFactory.getFile()
9955 fromFactory.getBaseDir()
9956 f.getBaseDir()
9957 f.getResource("../../bar")
9958 f.getResource("../../bar").as(FileResource.class)
9959 parentSibling.getBaseDir()
9960 parentSibling.getName()
9961 buildRule.configureProject("src/etc/testcases/types/resources/javaresource.xml")
9962 buildRule.executeTarget("loadManifest")
9963 buildRule.getProject()
9964 buildRule.getProject().getProperty("manifest")
9965 buildRule.getProject()
9966 buildRule.getProject().getProperty("manifest")
9967 startsWith("Manifest-Version:")
9968 r.as(URLProvider.class)
9969 r.setName("META-INF/MANIFEST.MF")
9970 r.getURL()
9971 createdIterators.add(it)
9972 lazyCollection.add(collectionTest)
9973 lazyCollection.iterator()
9974 collectionTest.createdIterators.get(0)
9975 it.next()
9976 it.next()
9977 it.next()
9978 lazyCollection.add(collectionTest)
9979 lazyCollection.iterator()
9980 it.next()
9981 it.next()
9982 it.next()
9983 it.next()
9984 testCollection.createdIterators.size()
9985 lazyCollection.add(collectionTest)
9986 lazyCollection.isCache()
9987 lazyCollection.iterator()
9988 lazyCollection.iterator()
9989 collectionTest.createdIterators.get(0)
9990 it1.next()
9991 it2.next()
9992 it2.next()
9993 it1.next()
9994 it2.next()
9995 it1.next()
9996 lazyCollection.add(collectionTest)
9997 lazyCollection.iterator()
9998 lazyCollection.iterator()
9999 it1.next()
10000 it2.next()
10001 it2.next()
10002 it1.next()
10003 it2.next()
10004 it1.next()
10005 it1.next()
10006 it1.hasNext()
10007 it2.next()
10008 it2.hasNext()
10009 r.as(StringResource.class)
10010 r.as(StringResource.class).getValue()
10011 super.setUp()
10012 isReference()
10013 tooManyAttributes()
10014 isReference()
10015 getRef(p)
10016 getRef(p).getDir(p)
10017 dieOnCircularReference()
10018 isReference()
10019 getRef(p)
10020 getRef(p).getDir(p)
10021 dieOnCircularReference()
10022 thrown.expect(BuildException.class)
10023 thrown.expectMessage("You must not specify more than one attribute when using refid")
10024 multiRootFileSet.setProject(getProject())
10025 getProject()
10026 multiRootFileSet.setBaseDirs("a")
10027 multiRootFileSet.setRefid(newReference(getProject(),"dummyref"))
10028 getProject()
10029 thrown.expect(BuildException.class)
10030 thrown.expectMessage("You must not specify more than one attribute when using refid")
10031 multiRootFileSet.addConfiguredBaseDir(newFileResource(newFile(".")))
10032 multiRootFileSet.setRefid(newReference(getProject(),"dummyref"))
10033 getProject()
10034 thrown.expect(BuildException.class)
10035 thrown.expectMessage("You must not specify more than one attribute when using refid")
10036 multiRootFileSet.setRefid(newReference(getProject(),"dummyref"))
10037 getProject()
10038 multiRootFileSet.setBaseDirs("a")
10039 thrown.expect(BuildException.class)
10040 thrown.expectMessage("You must not specify more than one attribute when using refid")
10041 multiRootFileSet.setRefid(newReference(getProject(),"dummyref"))
10042 getProject()
10043 multiRootFileSet.setCache(true)
10044 thrown.expect(BuildException.class)
10045 thrown.expectMessage("You must not specify more than one attribute when using refid")
10046 multiRootFileSet.setRefid(newReference(getProject(),"dummyref"))
10047 getProject()
10048 multiRootFileSet.setType(MultiRootFileSet.SetType.file)
10049 thrown.expect(BuildException.class)
10050 thrown.expectMessage("You must not specify nested elements when using refid")
10051 multiRootFileSet.setRefid(newReference(getProject(),"dummyref"))
10052 getProject()
10053 multiRootFileSet.addConfiguredBaseDir(newFileResource(newFile(".")))
10054 thrown.expect(BuildException.class)
10055 thrown.expectMessage(endsWith(" doesn't support the dir attribute"))
10056 endsWith(" doesn't support the dir attribute")
10057 multiRootFileSet.setDir(newFile("."))
10058 buildRule.configureProject("src/etc/testcases/types/resources/resourcelist.xml")
10059 buildRule.executeTarget("tearDown")
10060 thrown.expect(BuildException.class)
10061 thrown.expectMessage("You must not specify more than one attribute when using refid")
10062 rl.setEncoding("foo")
10063 rl.setRefid(newReference(buildRule.getProject(),"dummyref"))
10064 buildRule.getProject()
10065 thrown.expect(BuildException.class)
10066 thrown.expectMessage("You must not specify more than one attribute when using refid")
10067 rl.setRefid(newReference(buildRule.getProject(),"dummyref"))
10068 buildRule.getProject()
10069 rl.setEncoding("foo")
10070 thrown.expect(BuildException.class)
10071 thrown.expectMessage("You must not specify nested elements when using refid")
10072 rl.add(newFileResource(buildRule.getProject(),"."))
10073 buildRule.getProject()
10074 rl.setRefid(newReference(buildRule.getProject(),"dummyref"))
10075 buildRule.getProject()
10076 thrown.expect(BuildException.class)
10077 thrown.expectMessage("You must not specify nested elements when using refid")
10078 rl.setRefid(newReference(buildRule.getProject(),"dummyref"))
10079 buildRule.getProject()
10080 rl.add(newFileResource(buildRule.getProject(),"."))
10081 buildRule.getProject()
10082 thrown.expect(BuildException.class)
10083 thrown.expectMessage("You must not specify nested elements when using refid")
10084 rl.addFilterChain(newFilterChain())
10085 rl.setRefid(newReference(buildRule.getProject(),"dummyref"))
10086 buildRule.getProject()
10087 thrown.expect(BuildException.class)
10088 thrown.expectMessage("You must not specify nested elements when using refid")
10089 rl.setRefid(newReference(buildRule.getProject(),"dummyref"))
10090 buildRule.getProject()
10091 rl.addFilterChain(newFilterChain())
10092 thrown.expect(BuildException.class)
10093 thrown.expectMessage("This data type contains a circular reference.")
10094 rl.setProject(buildRule.getProject())
10095 buildRule.getProject()
10096 rl.setRefid(newReference(buildRule.getProject(),"foo"))
10097 buildRule.getProject()
10098 resourceList.setProject(buildRule.getProject())
10099 buildRule.getProject()
10100 buildRule.getProject()
10101 buildRule.getProject().addReference("foo",resourceList)
10102 u.add(rl)
10103 u.setProject(buildRule.getProject())
10104 buildRule.getProject()
10105 resourceList.add(u)
10106 resourceList.size()
10107 buildRule.configureProject("src/etc/testcases/types/resources/tarentry.xml")
10108 buildRule.executeTarget("tearDown")
10109 buildRule.executeTarget("uncompressSource")
10110 getFileContents(buildRule.getProject().resolveFile("../../asf-logo.gif"))
10111 buildRule.getProject()
10112 buildRule.getProject().resolveFile("../../asf-logo.gif")
10113 getFileContents(newFile(buildRule.getProject().getProperty("output"),"asf-logo.gif"))
10114 buildRule.getProject()
10115 buildRule.getProject().getProperty("output")
10116 configureProject("src/etc/testcases/types/selectors.xml")
10117 executeTarget("setUp")
10118 super.getProject()
10119 super.getProject().getProperty("test.dir")
10120 super.getProject()
10121 super.getProject().getProperty("mirror.dir")
10122 getProjectDir()
10123 project.init()
10124 project.setBaseDir(basedir)
10125 getInstance()
10126 selector.setProject(getProject())
10127 getProject()
10128 getInstance()
10129 s.setError("test error")
10130 s.isSelected(beddir,filenames[0],files[0])
10131 fail("Cannot cause BuildException when setError() is called")
10132 be.getMessage()
10133 selectionString(beddir,files,selector)
10134 selectionString(mirrordir,mirrorfiles,selector)
10135 selectionString(beddir,files,selector)
10136 selectionString(selector)
10137 diff(expected,result)
10138 resolve(diff)
10139 expected.length()
10140 result.length()
10141 sb.append((expected.charAt(i)==result.charAt(i))?"-":"X")
10142 expected.charAt(i)
10143 result.charAt(i)
10144 sb.toString()
10145 filelist.length()
10146 filelist.length()
10147 filelist.charAt(i)
10148 sb.append(filenames[i])
10149 sb.append(";")
10150 sb.toString()
10151 tbed.setUp()
10152 tbed.makeTestbed()
10153 tbed.tearDown()
10154 tbed.setUp()
10155 tbed.makeMirror()
10156 tbed.deleteMirror()
10157 super(name)
10158 configureProject("src/etc/testcases/types/selectors.xml")
10159 executeTarget("setUp")
10160 super.getProject()
10161 super.getProject().getProperty("test.dir")
10162 super.getProject()
10163 super.getProject().getProperty("mirror.dir")
10164 getProjectDir()
10165 project.init()
10166 project.setBaseDir(basedir)
10167 super.tearDown()
10168 executeTarget("setupfiles")
10169 tbed.setUp()
10170 tbed.makeMirror()
10171 executeTarget("tearDown")
10172 buildRule.configureProject("src/etc/testcases/types/selectors.xml")
10173 buildRule.executeTarget("containsregexp")
10174 buildRule.getOutputDir()
10175 newFile(buildRule.getOutputDir(),"regexpseltestdest").listFiles()
10176 thrown.expect(BuildException.class)
10177 thrown.expectMessage("The text attribute is required")
10178 s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
10179 selectorRule.getProject()
10180 selectorRule.getProject().getBaseDir()
10181 selectorRule.getFilenames()
10182 selectorRule.getFiles()
10183 thrown.expect(BuildException.class)
10184 thrown.expectMessage("Invalid parameter garbage in")
10185 param.setName("garbage in")
10186 param.setValue("garbage out")
10187 s.setParameters(params)
10188 s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
10189 selectorRule.getProject()
10190 selectorRule.getProject().getBaseDir()
10191 selectorRule.getFilenames()
10192 selectorRule.getFiles()
10193 s.setText("no such string in test files")
10194 selectorRule.selectionString(s)
10195 s.setText("Apache Ant")
10196 selectorRule.selectionString(s)
10197 s.setText("apache ant")
10198 s.setCasesensitive(true)
10199 selectorRule.selectionString(s)
10200 s.setText("apache ant")
10201 s.setCasesensitive(false)
10202 selectorRule.selectionString(s)
10203 s.setText("ApacheAnt")
10204 s.setIgnorewhitespace(true)
10205 selectorRule.selectionString(s)
10206 s.setText("A p a c h e    A n t")
10207 s.setIgnorewhitespace(true)
10208 selectorRule.selectionString(s)
10209 before.setValue("before")
10210 equal.setValue("equal")
10211 after.setValue("after")
10212 thrown.expect(BuildException.class)
10213 thrown.expectMessage("You must provide a datetime or the number of milliseconds.")
10214 s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
10215 selectorRule.getProject()
10216 selectorRule.getProject().getBaseDir()
10217 selectorRule.getFilenames()
10218 selectorRule.getFiles()
10219 thrown.expect(BuildException.class)
10220 thrown.expectMessage("Date of 01/01/1969 01:01 AM results in negative milliseconds value"+" relative to epoch (January 1, 1970, 00:00:00 GMT).")
10221 s.setDatetime("01/01/1969 01:01 AM")
10222 s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
10223 selectorRule.getProject()
10224 selectorRule.getProject().getBaseDir()
10225 selectorRule.getFilenames()
10226 selectorRule.getFiles()
10227 thrown.expect(BuildException.class)
10228 thrown.expectMessage("Date of this is not a date Cannot be parsed correctly."+" It should be in 'MM/dd/yyyy hh:mm a' format.")
10229 s.setDatetime("this is not a date")
10230 s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
10231 selectorRule.getProject()
10232 selectorRule.getProject().getBaseDir()
10233 selectorRule.getFilenames()
10234 selectorRule.getFiles()
10235 thrown.expect(BuildException.class)
10236 thrown.expectMessage("Invalid parameter garbage in")
10237 param.setName("garbage in")
10238 param.setValue("garbage out")
10239 s.setParameters(params)
10240 s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
10241 selectorRule.getProject()
10242 selectorRule.getProject().getBaseDir()
10243 selectorRule.getFilenames()
10244 selectorRule.getFiles()
10245 thrown.expect(BuildException.class)
10246 thrown.expectMessage("Invalid millisecond setting garbage out")
10247 param.setName("millis")
10248 param.setValue("garbage out")
10249 s.setParameters(params)
10250 s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
10251 selectorRule.getProject()
10252 selectorRule.getProject().getBaseDir()
10253 selectorRule.getFilenames()
10254 selectorRule.getFiles()
10255 thrown.expect(BuildException.class)
10256 thrown.expectMessage("Invalid granularity setting garbage out")
10257 param.setName("granularity")
10258 param.setValue("garbage out")
10259 s.setParameters(params)
10260 s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
10261 selectorRule.getProject()
10262 selectorRule.getProject().getBaseDir()
10263 selectorRule.getFilenames()
10264 selectorRule.getFiles()
10265 s.setDatetime("10/10/1999 1:45 PM")
10266 s.setWhen(before)
10267 selectorRule.selectionString(s)
10268 s.setDatetime("10/10/1999 1:45 PM")
10269 s.setWhen(before)
10270 s.setCheckdirs(true)
10271 selectorRule.selectionString(s)
10272 s.setDatetime("10/10/1999 1:45 PM")
10273 s.setWhen(after)
10274 selectorRule.selectionString(s)
10275 s.setDatetime("11/21/2001 4:54 AM")
10276 s.setWhen(before)
10277 selectorRule.selectionString(s)
10278 s.setDatetime("11/21/2001 4:55 AM")
10279 s.setWhen(equal)
10280 selectorRule.selectionString(s)
10281 s.setDatetime("11/21/2001 4:55 AM")
10282 s.setMillis(s.getMillis())
10283 s.getMillis()
10284 s.setWhen(equal)
10285 selectorRule.selectionString(s)
10286 s.setDatetime("11/21/2001 4:56 AM")
10287 s.setWhen(after)
10288 selectorRule.selectionString(s)
10289 param1.setName("datetime")
10290 param1.setValue("11/21/2001 4:56 AM")
10291 param2.setName("when")
10292 param2.setValue("after")
10293 s.setParameters(params)
10294 selectorRule.selectionString(s)
10295 selectorRule.getMirrorFiles()
10296 selectorRule.getMirrorFiles()[5].lastModified()
10297 s.setMillis(testtime)
10298 s.setWhen(after)
10299 s.setGranularity(2)
10300 assumeTrue("Cannot setup file times for test",selectorRule.getMirrorFiles()[i].setLastModified(testtime-(3*60*60*100)))
10301 selectorRule.getMirrorFiles()
10302 selectorRule.getMirrorFiles()[i].setLastModified(testtime-(3*60*60*100))
10303 selectorRule.mirrorSelectionString(s)
10304 selectorRule.getMirrorFiles()
10305 selectorRule.getMirrorFiles()[6].lastModified()
10306 s.setMillis(testtime)
10307 s.setWhen(before)
10308 s.setGranularity(2)
10309 assumeTrue("Cannot setup file times for test",selectorRule.getMirrorFiles()[i].setLastModified(testtime+(3*60*60*100)))
10310 selectorRule.getMirrorFiles()
10311 selectorRule.getMirrorFiles()[i].setLastModified(testtime+(3*60*60*100))
10312 selectorRule.mirrorSelectionString(s)
10313 thrown.expect(BuildException.class)
10314 thrown.expectMessage("Cannot define more than one mapper")
10315 s.createMapper()
10316 s.createMapper()
10317 thrown.expect(BuildException.class)
10318 thrown.expectMessage("The targetdir attribute is required.")
10319 s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
10320 selectorRule.getProject()
10321 selectorRule.getProject().getBaseDir()
10322 selectorRule.getFilenames()
10323 selectorRule.getFiles()
10324 s.setTargetdir(selectorRule.getBeddir())
10325 selectorRule.getBeddir()
10326 selectorRule.selectionString(s)
10327 s.setTargetdir(selectorRule.getBeddir())
10328 selectorRule.getBeddir()
10329 identity.setValue("identity")
10330 s.createMapper()
10331 m.setType(identity)
10332 selectorRule.selectionString(s)
10333 s.setTargetdir(selectorRule.getBeddir())
10334 selectorRule.getBeddir()
10335 merge.setValue("merge")
10336 s.createMapper()
10337 m.setType(merge)
10338 m.setTo("asf-logo.gif.gz")
10339 selectorRule.selectionString(s)
10340 selectorRule.selectionString(s).substring(0,11)
10341 s.setTargetdir(selectorRule.getBeddir())
10342 selectorRule.getBeddir()
10343 merge.setValue("merge")
10344 s.createMapper()
10345 m.setType(merge)
10346 m.setTo("asf-logo.gif.bz2")
10347 selectorRule.selectionString(s)
10348 s.setTargetdir(subdir)
10349 glob.setValue("glob")
10350 s.createMapper()
10351 m.setType(glob)
10352 m.setFrom("*.bz2")
10353 m.setTo("*.tar.bz2")
10354 selectorRule.selectionString(s)
10355 selectorRule.getBeddir()
10356 s.setTargetdir(subdir)
10357 glob.setValue("glob")
10358 s.createMapper()
10359 m.setType(glob)
10360 m.setFrom("*.bz2")
10361 m.setTo("*.tar.bz2")
10362 selectorRule.selectionString(s)
10363 s.setTargetdir(newFile(selectorRule.getOutputDir(),"selectortest2"))
10364 selectorRule.getOutputDir()
10365 selectorRule.selectionString(s)
10366 s.setTargetdir(newFile(selectorRule.getOutputDir(),"selectortest2/tar/bz2"))
10367 selectorRule.getOutputDir()
10368 glob.setValue("glob")
10369 s.createMapper()
10370 m.setType(glob)
10371 m.setFrom("*.bz2")
10372 m.setTo("*.tar.bz2")
10373 selectorRule.mirrorSelectionString(s)
10374 selectorRule.selectionString(s)
10375 thrown.expect(BuildException.class)
10376 thrown.expectMessage("You must set at least one of the min or the max levels.")
10377 s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
10378 selectorRule.getProject()
10379 selectorRule.getProject().getBaseDir()
10380 selectorRule.getFilenames()
10381 selectorRule.getFiles()
10382 thrown.expect(BuildException.class)
10383 thrown.expectMessage("The maximum depth is lower than the minimum.")
10384 s.setMin(5)
10385 s.setMax(2)
10386 s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
10387 selectorRule.getProject()
10388 selectorRule.getProject().getBaseDir()
10389 selectorRule.getFilenames()
10390 selectorRule.getFiles()
10391 thrown.expect(BuildException.class)
10392 thrown.expectMessage("Invalid parameter garbage in")
10393 param.setName("garbage in")
10394 param.setValue("garbage out")
10395 s.setParameters(params)
10396 s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
10397 selectorRule.getProject()
10398 selectorRule.getProject().getBaseDir()
10399 selectorRule.getFilenames()
10400 selectorRule.getFiles()
10401 thrown.expect(BuildException.class)
10402 thrown.expectMessage("Invalid minimum value garbage out")
10403 param.setName("min")
10404 param.setValue("garbage out")
10405 s.setParameters(params)
10406 s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
10407 selectorRule.getProject()
10408 selectorRule.getProject().getBaseDir()
10409 selectorRule.getFilenames()
10410 selectorRule.getFiles()
10411 thrown.expect(BuildException.class)
10412 thrown.expectMessage("Invalid maximum value garbage out")
10413 param.setName("max")
10414 param.setValue("garbage out")
10415 s.setParameters(params)
10416 s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
10417 selectorRule.getProject()
10418 selectorRule.getProject().getBaseDir()
10419 selectorRule.getFilenames()
10420 selectorRule.getFiles()
10421 s.setMin(20)
10422 s.setMax(25)
10423 selectorRule.selectionString(s)
10424 s.setMin(0)
10425 selectorRule.selectionString(s)
10426 s.setMin(1)
10427 selectorRule.selectionString(s)
10428 s.setMax(0)
10429 selectorRule.selectionString(s)
10430 s.setMin(1)
10431 s.setMax(1)
10432 selectorRule.selectionString(s)
10433 thrown.expect(BuildException.class)
10434 thrown.expectMessage("The name or regex attribute is required")
10435 s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
10436 selectorRule.getProject()
10437 selectorRule.getProject().getBaseDir()
10438 selectorRule.getFilenames()
10439 selectorRule.getFiles()
10440 thrown.expect(BuildException.class)
10441 thrown.expectMessage("Invalid parameter garbage in")
10442 param.setName("garbage in")
10443 param.setValue("garbage out")
10444 s.setParameters(params)
10445 s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
10446 selectorRule.getProject()
10447 selectorRule.getProject().getBaseDir()
10448 selectorRule.getFilenames()
10449 selectorRule.getFiles()
10450 s.setName("no match possible")
10451 selectorRule.selectionString(s)
10452 s.setName("*.gz")
10453 selectorRule.selectionString(s)
10454 selectorRule.selectionString(s)
10455 s.setName("**/*.gz")
10456 s.setNegate(true)
10457 selectorRule.selectionString(s)
10458 s.setName("**/*.GZ")
10459 s.setCasesensitive(false)
10460 selectorRule.selectionString(s)
10461 param1.setName("name")
10462 param1.setValue("**/*.bz2")
10463 s.setParameters(params)
10464 selectorRule.selectionString(s)
10465 selectorRule.getProject()
10466 prj.getProperty("build.tests.value")
10467 thrown.expect(BuildException.class)
10468 thrown.expectMessage(name+" is not a legal value for this attribute")
10469 newModifiedSelector.CacheName().setValue(name)
10470 thrown.expect(BuildException.class)
10471 thrown.expectMessage(name+" is not a legal value for this attribute")
10472 newModifiedSelector.AlgorithmName().setValue(name)
10473 thrown.expect(BuildException.class)
10474 thrown.expectMessage(name+" is not a legal value for this attribute")
10475 newModifiedSelector.ComparatorName().setValue(name)
10476 thrown.expect(BuildException.class)
10477 thrown.expectMessage("Specified class ("+className+") is not an Algorithm.")
10478 getAlgoName(className)
10479 thrown.expect(BuildException.class)
10480 thrown.expectMessage("Specified class ("+className+") not found.")
10481 getAlgoName(className)
10482 getAlgoName("org.apache.tools.ant.types.selectors.modifiedselector.HashvalueAlgorithm")
10483 startsWith("HashvalueAlgorithm")
10484 getAlgoName("org.apache.tools.ant.types.selectors.MockAlgorithm")
10485 startsWith("MockAlgorithm")
10486 selectorRule.getProject()
10487 selectorRule.getProject().getProperty(MagicNames.ANT_HOME)
10488 bft.setUp()
10489 bft.doTarget("modifiedselectortest-customClasses")
10490 bft.getProperty("fs.full.value")
10491 bft.getProperty("fs.mod.value")
10492 containsString("ant.bat")
10493 bft.doTarget("modifiedselectortest-scenario-clean")
10494 bft.deletePropertiesfile()
10495 bft.tearDown()
10496 doDelayUpdateTest(1)
10497 doDelayUpdateTest(2)
10498 doDelayUpdateTest(3)
10499 sel.setProject(project)
10500 sel.setUpdate(true)
10501 sel.setDelayUpdate(true)
10502 sel.setClassLoader(this.getClass().getClassLoader())
10503 this.getClass()
10504 this.getClass().getClassLoader()
10505 sel.addClasspath(testclasses)
10506 sel.setAlgorithmClass("org.apache.tools.ant.types.selectors.MockAlgorithm")
10507 sel.setCacheClass("org.apache.tools.ant.types.selectors.MockCache")
10508 sel.configure()
10509 sel.getCache()
10510 sel.isSelected(base,"file1",file1)
10511 sel.isSelected(base,"file2",file2)
10512 project.fireTaskFinished()
10513 project.fireTargetFinished()
10514 project.fireBuildFinished()
10515 sel.setProject(selectorRule.getProject())
10516 selectorRule.getProject()
10517 sel.addClasspath(testclasses)
10518 sel.setAlgorithmClass(classname)
10519 sel.validate()
10520 sel.toString()
10521 s1.indexOf("algorithm=")
10522 s1.indexOf(" comparator=")
10523 s1.substring(posStart,posEnd)
10524 algo.startsWith("<")
10525 algo.substring(1)
10526 algo.endsWith(">")
10527 algo.substring(0,algo.length()-1)
10528 algo.length()
10529 cache.isValid()
10530 cache.setCachefile(cachefile)
10531 doTest(cache)
10532 cachefile.exists()
10533 selectorRule.getProject()
10534 selectorRule.getProject().getBaseDir()
10535 cache.setCachefile(cachefile)
10536 cache.put("key","value")
10537 cache.save()
10538 cachefile.exists()
10539 cache.delete()
10540 cachefile.exists()
10541 selectorRule.getProject()
10542 selectorRule.getProject().getBaseDir()
10543 s.setDelayUpdate(false)
10544 s.addParam("cache.cachefile",cachefile)
10545 cacheName.setValue("propertyfile")
10546 s.setCache(cacheName)
10547 s.setUpdate(true)
10548 selectorRule.selectionString(s)
10549 cachefile.exists()
10550 cachefile.delete()
10551 testFolder.newFile("tmp-cache.properties")
10552 s.setClassname("org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector")
10553 s.addParam(createParam("update","true"))
10554 createParam("update","true")
10555 s.addParam(createParam("cache.cachefile",cachefile.getAbsolutePath()))
10556 createParam("cache.cachefile",cachefile.getAbsolutePath())
10557 cachefile.getAbsolutePath()
10558 s.addParam(createParam("cache","propertyfile"))
10559 createParam("cache","propertyfile")
10560 selectorRule.selectionString(s)
10561 cachefile.exists()
10562 cache.isValid()
10563 cache.iterator()
10564 it1.hasNext()
10565 cache.put(key1,value1)
10566 cache.put(key2,value2)
10567 cache.get(key1)
10568 cache.get(key2)
10569 cache.iterator()
10570 it2.next()
10571 key1.equals(returned)
10572 key2.equals(returned)
10573 key1.equals(returned)
10574 key2.equals(returned)
10575 cache.delete()
10576 cache.iterator()
10577 it3.hasNext()
10578 doTest(algo)
10579 algo.setAlgorithm("MD5")
10580 doTest(algo)
10581 algo.setAlgorithm("SHA")
10582 doTest(algo)
10583 doTest(algo)
10584 algo.setAlgorithm("CRC")
10585 doTest(algo)
10586 algo.setAlgorithm("Adler")
10587 doTest(algo)
10588 cache.isValid()
10589 cache.iterator()
10590 it1.hasNext()
10591 cache.put(key1,value1)
10592 cache.put(key2,value2)
10593 cache.get(key1)
10594 cache.get(key2)
10595 cache.iterator()
10596 it2.next()
10597 key1.equals(returned)
10598 key2.equals(returned)
10599 key1.equals(returned)
10600 key2.equals(returned)
10601 cache.delete()
10602 cache.iterator()
10603 it3.hasNext()
10604 doTest(comp)
10605 RuleBasedCollator.getInstance()
10606 doTest(comp)
10607 compName.setValue("equal")
10608 s.setComparator(compName)
10609 performTests(s,"TTTTTTTTTTTT")
10610 s.getCache()
10611 s.getCache().delete()
10612 compName.setValue("rule")
10613 s.setComparator(compName)
10614 performTests(s,"TTTTTTTTTTTT")
10615 s.getCache()
10616 s.getCache().delete()
10617 bft.doTarget("modifiedselectortest-ResourceSimple")
10618 bft.deleteCachefile()
10619 bft.doTarget("modifiedselectortest-ResourceSelresTrue")
10620 bft.getLog()
10621 containsString("does not provide an InputStream")
10622 bft.deleteCachefile()
10623 bft.doTarget("modifiedselectortest-ResourceSelresFalse")
10624 bft.deleteCachefile()
10625 selectorRule.getProject()
10626 selectorRule.getProject().getProperty(MagicNames.ANT_HOME)
10627 bft.doTarget("modifiedselectortest-scenario-resourceSimple")
10628 bft.doTarget("modifiedselectortest-scenario-clean")
10629 bft.deleteCachefile()
10630 cache.isValid()
10631 cache.iterator()
10632 it1.hasNext()
10633 cache.put(key1,value1)
10634 cache.put(key2,value2)
10635 cache.get(key1)
10636 cache.get(key2)
10637 cache.iterator()
10638 it2.next()
10639 key1.equals(returned)
10640 key2.equals(returned)
10641 key1.equals(returned)
10642 key2.equals(returned)
10643 cache.delete()
10644 cache.iterator()
10645 it3.hasNext()
10646 selectorRule.getFiles()
10647 file.isDirectory()
10648 sbTrue.append("T")
10649 sbFalse.append("F")
10650 sbTrue.append("T")
10651 sbFalse.append("T")
10652 s.setSeldirs(true)
10653 performTests(s,sbTrue.toString())
10654 sbTrue.toString()
10655 s.getCache()
10656 s.getCache().delete()
10657 s.setSeldirs(false)
10658 performTests(s,sbFalse.toString())
10659 sbFalse.toString()
10660 s.getCache()
10661 s.getCache().delete()
10662 s.getCache()
10663 s.getCache().delete()
10664 performTests(s,"TTTTTTTTTTTT")
10665 performTests(s,"TFFFFFFFFFFT")
10666 bft.writeProperties("f2name="+f2name)
10667 bft.writeProperties("f3name="+f3name)
10668 bft.writeProperties("f4name="+f4name)
10669 bft.doTarget("modifiedselectortest-makeDirty")
10670 selectorRule.selectionString(s)
10671 selectorRule.getFiles()
10672 selectorRule.getFiles()
10673 selectorRule.getFiles()[i].isDirectory()
10674 selectorRule.getFilenames()
10675 selectorRule.getFilenames()[i].equalsIgnoreCase(f3name)
10676 selectorRule.getFilenames()
10677 selectorRule.getFilenames()[i].equalsIgnoreCase(f4name)
10678 expected.append(ch)
10679 resolve(diff(expected.toString(),results))
10680 diff(expected.toString(),results)
10681 expected.toString()
10682 expected.toString()
10683 s.getCache()
10684 s.getCache().delete()
10685 bft.deletePropertiesfile()
10686 System.getProperty("java.io.tmpdir")
10687 s.setClassname("org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector")
10688 s.addParam(createParam("cache.cachefile",cachefile))
10689 createParam("cache.cachefile",cachefile)
10690 s.addParam(createParam("cache","propertyfile"))
10691 createParam("cache","propertyfile")
10692 s.addParam(createParam("update","true"))
10693 createParam("update","true")
10694 s.addParam(createParam("comparator","rule"))
10695 createParam("comparator","rule")
10696 s.addParam(createParam("algorithm.name","sha"))
10697 createParam("algorithm.name","sha")
10698 s.addParam(createParam("algorithm","digest"))
10699 createParam("algorithm","digest")
10700 performTests(s,"TTTTTTTTTTTT")
10701 performTests(s,"TFFFFFFFFFFT")
10702 bft.writeProperties("f2name="+f2name)
10703 bft.writeProperties("f3name="+f3name)
10704 bft.writeProperties("f4name="+f4name)
10705 bft.doTarget("modifiedselectortest-makeDirty")
10706 selectorRule.selectionString(s)
10707 selectorRule.getFilenames()
10708 selectorRule.getFiles()
10709 selectorRule.getFiles()[i].isDirectory()
10710 selectorRule.getFilenames()
10711 selectorRule.getFilenames()[i].equalsIgnoreCase(f3name)
10712 selectorRule.getFilenames()
10713 selectorRule.getFilenames()[i].equalsIgnoreCase(f4name)
10714 expected.append(ch)
10715 resolve(diff(expected.toString(),results))
10716 diff(expected.toString(),results)
10717 expected.toString()
10718 expected.toString()
10719 (newFile(cachefile)).delete()
10720 bft.deletePropertiesfile()
10721 selectorRule.getProject()
10722 selectorRule.getProject().getProperty(MagicNames.ANT_HOME)
10723 doScenarioTest("modifiedselectortest-scenario-coreselector-defaults","cache.properties")
10724 selectorRule.getProject()
10725 selectorRule.getProject().getProperty(MagicNames.ANT_HOME)
10726 doScenarioTest("modifiedselectortest-scenario-coreselector-settings","core.cache.properties")
10727 selectorRule.getProject()
10728 selectorRule.getProject().getProperty(MagicNames.ANT_HOME)
10729 doScenarioTest("modifiedselectortest-scenario-customselector-settings","core.cache.properties")
10730 bft.setUp()
10731 selectorRule.getProject()
10732 selectorRule.getProject().getBaseDir()
10733 bft.doTarget("modifiedselectortest-scenario-clean")
10734 bft.doTarget(target)
10735 selectorRule.getOutputDir()
10736 selectorRule.getOutputDir()
10737 selectorRule.getOutputDir()
10738 cachefile.exists()
10739 to1.list()
10740 to2.list()
10741 to3.list()
10742 bft.doTarget("modifiedselectortest-scenario-clean")
10743 bft.deletePropertiesfile()
10744 bft.tearDown()
10745 cachefile.delete()
10746 p.setName(name)
10747 p.setValue(value)
10748 selectorRule.getProject()
10749 prj.getProperty("build.tests.value")
10750 super.after()
10751 setUp()
10752 executeTarget(target)
10753 super.getProject()
10754 super.getProject().getProperty(property)
10755 setUp()
10756 getProject()
10757 getProject().getBaseDir()
10758 file.getAbsolutePath()
10759 out.write(line)
10760 out.write(System.lineSeparator())
10761 System.lineSeparator()
10762 out.flush()
10763 out.close()
10764 e.printStackTrace()
10765 setUp()
10766 getProject()
10767 getProject().getBaseDir()
10768 newFile(getProject().getBaseDir(),propfile).delete()
10769 newFile(buildfile).getParentFile()
10770 cacheFile.delete()
10771 task.setTaskName("testTask")
10772 target.setName("testTarget")
10773 target.setProject(this)
10774 target.addTask(task)
10775 task.setOwningTarget(target)
10776 super.fireBuildFinished(null)
10777 super.fireSubBuildFinished(null)
10778 super.fireTargetStarted(target)
10779 super.fireTargetFinished(target,null)
10780 super.fireTaskStarted(task)
10781 super.fireTaskFinished(task,null)
10782 selectorRule.selectionString(selector)
10783 diff(expected,result)
10784 resolve(diff)
10785 expected.length()
10786 result.length()
10787 sb.append((expected.charAt(i)==result.charAt(i))?"-":"X")
10788 expected.charAt(i)
10789 result.charAt(i)
10790 sb.toString()
10791 selectorRule.getFilenames()
10792 filelist.length()
10793 filelist.length()
10794 selectorRule.getFilenames()
10795 filelist.charAt(i)
10796 sb.append(selectorRule.getFilenames()[i])
10797 selectorRule.getFilenames()
10798 sb.append(selectorRule.getFilenames()[i]).append(";")
10799 sb.toString()
10800 assumeFalse(Os.isFamily("windows"))
10801 Os.isFamily("windows")
10802 folder.newFile("f.txt")
10803 Files.getOwner(file.toPath())
10804 file.toPath()
10805 user.getName()
10806 s.setOwner(SELF)
10807 s.isSelected(null,null,file)
10808 folder.getRoot()
10809 Files.createSymbolicLink(target.toPath(),TEST_FILE.toPath())
10810 target.toPath()
10811 TEST_FILE.toPath()
10812 Files.getOwner(symbolicLink)
10813 root.getName()
10814 Files.getOwner(symbolicLink,LinkOption.NOFOLLOW_LINKS)
10815 user.getName()
10816 s.setOwner(SELF)
10817 s.isSelected(null,null,symbolicLink.toFile())
10818 symbolicLink.toFile()
10819 s.setFollowSymlinks(false)
10820 s.isSelected(null,null,symbolicLink.toFile())
10821 symbolicLink.toFile()
10822 assumeTrue("Not POSIX",Os.isFamily("unix"))
10823 Os.isFamily("unix")
10824 System.getProperty("os.name","unknown")
10825 System.getProperty("os.name","unknown").toLowerCase()
10826 osName.contains("sunos")
10827 Class.forName(jaasProviderClassName)
10828 assumeNoException("Cannot obtain OS-specific JAAS information",e)
10829 jaasProviderClass.getMethod(GROUP_GETTER)
10830 jaasProviderClass.getMethod(GROUP_GETTER).invoke(jaasProviderClass.newInstance())
10831 jaasProviderClass.newInstance()
10832 folder.newFile("f.txt")
10833 Files.readAttributes(file.toPath(),"unix:group,gid",LinkOption.NOFOLLOW_LINKS)
10834 file.toPath()
10835 fileAttributes.get("gid")
10836 fileAttributes.get("group")
10837 s.setGroup(actualGroup.getName())
10838 actualGroup.getName()
10839 s.isSelected(null,null,file)
10840 jaasProviderClass.getMethod(GROUP_GETTER)
10841 jaasProviderClass.getMethod(GROUP_GETTER).invoke(jaasProviderClass.newInstance())
10842 jaasProviderClass.newInstance()
10843 folder.getRoot()
10844 Files.createSymbolicLink(target.toPath(),TEST_FILE.toPath())
10845 target.toPath()
10846 TEST_FILE.toPath()
10847 Files.readAttributes(target.toPath(),"unix:group,gid",LinkOption.NOFOLLOW_LINKS)
10848 target.toPath()
10849 linkAttributes.get("gid")
10850 Files.readAttributes(target.toPath(),PosixFileAttributes.class)
10851 target.toPath()
10852 Files.readAttributes(target.toPath(),PosixFileAttributes.class).group()
10853 linkAttributes.get("group")
10854 linkGroup.getName()
10855 targetGroup.getName()
10856 s.setGroup(linkGroup.getName())
10857 linkGroup.getName()
10858 s.isSelected(null,null,symbolicLink.toFile())
10859 symbolicLink.toFile()
10860 s.setFollowSymlinks(false)
10861 s.isSelected(null,null,symbolicLink.toFile())
10862 symbolicLink.toFile()
10863 Arrays.asList("855","4555","-rwxr-xr-x","xrwr-xr-x")
10864 assumeTrue("Not POSIX",Os.isFamily("unix"))
10865 Os.isFamily("unix")
10866 s.setPermissions(argument)
10867 Arrays.asList("855","4555","-rwxr-xr-x","xrwr-xr-x")
10868 assumeTrue("Not POSIX",Os.isFamily("unix"))
10869 Os.isFamily("unix")
10870 s.setPermissions(argument)
10871 Arrays.asList("855","4555","-rwxr-xr-x","xrwr-xr-x")
10872 assumeTrue("Not POSIX",Os.isFamily("unix"))
10873 Os.isFamily("unix")
10874 s.setPermissions(argument)
10875 selectorRule.getBeddir()
10876 thrown.expect(BuildException.class)
10877 thrown.expectMessage("Cannot define more than one mapper")
10878 s.createMapper()
10879 s.createMapper()
10880 thrown.expect(BuildException.class)
10881 thrown.expectMessage("The targetdir attribute is required.")
10882 s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
10883 selectorRule.getProject()
10884 selectorRule.getProject().getBaseDir()
10885 selectorRule.getFilenames()
10886 selectorRule.getFiles()
10887 s.setTargetdir(beddir)
10888 selectorRule.selectionString(s)
10889 s.setTargetdir(beddir)
10890 s.createMapper()
10891 identity.setValue("identity")
10892 m.setType(identity)
10893 selectorRule.selectionString(s)
10894 selectorRule.getProject()
10895 selectorRule.getProject().resolveFile("../taskdefs/expected")
10896 s.setTargetdir(subdir)
10897 s.createMapper()
10898 flatten.setValue("flatten")
10899 m.setType(flatten)
10900 selectorRule.selectionString(s)
10901 s.setTargetdir(beddir)
10902 s.createMapper()
10903 merge.setValue("merge")
10904 m.setType(merge)
10905 m.setTo("asf-logo.gif.gz")
10906 selectorRule.selectionString(s)
10907 s.setTargetdir(subdir)
10908 s.createMapper()
10909 glob.setValue("glob")
10910 m.setType(glob)
10911 m.setFrom("*.bz2")
10912 m.setTo("*.tar.bz2")
10913 selectorRule.selectionString(s)
10914 selectorRule.getOutputDir()
10915 s.setTargetdir(subdir)
10916 selectorRule.selectionString(s)
10917 selectorRule.selectionString(s)
10918 buildRule.configureProject("src/etc/testcases/types/selectors/signedselector.xml")
10919 buildRule.executeTarget("selectsigned")
10920 buildRule.executeTarget("notselected")
10921 buildRule.executeTarget("name")
10922 less.setValue("less")
10923 equal.setValue("equal")
10924 more.setValue("more")
10925 thrown.expect(BuildException.class)
10926 thrown.expectMessage("The value attribute is required, and must be positive")
10927 s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
10928 selectorRule.getProject()
10929 selectorRule.getProject().getBaseDir()
10930 selectorRule.getFilenames()
10931 selectorRule.getFiles()
10932 thrown.expect(BuildException.class)
10933 thrown.expectMessage("The value attribute is required, and must be positive")
10934 s.setValue(-10)
10935 s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
10936 selectorRule.getProject()
10937 selectorRule.getProject().getBaseDir()
10938 selectorRule.getFilenames()
10939 selectorRule.getFiles()
10940 thrown.expect(BuildException.class)
10941 thrown.expectMessage("Invalid parameter garbage in")
10942 param.setName("garbage in")
10943 param.setValue("garbage out")
10944 s.setParameters(params)
10945 s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
10946 selectorRule.getProject()
10947 selectorRule.getProject().getBaseDir()
10948 selectorRule.getFilenames()
10949 selectorRule.getFiles()
10950 thrown.expect(BuildException.class)
10951 thrown.expectMessage("Invalid size setting garbage out")
10952 param.setName("value")
10953 param.setValue("garbage out")
10954 s.setParameters(params)
10955 s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
10956 selectorRule.getProject()
10957 selectorRule.getProject().getBaseDir()
10958 selectorRule.getFilenames()
10959 selectorRule.getFiles()
10960 thrown.expect(BuildException.class)
10961 thrown.expectMessage("garbage out is not a legal value for this attribute")
10962 param1.setName("value")
10963 param1.setValue("5")
10964 param2.setName("units")
10965 param2.setValue("garbage out")
10966 s.setParameters(params)
10967 s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
10968 selectorRule.getProject()
10969 selectorRule.getProject().getBaseDir()
10970 selectorRule.getFilenames()
10971 selectorRule.getFiles()
10972 s.setValue(10)
10973 s.setWhen(less)
10974 selectorRule.selectionString(s)
10975 s.setValue(10)
10976 s.setWhen(more)
10977 selectorRule.selectionString(s)
10978 s.setValue(32)
10979 s.setWhen(equal)
10980 selectorRule.selectionString(s)
10981 kilo.setValue("K")
10982 s.setValue(7)
10983 s.setWhen(more)
10984 s.setUnits(kilo)
10985 selectorRule.selectionString(s)
10986 kibi.setValue("Ki")
10987 s.setValue(7)
10988 s.setWhen(more)
10989 s.setUnits(kibi)
10990 selectorRule.selectionString(s)
10991 tibi.setValue("Ti")
10992 s.setValue(99999)
10993 s.setWhen(more)
10994 s.setUnits(tibi)
10995 selectorRule.selectionString(s)
10996 param1.setName("value")
10997 param1.setValue("20")
10998 param2.setName("units")
10999 param2.setValue("Ki")
11000 param3.setName("when")
11001 param3.setValue("more")
11002 s.setParameters(params)
11003 selectorRule.selectionString(s)
11004 testCaseInsensitiveParameterParsing("units")
11005 testCaseInsensitiveParameterParsing("UNITS")
11006 Locale.getDefault()
11007 Locale.setDefault(newLocale("tr"))
11008 testCaseInsensitiveParameterParsing("units")
11009 Locale.setDefault(l)
11010 Locale.getDefault()
11011 Locale.setDefault(newLocale("tr"))
11012 testCaseInsensitiveParameterParsing("UNITS")
11013 Locale.setDefault(l)
11014 thrown.expect(BuildException.class)
11015 thrown.expectMessage("foo is not a legal value for this attribute")
11016 p.setName(name)
11017 p.setValue("foo")
11018 s.setParameters(p)
11019 pat.depth()
11020 pat.getPattern()
11021 pat.containsPattern(SelectorUtils.DEEP_TREE_MATCH)
11022 pat.containsPattern(".svn")
11023 newTokenizedPattern(DOT_SVN_PATTERN).endsWith(SelectorUtils.DEEP_TREE_MATCH)
11024 newTokenizedPattern(DOT_SVN_PATTERN).withoutLastToken()
11025 newTokenizedPattern(DOT_SVN_PATTERN).withoutLastToken().getPattern()
11026 f.getAbsolutePath()
11027 newTokenizedPattern(DOT_SVN_PATTERN).matchPath(p,true)
11028 newTokenizedPattern(DOT_SVN_PATTERN).withoutLastToken()
11029 newTokenizedPattern(DOT_SVN_PATTERN).withoutLastToken().matchPath(p,true)
11030 newTokenizedPattern(SelectorUtils.DEEP_TREE_MATCH).matchPath(p,true)
11031 newTokenizedPattern("*").matchPath(p,true)
11032 thrown.expect(BuildException.class)
11033 thrown.expectMessage("The type attribute is required")
11034 s.isSelected(selectorRule.getProject().getBaseDir(),selectorRule.getFilenames()[0],selectorRule.getFiles()[0])
11035 selectorRule.getProject()
11036 selectorRule.getProject().getBaseDir()
11037 selectorRule.getFilenames()
11038 selectorRule.getFiles()
11039 directory.setValue("dir")
11040 s.setType(directory)
11041 selectorRule.selectionString(s)
11042 file.setValue("file")
11043 s.setType(file)
11044 selectorRule.selectionString(s)
11045 base64Converter.encode(newbyte[]{0,0,(byte)0xFF})
11046 base64Converter.encode("Hello World".getBytes())
11047 "Hello World".getBytes()
11048 p.init()
11049 ClasspathUtils.getUniqueClassLoaderForPath(p,null,false)
11050 c.getResources("org/apache/tools/ant/taskdefs/defaults.properties")
11051 enumeration.hasMoreElements()
11052 list.append(" ")
11053 list.append(" ").append(enumeration.nextElement())
11054 enumeration.nextElement()
11055 CollectionUtils.equals(null,newVector())
11056 CollectionUtils.equals(newVector(),null)
11057 CollectionUtils.equals(newVector(),newVector())
11058 v1.addElement("foo")
11059 s2.push("foo")
11060 CollectionUtils.equals(v1,s2)
11061 CollectionUtils.equals(s2,v1)
11062 v1.addElement("bar")
11063 CollectionUtils.equals(v1,s2)
11064 CollectionUtils.equals(s2,v1)
11065 s2.push("bar")
11066 CollectionUtils.equals(v1,s2)
11067 CollectionUtils.equals(s2,v1)
11068 s2.push("baz")
11069 CollectionUtils.equals(v1,s2)
11070 CollectionUtils.equals(s2,v1)
11071 v1.addElement("baz")
11072 CollectionUtils.equals(v1,s2)
11073 CollectionUtils.equals(s2,v1)
11074 v1.addElement("zyzzy")
11075 s2.push("zyzzy2")
11076 CollectionUtils.equals(v1,s2)
11077 CollectionUtils.equals(s2,v1)
11078 CollectionUtils.equals(null,newHashtable())
11079 CollectionUtils.equals(newHashtable(),null)
11080 CollectionUtils.equals(newHashtable(),newProperties())
11081 h1.put("foo","")
11082 p2.put("foo","")
11083 CollectionUtils.equals(h1,p2)
11084 CollectionUtils.equals(p2,h1)
11085 h1.put("bar","")
11086 CollectionUtils.equals(h1,p2)
11087 CollectionUtils.equals(p2,h1)
11088 p2.put("bar","")
11089 CollectionUtils.equals(h1,p2)
11090 CollectionUtils.equals(p2,h1)
11091 p2.put("baz","")
11092 CollectionUtils.equals(h1,p2)
11093 CollectionUtils.equals(p2,h1)
11094 h1.put("baz","")
11095 CollectionUtils.equals(h1,p2)
11096 CollectionUtils.equals(p2,h1)
11097 h1.put("zyzzy","")
11098 p2.put("zyzzy2","")
11099 CollectionUtils.equals(h1,p2)
11100 CollectionUtils.equals(p2,h1)
11101 p2.put("zyzzy","")
11102 h1.put("zyzzy2","")
11103 CollectionUtils.equals(h1,p2)
11104 CollectionUtils.equals(p2,h1)
11105 h1.put("dada","1")
11106 p2.put("dada","2")
11107 CollectionUtils.equals(h1,p2)
11108 CollectionUtils.equals(p2,h1)
11109 DateUtils.formatElapsedTime(50*1000)
11110 DateUtils.formatElapsedTime(65*1000)
11111 DateUtils.formatElapsedTime(120*1000)
11112 DateUtils.formatElapsedTime(121*1000)
11113 DateUtils.formatElapsedTime(1000*175573)
11114 DateUtils.formatElapsedTime(Long.MAX_VALUE)
11115 TimeZone.getTimeZone("GMT+1")
11116 Calendar.getInstance(timeZone)
11117 cal.set(2002,1,23,10,11,12)
11118 DateUtils.format(cal.getTime(),DateUtils.ISO8601_DATETIME_PATTERN)
11119 cal.getTime()
11120 TimeZone.getTimeZone("GMT")
11121 Calendar.getInstance(timeZone)
11122 cal.set(2002,1,23)
11123 DateUtils.format(cal.getTime(),DateUtils.ISO8601_DATE_PATTERN)
11124 cal.getTime()
11125 TimeZone.getTimeZone("GMT+1")
11126 Calendar.getInstance(timeZone)
11127 cal.set(2002,1,23,21,11,12)
11128 DateUtils.format(cal.getTime(),DateUtils.ISO8601_TIME_PATTERN)
11129 cal.getTime()
11130 DateUtils.format(ms,DateUtils.ISO8601_TIME_PATTERN)
11131 TimeZone.getTimeZone("GMT")
11132 Calendar.getInstance(timeZone)
11133 cal.set(2002,2,27)
11134 DateUtils.getPhaseOfMoon(cal)
11135 cal.set(2002,2,12)
11136 DateUtils.getPhaseOfMoon(cal)
11137 newDeweyDecimal("1.2.3").toString()
11138 newDeweyDecimal("1.2.3").hashCode()
11139 newDeweyDecimal("1.2.3").hashCode()
11140 newDeweyDecimal("1.2.3").compareTo(newDeweyDecimal("1.2"))
11141 newDeweyDecimal("1.2").compareTo(newDeweyDecimal("1.2.3"))
11142 newDeweyDecimal("1.2.3").compareTo(newDeweyDecimal("1.2.3"))
11143 newDeweyDecimal("1.2.3").compareTo(newDeweyDecimal("1.1.4"))
11144 newDeweyDecimal("1.2.3").compareTo(newDeweyDecimal("1.2.2.9"))
11145 newDeweyDecimal("1.2.0").compareTo(newDeweyDecimal("1.2"))
11146 newDeweyDecimal("1.2").compareTo(newDeweyDecimal("1.2.0"))
11147 newDeweyDecimal(args).toString()
11148 newDeweyDecimal(args).toString()
11149 dd.getSize()
11150 dd.get(1)
11151 first.isGreaterThanOrEqual(newDeweyDecimal("1"))
11152 first.isGreaterThanOrEqual(newDeweyDecimal("1.2"))
11153 first.isGreaterThanOrEqual(newDeweyDecimal("1.2.3"))
11154 first.isGreaterThanOrEqual(newDeweyDecimal("1.2.3.0"))
11155 first.isGreaterThanOrEqual(newDeweyDecimal("1.2.4"))
11156 first.isGreaterThanOrEqual(newDeweyDecimal("1.3"))
11157 first.isGreaterThanOrEqual(newDeweyDecimal("2"))
11158 dd.equals("other")
11159 dd.equals(null)
11160 dd.equals(newDeweyDecimal("1.2.3"))
11161 dd.equals(newDeweyDecimal("1.2.3.0"))
11162 dd.isLessThan(newDeweyDecimal("2"))
11163 dd.isLessThan(newDeweyDecimal("1"))
11164 dd.isLessThan(newDeweyDecimal("1.2.3"))
11165 dd.isLessThanOrEqual(newDeweyDecimal("2"))
11166 dd.isLessThanOrEqual(newDeweyDecimal("1"))
11167 dd.isLessThanOrEqual(newDeweyDecimal("1.2.3"))
11168 w.isReference("&#20;")
11169 w.isReference("&#x20;")
11170 w.isReference("&#xA0;")
11171 w.isReference("&#A0;")
11172 w.isReference("20;")
11173 w.isReference("&#20")
11174 w.isReference("&quot;")
11175 w.isReference("&apos;")
11176 w.isReference("&gt;")
11177 w.isReference("&lt;")
11178 w.isReference("&amp;")
11179 w.encode("&#20;")
11180 w.encode("&#x20;")
11181 w.encode("&#xA0;")
11182 w.encode("&#A0;")
11183 w.encode("20;")
11184 w.encode("&#20")
11185 w.encode("&quot;")
11186 w.encode("&apos;")
11187 w.encode("&gt;")
11188 w.encode("&lt;")
11189 w.encode("&amp;")
11190 w.encode("\"")
11191 w.encode("<")
11192 w.encode("&")
11193 w.encode("\u0017")
11194 w.encode("\r\n\t")
11195 w.encodeAttributeValue("&#20;")
11196 w.encodeAttributeValue("&#x20;")
11197 w.encodeAttributeValue("&#xA0;")
11198 w.encodeAttributeValue("&#A0;")
11199 w.encodeAttributeValue("20;")
11200 w.encodeAttributeValue("&#20")
11201 w.encodeAttributeValue("&quot;")
11202 w.encodeAttributeValue("&apos;")
11203 w.encodeAttributeValue("&gt;")
11204 w.encodeAttributeValue("&lt;")
11205 w.encodeAttributeValue("&amp;")
11206 w.encodeAttributeValue("\"")
11207 w.encodeAttributeValue("<")
11208 w.encodeAttributeValue("&")
11209 w.encodeAttributeValue("\u0017")
11210 w.encodeAttributeValue("\r\n\t")
11211 DOMUtils.newDocument()
11212 d.createElement("root")
11213 root.setAttribute("foo","bar\nbaz")
11214 w.write(root,sw,0,"  ")
11215 String.format("<root foo=\"bar&#xa;baz\" />%n")
11216 sw.toString()
11217 w.encodedata("&#20;\"20;&")
11218 w.encodedata("\u0017")
11219 w.isLegalCharacter('\u0000')
11220 w.isLegalCharacter('\t')
11221 w.isLegalCharacter('\n')
11222 w.isLegalCharacter('\r')
11223 w.isLegalCharacter('\u001F')
11224 w.isLegalCharacter('\u0020')
11225 w.isLegalCharacter('\uD7FF')
11226 w.isLegalCharacter('\uD800')
11227 w.isLegalCharacter('\uDFFF')
11228 w.isLegalCharacter('\uE000')
11229 w.isLegalCharacter('\uFFFD')
11230 w.isLegalCharacter('\uFFFE')
11231 w.encodedata("]>")
11232 w.encodedata("]]")
11233 w.encodedata("]]>")
11234 w.encodedata("]]>A")
11235 w.encodedata("A]]>")
11236 w.encodedata("A]]>A")
11237 w.encodedata("A]]>B]]>C")
11238 DOMUtils.newDocument()
11239 d.createElement("root")
11240 DOMUtils.appendTextElement(root,"textElement","content")
11241 w.write(root,sw,0,"  ")
11242 String.format("<root>%n  <textElement>content</textElement>%n</root>%n")
11243 sw.toString()
11244 DOMUtils.newDocument()
11245 d.createElement("root")
11246 DOMUtils.appendCDATAElement(root,"cdataElement","content")
11247 w.write(root,sw,0,"  ")
11248 String.format("<root>%n  <cdataElement><![CDATA[content]]></cdataElement>%n"+"</root>%n")
11249 sw.toString()
11250 DOMUtils.newDocument()
11251 d.createElement("root")
11252 DOMUtils.createChildElement(root,"emptyElement")
11253 w.write(root,sw,0,"  ")
11254 String.format("<root>%n  <emptyElement />%n</root>%n")
11255 sw.toString()
11256 DOMUtils.newDocument()
11257 d.createElementNS("urn:foo","root")
11258 root.setAttributeNS("urn:foo2","bar","baz")
11259 w.write(root,sw,0,"  ")
11260 String.format("<root bar=\"baz\" />%n")
11261 sw.toString()
11262 DOMUtils.newDocument()
11263 d.createElementNS("urn:foo","root")
11264 root.setAttributeNS("urn:foo2","bar","baz")
11265 w.write(root,sw,0,"  ")
11266 String.format("<root bar=\"baz\" xmlns=\"urn:foo\" />%n")
11267 sw.toString()
11268 DOMUtils.newDocument()
11269 d.createElementNS("urn:foo","root")
11270 root.setAttributeNS("urn:foo2","bar","baz")
11271 w.write(root,sw,0,"  ")
11272 String.format("<root ns0:bar=\"baz\" xmlns=\"urn:foo\""+" xmlns:ns0=\"urn:foo2\" />%n")
11273 sw.toString()
11274 DOMUtils.newDocument()
11275 d.createElementNS("urn:foo","root")
11276 root.setAttributeNS("urn:foo2","bar","baz")
11277 w.write(root,sw,0,"  ")
11278 String.format("<root ns0:bar=\"baz\" xmlns:ns0=\"urn:foo2\" />%n")
11279 sw.toString()
11280 DOMUtils.newDocument()
11281 d.createElementNS("urn:foo","root")
11282 d.createElementNS("urn:foo","child")
11283 root.appendChild(child)
11284 w.write(root,sw,0,"  ")
11285 String.format("<root xmlns=\"urn:foo\">%n  <child />%n</root>%n")
11286 sw.toString()
11287 DOMUtils.newDocument()
11288 d.createElementNS("urn:foo","root")
11289 d.createElementNS("urn:foo2","child")
11290 root.appendChild(child)
11291 d.createElementNS("urn:foo2","child")
11292 root.appendChild(child2)
11293 d.createElementNS("urn:foo2","grandchild")
11294 child2.appendChild(grandChild)
11295 d.createElementNS("urn:foo2","child")
11296 root.appendChild(child3)
11297 w.write(root,sw,0,"  ")
11298 String.format("<root xmlns=\"urn:foo\">%n"+"  <ns0:child xmlns:ns0=\"urn:foo2\" />%n"+"  <ns1:child xmlns:ns1=\"urn:foo2\">%n"+"    <ns1:grandchild />%n"+"  </ns1:child>%n"+"  <ns2:child xmlns:ns2=\"urn:foo2\" />%n"+"</root>%n")
11299 sw.toString()
11300 newFile(File.separator).getAbsolutePath()
11301 newFile(File.separator).getAbsolutePath().toUpperCase()
11302 folder.newFile("dummy")
11303 fos.write(newbyte[0])
11304 assumeTrue("Could not change file modified time",removeThis.setLastModified(removeThis.lastModified()-2000))
11305 removeThis.setLastModified(removeThis.lastModified()-2000)
11306 removeThis.lastModified()
11307 removeThis.lastModified()
11308 getFileUtils()
11309 getFileUtils().setFileLastModified(removeThis,-1)
11310 removeThis.lastModified()
11311 getFileUtils()
11312 getFileUtils().setFileLastModified(removeThis,secondModTime+millisperday)
11313 removeThis.lastModified()
11314 assumeTrue("DOS or NetWare",!Os.isFamily("dos")&&!Os.isFamily("netware"))
11315 Os.isFamily("dos")
11316 Os.isFamily("netware")
11317 getFileUtils()
11318 getFileUtils().resolveFile(null,"/")
11319 getFileUtils().resolveFile(null,"/").getPath()
11320 getFileUtils()
11321 getFileUtils().resolveFile(null,"\\")
11322 getFileUtils().resolveFile(null,"\\").getPath()
11323 assumeTrue("Not DOS or Netware",Os.isFamily("dos")||Os.isFamily("netware"))
11324 Os.isFamily("dos")
11325 Os.isFamily("netware")
11326 localize(File.separator)
11327 getFileUtils()
11328 getFileUtils().resolveFile(null,"/")
11329 getFileUtils().resolveFile(null,"/").getPath()
11330 localize(File.separator)
11331 getFileUtils()
11332 getFileUtils().resolveFile(null,"\\")
11333 getFileUtils().resolveFile(null,"\\").getPath()
11334 getFileUtils()
11335 getFileUtils().resolveFile(null,driveSpec+"/")
11336 getFileUtils().resolveFile(null,driveSpec+"/").getPath()
11337 getFileUtils()
11338 getFileUtils().resolveFile(null,driveSpec+"\\")
11339 getFileUtils().resolveFile(null,driveSpec+"\\").getPath()
11340 getFileUtils()
11341 getFileUtils().resolveFile(null,driveSpecLower+"/")
11342 getFileUtils().resolveFile(null,driveSpecLower+"/").getPath()
11343 getFileUtils()
11344 getFileUtils().resolveFile(null,driveSpecLower+"\\")
11345 getFileUtils().resolveFile(null,driveSpecLower+"\\").getPath()
11346 getFileUtils()
11347 getFileUtils().resolveFile(null,driveSpec+"/////")
11348 getFileUtils().resolveFile(null,driveSpec+"/////").getPath()
11349 getFileUtils()
11350 getFileUtils().resolveFile(null,driveSpec+"\\\\\\\\\\\\")
11351 getFileUtils().resolveFile(null,driveSpec+"\\\\\\\\\\\\").getPath()
11352 Os.isFamily("netware")
11353 getFileUtils()
11354 getFileUtils().resolveFile(null,driveSpec+"/")
11355 getFileUtils().resolveFile(null,driveSpec+"/").getPath()
11356 getFileUtils()
11357 getFileUtils().resolveFile(null,driveSpec+"\\")
11358 getFileUtils().resolveFile(null,driveSpec+"\\").getPath()
11359 getFileUtils()
11360 getFileUtils().resolveFile(null,driveSpecLower+"/")
11361 getFileUtils().resolveFile(null,driveSpecLower+"/").getPath()
11362 getFileUtils()
11363 getFileUtils().resolveFile(null,driveSpecLower+"\\")
11364 getFileUtils().resolveFile(null,driveSpecLower+"\\").getPath()
11365 getFileUtils()
11366 getFileUtils().resolveFile(null,driveSpec+"/////")
11367 getFileUtils().resolveFile(null,driveSpec+"/////").getPath()
11368 getFileUtils()
11369 getFileUtils().resolveFile(null,driveSpec+"\\\\\\\\\\\\")
11370 getFileUtils().resolveFile(null,driveSpec+"\\\\\\\\\\\\").getPath()
11371 assumeFalse("is DOS",Os.isFamily("dos"))
11372 Os.isFamily("dos")
11373 System.getProperty("user.dir")
11374 getFileUtils()
11375 getFileUtils().resolveFile(null,driveSpec+"/")
11376 getFileUtils().resolveFile(null,driveSpec+"/").getPath()
11377 getFileUtils()
11378 getFileUtils().resolveFile(null,driveSpec+"\\")
11379 getFileUtils().resolveFile(null,driveSpec+"\\").getPath()
11380 getFileUtils()
11381 getFileUtils().resolveFile(null,driveSpecLower+"/")
11382 getFileUtils().resolveFile(null,driveSpecLower+"/").getPath()
11383 getFileUtils()
11384 getFileUtils().resolveFile(null,driveSpecLower+"\\")
11385 getFileUtils().resolveFile(null,driveSpecLower+"\\").getPath()
11386 localize("/1/2/3/4")
11387 getFileUtils()
11388 getFileUtils().resolveFile(newFile(localize("/1/2/3")),"4")
11389 localize("/1/2/3")
11390 getFileUtils().resolveFile(newFile(localize("/1/2/3")),"4").getPath()
11391 localize("/1/2/3/4")
11392 getFileUtils()
11393 getFileUtils().resolveFile(newFile(localize("/1/2/3")),"./4")
11394 localize("/1/2/3")
11395 getFileUtils().resolveFile(newFile(localize("/1/2/3")),"./4").getPath()
11396 localize("/1/2/3/4")
11397 getFileUtils()
11398 getFileUtils().resolveFile(newFile(localize("/1/2/3")),".\\4")
11399 localize("/1/2/3")
11400 getFileUtils().resolveFile(newFile(localize("/1/2/3")),".\\4").getPath()
11401 localize("/1/2/3/4")
11402 getFileUtils()
11403 getFileUtils().resolveFile(newFile(localize("/1/2/3")),"./.\\4")
11404 localize("/1/2/3")
11405 getFileUtils().resolveFile(newFile(localize("/1/2/3")),"./.\\4").getPath()
11406 localize("/1/2/3/4")
11407 getFileUtils()
11408 getFileUtils().resolveFile(newFile(localize("/1/2/3")),"../3/4")
11409 localize("/1/2/3")
11410 getFileUtils().resolveFile(newFile(localize("/1/2/3")),"../3/4").getPath()
11411 localize("/1/2/3/4")
11412 getFileUtils()
11413 getFileUtils().resolveFile(newFile(localize("/1/2/3")),"..\\3\\4")
11414 localize("/1/2/3")
11415 getFileUtils().resolveFile(newFile(localize("/1/2/3")),"..\\3\\4").getPath()
11416 localize("/1/2/3/4")
11417 getFileUtils()
11418 getFileUtils().resolveFile(newFile(localize("/1/2/3")),"../../5/.././2/./3/6/../4")
11419 localize("/1/2/3")
11420 getFileUtils().resolveFile(newFile(localize("/1/2/3")),"../../5/.././2/./3/6/../4").getPath()
11421 localize("/1/2/3/4")
11422 getFileUtils()
11423 getFileUtils().resolveFile(newFile(localize("/1/2/3")),"..\\../5/..\\./2/./3/6\\../4")
11424 localize("/1/2/3")
11425 getFileUtils().resolveFile(newFile(localize("/1/2/3")),"..\\../5/..\\./2/./3/6\\../4").getPath()
11426 localize("/1/../../b")
11427 getFileUtils()
11428 getFileUtils().resolveFile(newFile(localize("/1")),"../../b")
11429 localize("/1")
11430 assumeTrue("DOS or NetWare",!Os.isFamily("dos")&&!Os.isFamily("netware"))
11431 Os.isFamily("dos")
11432 Os.isFamily("netware")
11433 getFileUtils()
11434 getFileUtils().normalize("/")
11435 getFileUtils().normalize("/").getPath()
11436 getFileUtils()
11437 getFileUtils().normalize("\\")
11438 getFileUtils().normalize("\\").getPath()
11439 thrown.expect(BuildException.class)
11440 getFileUtils()
11441 getFileUtils().normalize(driveSpec)
11442 getFileUtils().normalize(driveSpec).getPath()
11443 assumeTrue("Not DOS or Netware",Os.isFamily("dos")||Os.isFamily("netware"))
11444 Os.isFamily("dos")
11445 Os.isFamily("netware")
11446 thrown.expect(BuildException.class)
11447 getFileUtils()
11448 getFileUtils().normalize("/")
11449 getFileUtils().normalize("/").getPath()
11450 assumeTrue("Not DOS or Netware",Os.isFamily("dos")||Os.isFamily("netware"))
11451 Os.isFamily("dos")
11452 Os.isFamily("netware")
11453 thrown.expect(BuildException.class)
11454 getFileUtils()
11455 getFileUtils().normalize("\\")
11456 getFileUtils().normalize("\\").getPath()
11457 assumeTrue("Not DOS or Netware",Os.isFamily("dos")||Os.isFamily("netware"))
11458 Os.isFamily("dos")
11459 Os.isFamily("netware")
11460 Os.isFamily("dos")
11461 getFileUtils()
11462 getFileUtils().normalize(driveSpec+"/")
11463 getFileUtils().normalize(driveSpec+"/").getPath()
11464 getFileUtils()
11465 getFileUtils().normalize(driveSpec+"\\")
11466 getFileUtils().normalize(driveSpec+"\\").getPath()
11467 getFileUtils()
11468 getFileUtils().normalize(driveSpecLower+"/")
11469 getFileUtils().normalize(driveSpecLower+"/").getPath()
11470 getFileUtils()
11471 getFileUtils().normalize(driveSpecLower+"\\")
11472 getFileUtils().normalize(driveSpecLower+"\\").getPath()
11473 getFileUtils()
11474 getFileUtils().normalize(driveSpec+"/////")
11475 getFileUtils().normalize(driveSpec+"/////").getPath()
11476 getFileUtils()
11477 getFileUtils().normalize(driveSpec+"\\\\\\\\\\\\")
11478 getFileUtils().normalize(driveSpec+"\\\\\\\\\\\\").getPath()
11479 thrown.expect(BuildException.class)
11480 getFileUtils()
11481 getFileUtils().normalize(driveSpec)
11482 getFileUtils().normalize(driveSpec).getPath()
11483 Os.isFamily("netware")
11484 getFileUtils()
11485 getFileUtils().normalize(driveSpec)
11486 getFileUtils().normalize(driveSpec).getPath()
11487 getFileUtils()
11488 getFileUtils().normalize(driveSpec+"/")
11489 getFileUtils().normalize(driveSpec+"/").getPath()
11490 getFileUtils()
11491 getFileUtils().normalize(driveSpec+"\\")
11492 getFileUtils().normalize(driveSpec+"\\").getPath()
11493 getFileUtils()
11494 getFileUtils().normalize(driveSpecLower)
11495 getFileUtils().normalize(driveSpecLower).getPath()
11496 getFileUtils()
11497 getFileUtils().normalize(driveSpecLower+"/")
11498 getFileUtils().normalize(driveSpecLower+"/").getPath()
11499 getFileUtils()
11500 getFileUtils().normalize(driveSpecLower+"\\")
11501 getFileUtils().normalize(driveSpecLower+"\\").getPath()
11502 getFileUtils()
11503 getFileUtils().normalize(driveSpecLower+"\\junk")
11504 getFileUtils().normalize(driveSpecLower+"\\junk").getPath()
11505 getFileUtils()
11506 getFileUtils().normalize(driveSpec+"/////")
11507 getFileUtils().normalize(driveSpec+"/////").getPath()
11508 getFileUtils()
11509 getFileUtils().normalize(driveSpec+"\\\\\\\\\\\\")
11510 getFileUtils().normalize(driveSpec+"\\\\\\\\\\\\").getPath()
11511 localize("/1/2/3/4")
11512 getFileUtils()
11513 getFileUtils().normalize(localize("/1/2/3/4"))
11514 localize("/1/2/3/4")
11515 getFileUtils().normalize(localize("/1/2/3/4")).getPath()
11516 localize("/1/2/3/4")
11517 getFileUtils()
11518 getFileUtils().normalize(localize("/1/2/3/./4"))
11519 localize("/1/2/3/./4")
11520 getFileUtils().normalize(localize("/1/2/3/./4")).getPath()
11521 localize("/1/2/3/4")
11522 getFileUtils()
11523 getFileUtils().normalize(localize("/1/2/3/.\\4"))
11524 localize("/1/2/3/.\\4")
11525 getFileUtils().normalize(localize("/1/2/3/.\\4")).getPath()
11526 localize("/1/2/3/4")
11527 getFileUtils()
11528 getFileUtils().normalize(localize("/1/2/3/./.\\4"))
11529 localize("/1/2/3/./.\\4")
11530 getFileUtils().normalize(localize("/1/2/3/./.\\4")).getPath()
11531 localize("/1/2/3/4")
11532 getFileUtils()
11533 getFileUtils().normalize(localize("/1/2/3/../3/4"))
11534 localize("/1/2/3/../3/4")
11535 getFileUtils().normalize(localize("/1/2/3/../3/4")).getPath()
11536 localize("/1/2/3/4")
11537 getFileUtils()
11538 getFileUtils().normalize(localize("/1/2/3/..\\3\\4"))
11539 localize("/1/2/3/..\\3\\4")
11540 getFileUtils().normalize(localize("/1/2/3/..\\3\\4")).getPath()
11541 localize("/1/2/3/4")
11542 getFileUtils()
11543 getFileUtils().normalize(localize("/1/2/3/../../5/.././2/./3/6/../4"))
11544 localize("/1/2/3/../../5/.././2/./3/6/../4")
11545 getFileUtils().normalize(localize("/1/2/3/../../5/.././2/./3/6/../4")).getPath()
11546 localize("/1/2/3/4")
11547 getFileUtils()
11548 getFileUtils().normalize(localize("/1/2/3/..\\../5/..\\./2/./3/6\\../4"))
11549 localize("/1/2/3/..\\../5/..\\./2/./3/6\\../4")
11550 getFileUtils().normalize(localize("/1/2/3/..\\../5/..\\./2/./3/6\\../4")).getPath()
11551 localize("/1/../../b")
11552 getFileUtils()
11553 getFileUtils().normalize(localize("/1/../../b"))
11554 localize("/1/../../b")
11555 thrown.expect(BuildException.class)
11556 getFileUtils()
11557 getFileUtils().normalize("foo")
11558 getFileUtils()
11559 getFileUtils().resolveFile(null,"a")
11560 newFile("a").getAbsoluteFile()
11561 thrown.expect(NullPointerException.class)
11562 getFileUtils()
11563 getFileUtils().normalize(null)
11564 getFileUtils()
11565 getFileUtils().createTempFile("pre",".suf",null,false,true)
11566 System.getProperty("java.io.tmpdir")
11567 tmp1.getName()
11568 startsWith("pre")
11569 endsWith(".suf")
11570 tmp1.exists()
11571 tmp1.getName()
11572 (newFile(tmploc,tmp1.getName())).getAbsolutePath()
11573 tmp1.getAbsolutePath()
11574 tmp1.delete()
11575 folder.newFolder("ant-test")
11576 getFileUtils()
11577 getFileUtils().createTempFile("pre",".suf",dir2,true,true)
11578 tmp2.getName()
11579 startsWith("pre")
11580 endsWith(".suf")
11581 tmp2.exists()
11582 tmp2.getName()
11583 (newFile(dir2,tmp2.getName())).getAbsolutePath()
11584 tmp2.getAbsolutePath()
11585 tmp2.delete()
11586 (newFile("/tmp")).getAbsolutePath()
11587 getFileUtils()
11588 getFileUtils().createTempFile("pre",".suf",parent,false)
11589 tmp1.exists()
11590 tmp1.getName()
11591 startsWith("pre")
11592 endsWith(".suf")
11593 parent.getAbsolutePath()
11594 tmp1.getParent()
11595 getFileUtils()
11596 getFileUtils().createTempFile("pre",".suf",parent,false)
11597 tmp1.getAbsolutePath()
11598 tmp2.getAbsolutePath()
11599 getFileUtils()
11600 getFileUtils().createTempFile("pre",".suf",null,false)
11601 System.getProperty("java.io.tmpdir")
11602 tmp3.getName()
11603 (newFile(tmploc,tmp3.getName())).getAbsolutePath()
11604 tmp3.getAbsolutePath()
11605 getFileUtils()
11606 getFileUtils().contentEquals(newFile(ROOT,"foo"),newFile(ROOT,"bar"))
11607 getFileUtils()
11608 getFileUtils().contentEquals(newFile(ROOT,"foo"),newFile(ROOT,"build.xml"))
11609 getFileUtils()
11610 getFileUtils().contentEquals(newFile(ROOT,"src"),newFile(ROOT,"src"))
11611 getFileUtils()
11612 getFileUtils().contentEquals(newFile(ROOT,"build.xml"),newFile(ROOT,"build.xml"))
11613 getFileUtils()
11614 getFileUtils().contentEquals(newFile(ROOT,"build.xml"),newFile(ROOT,"docs.xml"))
11615 removeThis.deleteOnExit()
11616 removeThis.exists()
11617 getFileUtils()
11618 getFileUtils().createNewFile(removeThis)
11619 removeThis.exists()
11620 getFileUtils()
11621 getFileUtils().removeLeadingPath(newFile("/foo"),newFile("/foo/bar"))
11622 getFileUtils()
11623 getFileUtils().removeLeadingPath(newFile("/foo/"),newFile("/foo/bar"))
11624 getFileUtils()
11625 getFileUtils().removeLeadingPath(newFile("\\foo"),newFile("\\foo\\bar"))
11626 getFileUtils()
11627 getFileUtils().removeLeadingPath(newFile("\\foo\\"),newFile("\\foo\\bar"))
11628 getFileUtils()
11629 getFileUtils().removeLeadingPath(newFile("c:/foo"),newFile("c:/foo/bar"))
11630 getFileUtils()
11631 getFileUtils().removeLeadingPath(newFile("c:/foo/"),newFile("c:/foo/bar"))
11632 getFileUtils()
11633 getFileUtils().removeLeadingPath(newFile("c:\\foo"),newFile("c:\\foo\\bar"))
11634 getFileUtils()
11635 getFileUtils().removeLeadingPath(newFile("c:\\foo\\"),newFile("c:\\foo\\bar"))
11636 Os.isFamily("dos")
11637 Os.isFamily("netware")
11638 getFileUtils()
11639 getFileUtils().normalize("/bar")
11640 getFileUtils().normalize("/bar").getAbsolutePath()
11641 getFileUtils()
11642 getFileUtils().removeLeadingPath(newFile("/foo"),newFile("/bar"))
11643 getFileUtils()
11644 getFileUtils().normalize("/foobar")
11645 getFileUtils().normalize("/foobar").getAbsolutePath()
11646 getFileUtils()
11647 getFileUtils().removeLeadingPath(newFile("/foo"),newFile("/foobar"))
11648 getFileUtils()
11649 getFileUtils().removeLeadingPath(newFile("/foo/bar"),newFile("/foo/bar"))
11650 getFileUtils()
11651 getFileUtils().removeLeadingPath(newFile("/foo/bar"),newFile("/foo/bar/"))
11652 getFileUtils()
11653 getFileUtils().removeLeadingPath(newFile("/foo/bar/"),newFile("/foo/bar/"))
11654 getFileUtils()
11655 getFileUtils().removeLeadingPath(newFile("/foo/bar/"),newFile("/foo/bar"))
11656 "foo/bar".replace('\\',File.separatorChar)
11657 "foo/bar".replace('\\',File.separatorChar).replace('/',File.separatorChar)
11658 getFileUtils()
11659 getFileUtils().removeLeadingPath(newFile("/"),newFile("/foo/bar"))
11660 getFileUtils()
11661 getFileUtils().removeLeadingPath(newFile("c:/"),newFile("c:/foo/bar"))
11662 getFileUtils()
11663 getFileUtils().removeLeadingPath(newFile("c:\\"),newFile("c:\\foo\\bar"))
11664 Os.isFamily("dos")
11665 Os.isFamily("netware")
11666 System.getProperty("user.dir")
11667 System.getProperty("user.dir").substring(0,3)
11668 System.getProperty("user.dir").substring(0,3).replace(File.separatorChar,'/')
11669 Os.isFamily("dos")
11670 removeExtraneousAuthority(getFileUtils().toURI("c:\\foo"))
11671 getFileUtils()
11672 getFileUtils().toURI("c:\\foo")
11673 Os.isFamily("netware")
11674 removeExtraneousAuthority(getFileUtils().toURI("sys:\\foo"))
11675 getFileUtils()
11676 getFileUtils().toURI("sys:\\foo")
11677 removeExtraneousAuthority(getFileUtils().toURI("/foo"))
11678 getFileUtils()
11679 getFileUtils().toURI("/foo")
11680 getFileUtils()
11681 getFileUtils().toURI("./foo")
11682 startsWith("file:/")
11683 getFileUtils()
11684 getFileUtils().toURI("./foo")
11685 endsWith("/foo")
11686 removeExtraneousAuthority(getFileUtils().toURI("/foo bar"))
11687 getFileUtils()
11688 getFileUtils().toURI("/foo bar")
11689 removeExtraneousAuthority(getFileUtils().toURI("/foo#bar"))
11690 getFileUtils()
11691 getFileUtils().toURI("/foo#bar")
11692 removeExtraneousAuthority(getFileUtils().toURI("\\foo"))
11693 getFileUtils()
11694 getFileUtils().toURI("\\foo")
11695 getFileUtils()
11696 getFileUtils().toURI(".\\foo")
11697 startsWith("file:/")
11698 getFileUtils()
11699 getFileUtils().toURI(".\\foo")
11700 endsWith("/foo")
11701 removeExtraneousAuthority(getFileUtils().toURI("\\foo bar"))
11702 getFileUtils()
11703 getFileUtils().toURI("\\foo bar")
11704 removeExtraneousAuthority(getFileUtils().toURI("\\foo#bar"))
11705 getFileUtils()
11706 getFileUtils().toURI("\\foo#bar")
11707 removeExtraneousAuthority(getFileUtils().toURI("/\u00E4nt"))
11708 getFileUtils()
11709 getFileUtils().toURI("/\u00E4nt")
11710 uri.startsWith(prefix)
11711 uri.substring(prefix.length())
11712 prefix.length()
11713 assumeTrue("Test only runs on DOS",Os.isFamily("dos"))
11714 Os.isFamily("dos")
11715 isContextRelativePath("/\u00E4nt")
11716 isContextRelativePath("\\foo")
11717 Os.isFamily("dos")
11718 Os.isFamily("netware")
11719 System.getProperty("user.dir")
11720 System.getProperty("user.dir").substring(0,2)
11721 Os.isFamily("netware")
11722 getFileUtils()
11723 getFileUtils().fromURI("file:///sys:/foo")
11724 Os.isFamily("dos")
11725 getFileUtils()
11726 getFileUtils().fromURI("file:///c:/foo")
11727 getFileUtils()
11728 getFileUtils().fromURI("file:///foo")
11729 getFileUtils()
11730 getFileUtils().fromURI("file:./foo")
11731 getFileUtils()
11732 getFileUtils().fromURI("file:///foo%20bar")
11733 getFileUtils()
11734 getFileUtils().fromURI("file:///foo%23bar")
11735 System.currentTimeMillis()
11736 getFileUtils()
11737 getFileUtils().isUpToDate(firstTime,secondTime)
11738 getFileUtils()
11739 getFileUtils().isUpToDate(secondTime,firstTime)
11740 getFileUtils()
11741 getFileUtils().isUpToDate(firstTime,-1L)
11742 System.getProperty("java.io.tmpdir")
11743 getFileUtils()
11744 getFileUtils().createTempFile("alpha","beta",tempFolder,true,true)
11745 wellcased.getName()
11746 wellcased.getName().toUpperCase()
11747 Os.isFamily("mac")
11748 Os.isFamily("unix")
11749 Os.isFamily("dos")
11750 getFileUtils()
11751 getFileUtils().hasErrorInCase(wrongcased)
11752 getFileUtils()
11753 getFileUtils().hasErrorInCase(wellcased)
11754 getFileUtils()
11755 getFileUtils().hasErrorInCase(wrongcased)
11756 getFileUtils()
11757 getFileUtils().hasErrorInCase(wellcased)
11758 getFileUtils()
11759 getFileUtils().getDefaultEncoding()
11760 getFileUtils()
11761 getFileUtils().isLeadingPath(newFile("/foo"),newFile("/foo/../../bar"))
11762 getFileUtils()
11763 getFileUtils().isLeadingPath(newFile("c:\\foo"),newFile("c:\\foo\\..\\..\\bar"))
11764 getFileUtils()
11765 getFileUtils().isLeadingPath(newFile("/foo"),newFile("/foo/../.."))
11766 getFileUtils()
11767 getFileUtils().isLeadingPath(newFile("/foo"),newFile("/foo/../../bar"),true)
11768 getFileUtils()
11769 getFileUtils().isLeadingPath(newFile("c:\\foo"),newFile("c:\\foo\\..\\..\\bar"),true)
11770 getFileUtils()
11771 getFileUtils().isLeadingPath(newFile("/foo"),newFile("/foo/../.."),true)
11772 assumeFalse("Test doesn't run on DOS",Os.isFamily("dos"))
11773 Os.isFamily("dos")
11774 getFileUtils()
11775 getFileUtils().isLeadingPath(newFile("/foo"),newFile("/foo/bar"),true)
11776 getFileUtils()
11777 getFileUtils().isLeadingPath(newFile("/foo"),newFile("/foo/baz/../bar"),true)
11778 getFileUtils()
11779 getFileUtils().isLeadingPath(newFile("/foo"),newFile("/foo/../foo/bar"),true)
11780 getFileUtils()
11781 getFileUtils().isLeadingPath(newFile("/foo"),newFile("/foobar"),true)
11782 getFileUtils()
11783 getFileUtils().isLeadingPath(newFile("/foo"),newFile("/bar"),true)
11784 assumeFalse("Test doesn't run on DOS",Os.isFamily("dos"))
11785 Os.isFamily("dos")
11786 getFileUtils()
11787 getFileUtils().isLeadingPath(newFile("/foo/"),newFile("/foo/bar"),true)
11788 getFileUtils()
11789 getFileUtils().isLeadingPath(newFile("/foo/"),newFile("/foo/bar/"),true)
11790 getFileUtils()
11791 getFileUtils().isLeadingPath(newFile("/foo/"),newFile("/foo/"),true)
11792 getFileUtils()
11793 getFileUtils().isLeadingPath(newFile("/foo/"),newFile("/foo"),true)
11794 getFileUtils()
11795 getFileUtils().isLeadingPath(newFile("/foo"),newFile("/foo/"),true)
11796 getFileUtils()
11797 getFileUtils().isLeadingPath(newFile("/foo/"),newFile("/foo/bar"),false)
11798 getFileUtils()
11799 getFileUtils().isLeadingPath(newFile("/foo/"),newFile("/foo/bar/"),false)
11800 getFileUtils()
11801 getFileUtils().isLeadingPath(newFile("/foo/"),newFile("/foo/"),false)
11802 getFileUtils()
11803 getFileUtils().isLeadingPath(newFile("/foo/"),newFile("/foo"),false)
11804 getFileUtils()
11805 getFileUtils().isLeadingPath(newFile("/foo"),newFile("/foo/"),false)
11806 assumeTrue("Test only runs on DOS",Os.isFamily("dos"))
11807 Os.isFamily("dos")
11808 getFileUtils()
11809 getFileUtils().isLeadingPath(newFile("C:\\foo"),newFile("C:\\foo\\bar"),true)
11810 getFileUtils()
11811 getFileUtils().isLeadingPath(newFile("C:\\foo"),newFile("C:\\foo\\baz\\..\\bar"),true)
11812 getFileUtils()
11813 getFileUtils().isLeadingPath(newFile("C:\\foo"),newFile("C:\\foo\\..\\foo\\bar"),true)
11814 getFileUtils()
11815 getFileUtils().isLeadingPath(newFile("C:\\foo"),newFile("C:\\foobar"),true)
11816 getFileUtils()
11817 getFileUtils().isLeadingPath(newFile("C:\\foo"),newFile("C:\\bar"),true)
11818 assumeTrue("Test only runs on DOS",Os.isFamily("dos"))
11819 Os.isFamily("dos")
11820 getFileUtils()
11821 getFileUtils().isLeadingPath(newFile("c:\\foo\\"),newFile("c:\\foo\\bar"),true)
11822 getFileUtils()
11823 getFileUtils().isLeadingPath(newFile("c:\\foo\\"),newFile("c:\\foo\\bar\\"),true)
11824 getFileUtils()
11825 getFileUtils().isLeadingPath(newFile("c:\\foo\\"),newFile("c:\\foo\\"),true)
11826 getFileUtils()
11827 getFileUtils().isLeadingPath(newFile("c:\\foo\\"),newFile("c:\\foo"),true)
11828 getFileUtils()
11829 getFileUtils().isLeadingPath(newFile("c:\\foo"),newFile("c:\\foo\\"),true)
11830 getFileUtils()
11831 getFileUtils().isLeadingPath(newFile("c:\\foo\\"),newFile("c:\\foo\\bar"),false)
11832 getFileUtils()
11833 getFileUtils().isLeadingPath(newFile("c:\\foo\\"),newFile("c:\\foo\\bar\\"),false)
11834 getFileUtils()
11835 getFileUtils().isLeadingPath(newFile("c:\\foo\\"),newFile("c:\\foo\\"),false)
11836 getFileUtils()
11837 getFileUtils().isLeadingPath(newFile("c:\\foo\\"),newFile("c:\\foo"),false)
11838 getFileUtils()
11839 getFileUtils().isLeadingPath(newFile("c:\\foo"),newFile("c:\\foo\\"),false)
11840 Files.createTempDirectory(null)
11841 Files.createTempFile(tmpDir,null,null)
11842 tmpFile.toFile()
11843 tmpFile.toFile().deleteOnExit()
11844 tmpDir.toFile()
11845 tmpDir.toFile().deleteOnExit()
11846 Files.exists(Paths.get(tmpDir.toString(),tmpFile.getFileName().toString().toLowerCase(Locale.US)))
11847 Paths.get(tmpDir.toString(),tmpFile.getFileName().toString().toLowerCase(Locale.US))
11848 tmpDir.toString()
11849 tmpFile.getFileName()
11850 tmpFile.getFileName().toString()
11851 tmpFile.getFileName().toString().toLowerCase(Locale.US)
11852 Files.exists(Paths.get(tmpDir.toString(),tmpFile.getFileName().toString().toUpperCase(Locale.US)))
11853 Paths.get(tmpDir.toString(),tmpFile.getFileName().toString().toUpperCase(Locale.US))
11854 tmpDir.toString()
11855 tmpFile.getFileName()
11856 tmpFile.getFileName().toString()
11857 tmpFile.getFileName().toString().toUpperCase(Locale.US)
11858 isCaseSensitiveFileSystem(tmpDir)
11859 actualCaseSensitivity.isPresent()
11860 actualCaseSensitivity.get()
11861 isCaseSensitiveFileSystem(tmpFile)
11862 actualCaseSensitivity.isPresent()
11863 actualCaseSensitivity.get()
11864 path.substring(1)
11865 path.replace('\\',File.separatorChar)
11866 path.replace('\\',File.separatorChar).replace('/',File.separatorChar)
11867 assumeTrue("Not DOS or Netware",Os.isFamily("dos")||Os.isFamily("netware"))
11868 Os.isFamily("dos")
11869 Os.isFamily("netware")
11870 s1.isEmpty()
11871 s2.isEmpty()
11872 sb1.setCharAt(0,Character.toUpperCase(s1.charAt(0)))
11873 Character.toUpperCase(s1.charAt(0))
11874 s1.charAt(0)
11875 sb2.setCharAt(0,Character.toUpperCase(s2.charAt(0)))
11876 Character.toUpperCase(s2.charAt(0))
11877 s2.charAt(0)
11878 sb1.toString()
11879 sb2.toString()
11880 m.setFrom("foobar")
11881 m.setTo("baz")
11882 m.mapFileName("plonk")
11883 m.mapFileName("foobar")
11884 m.setFrom("*foo")
11885 m.setTo("*plonk")
11886 m.mapFileName("bar.baz")
11887 m.mapFileName("bar.foo")
11888 m.setTo("foo*")
11889 m.mapFileName("bar.foo")
11890 m.setFrom("foo*")
11891 m.setTo("plonk*")
11892 m.mapFileName("bar.baz")
11893 m.mapFileName("foo.bar")
11894 m.setTo("*foo")
11895 m.mapFileName("foo.bar")
11896 m.setFrom("foo*bar")
11897 m.setTo("plonk*pling")
11898 m.mapFileName("bar.baz")
11899 m.mapFileName("foo.bar")
11900 m.mapFileName("foo.baz.bar")
11901 m.mapFileName("foobar")
11902 assumeTrue("Test only runs on netware",Os.isName("netware"))
11903 Os.isName("netware")
11904 JavaEnvUtils.getJreExecutable("java")
11905 JavaEnvUtils.getJdkExecutable("javac")
11906 JavaEnvUtils.getJreExecutable("foo")
11907 JavaEnvUtils.getJdkExecutable("foo")
11908 assumeTrue("Test only runs on windows",Os.isFamily("windows"))
11909 Os.isFamily("windows")
11910 FILE_UTILS.normalize(JavaEnvUtils.getJavaHome())
11911 JavaEnvUtils.getJavaHome()
11912 FILE_UTILS.normalize(JavaEnvUtils.getJavaHome()).getAbsolutePath()
11913 JavaEnvUtils.getJreExecutable("java")
11914 endsWith(".exe")
11915 (newFile(j)).isAbsolute()
11916 startsWith(javaHome)
11917 JavaEnvUtils.getJdkExecutable("javac")
11918 endsWith(".exe")
11919 (newFile(j)).isAbsolute()
11920 FILE_UTILS.normalize(javaHome+"/..")
11921 FILE_UTILS.normalize(javaHome+"/..").getAbsolutePath()
11922 startsWith(javaHomeParent)
11923 JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
11924 startsWith(javaHome)
11925 not(startsWith(javaHome))
11926 startsWith(javaHome)
11927 JavaEnvUtils.getJreExecutable("foo")
11928 JavaEnvUtils.getJdkExecutable("foo")
11929 assumeFalse("Test only runs on non Netware and non Windows systems",Os.isName("netware")||Os.isFamily("windows"))
11930 Os.isName("netware")
11931 Os.isFamily("windows")
11932 FILE_UTILS.normalize(JavaEnvUtils.getJavaHome())
11933 JavaEnvUtils.getJavaHome()
11934 FILE_UTILS.normalize(JavaEnvUtils.getJavaHome()).getAbsolutePath()
11935 Os.isFamily("dos")
11936 JavaEnvUtils.getJreExecutable("java")
11937 extension.isEmpty()
11938 endsWith(extension)
11939 (newFile(j)).isAbsolute()
11940 startsWith(javaHome)
11941 JavaEnvUtils.getJdkExecutable("javac")
11942 extension.isEmpty()
11943 endsWith(extension)
11944 (newFile(j)).isAbsolute()
11945 FILE_UTILS.normalize(javaHome+"/..")
11946 FILE_UTILS.normalize(javaHome+"/..").getAbsolutePath()
11947 startsWith(javaHomeParent)
11948 JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
11949 startsWith(javaHome)
11950 not(startsWith(javaHome))
11951 startsWith(javaHome)
11952 JavaEnvUtils.getJreExecutable("foo")
11953 JavaEnvUtils.getJdkExecutable("foo")
11954 JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.getJavaVersion())
11955 JavaEnvUtils.getJavaVersion()
11956 assumeTrue(JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_9))
11957 JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_9)
11958 JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_9)
11959 assumeTrue("10".equals(System.getProperty("java.specification.version")))
11960 "10".equals(System.getProperty("java.specification.version"))
11961 System.getProperty("java.specification.version")
11962 JavaEnvUtils.getJavaVersion()
11963 JavaEnvUtils.getJavaVersionNumber()
11964 JavaEnvUtils.getParsedJavaVersion()
11965 JavaEnvUtils.isJavaVersion("10")
11966 JavaEnvUtils.isAtLeastJavaVersion(JavaEnvUtils.JAVA_9)
11967 JAXPUtils.getSystemId(file)
11968 startsWith("file:/")
11969 not(startsWith("file:////"))
11970 startsWith("file:////")
11971 folder.newFile("tmp.properties")
11972 lpf.load(fis)
11973 lpf.saveAs(tmp)
11974 originalProps.load(newFileInputStream(simple))
11975 tmpProps.load(newFileInputStream(tmp))
11976 readFile(tmp)
11977 containsString(("# a comment"))
11978 containsString(("! more comment"))
11979 lpf.setProperty(" prop one ","  leading and trailing spaces ")
11980 lpf.setProperty("prop\ttwo","contains\ttab")
11981 lpf.setProperty("prop\nthree","contains\nnewline")
11982 lpf.setProperty("prop\rfour","contains\rcarriage return")
11983 lpf.setProperty("prop\ffive","contains\fform feed")
11984 lpf.setProperty("prop\\six","contains\\backslash")
11985 lpf.setProperty("prop:seven","contains:colon")
11986 lpf.setProperty("prop=eight","contains=equals")
11987 lpf.setProperty("prop#nine","contains#hash")
11988 lpf.setProperty("prop!ten","contains!exclamation")
11989 lpf.saveAs(tmp)
11990 readFile(tmp)
11991 containsString("\\ prop\\ one\\ =\\ \\ leading and trailing spaces ")
11992 containsString("prop\\ttwo=contains\\ttab")
11993 containsString("prop\\nthree=contains\\nnewline")
11994 containsString("prop\\rfour=contains\\rcarriage return")
11995 containsString("prop\\\\six=contains\\\\backslash")
11996 containsString("prop\\:seven=contains\\:colon")
11997 containsString("prop\\=eight=contains\\=equals")
11998 containsString("prop\\#nine=contains\\#hash")
11999 containsString("prop\\!ten=contains\\!exclamation")
12000 lpf.load(fis)
12001 lpf.setProperty(" prop one ","new one")
12002 lpf.setProperty("prop\ttwo","new two")
12003 lpf.setProperty("prop\nthree","new three")
12004 lpf.saveAs(tmp)
12005 readFile(tmp)
12006 not(containsString("\\ prop\\ one\\ =\\ \\ leading and trailing spaces "))
12007 containsString("\\ prop\\ one\\ =\\ \\ leading and trailing spaces ")
12008 containsString("\\ prop\\ one\\ =new one")
12009 not(containsString("prop\\ttwo=contains\\ttab"))
12010 containsString("prop\\ttwo=contains\\ttab")
12011 containsString("prop\\ttwo=new two")
12012 not(containsString("prop\\nthree=contains\\nnewline"))
12013 containsString("prop\\nthree=contains\\nnewline")
12014 containsString("prop\\nthree=new three")
12015 lpf.load(fis)
12016 lpf.store(fos,"file-header")
12017 readFile(tmp)
12018 startsWith("#file-header")
12019 lpf.load(fis)
12020 lpf.clear()
12021 lpf.saveAs(tmp)
12022 readFile(tmp)
12023 not(containsString(("prop.alpha")))
12024 containsString(("prop.alpha"))
12025 not(containsString(("prop.beta")))
12026 containsString(("prop.beta"))
12027 not(containsString(("prop.gamma")))
12028 containsString(("prop.gamma"))
12029 not(containsString(("# a comment")))
12030 containsString(("# a comment"))
12031 not(containsString(("! more comment")))
12032 containsString(("! more comment"))
12033 not(containsString(("# now a line wrapping one")))
12034 containsString(("# now a line wrapping one"))
12035 lpf.load(fis)
12036 lpf.remove("prop.beta")
12037 lpf.saveAs(tmp)
12038 readFile(tmp)
12039 not(containsString(("prop.beta")))
12040 containsString(("prop.beta"))
12041 containsString("! more comment")
12042 lpf.load(fis)
12043 lpf.setRemoveComments(true)
12044 lpf.remove("prop.beta")
12045 lpf.saveAs(tmp)
12046 readFile(tmp)
12047 not(containsString(("prop.beta")))
12048 containsString(("prop.beta"))
12049 not(containsString(("! more comment")))
12050 containsString(("! more comment"))
12051 lpf.load(fis)
12052 lpf.clone()
12053 lpfClone.setProperty("prop.new","a new property")
12054 lpfClone.setProperty("prop.beta","a new value for beta")
12055 lpf.size()
12056 lpfClone.size()
12057 lpf.saveAs(tmp)
12058 readFile(tmp)
12059 folder.newFile("tmp-clone.properties")
12060 lpfClone.saveAs(tmpClone)
12061 readFile(tmpClone)
12062 containsString(("simple"))
12063 not(containsString(("prop.new")))
12064 containsString(("prop.new"))
12065 containsString(("a new value for beta"))
12066 containsString(("prop.new"))
12067 lpf.load(fis)
12068 lpf.setProperty("prop:seven","new value for seven")
12069 lpf.setProperty("prop=eight","new value for eight")
12070 lpf.setProperty("prop eleven","new value for eleven")
12071 lpf.setProperty("alpha","new value for alpha")
12072 lpf.setProperty("beta","new value for beta")
12073 lpf.saveAs(tmp)
12074 readFile(tmp)
12075 containsString("prop\\:seven=new value for seven")
12076 containsString("prop\\=eight=new value for eight")
12077 containsString("prop\\ eleven=new value for eleven")
12078 containsString("alpha=new value for alpha")
12079 containsString("beta=new value for beta")
12080 not(containsString("prop\\:seven=contains\\:colon"))
12081 containsString("prop\\:seven=contains\\:colon")
12082 not(containsString("prop\\=eight=contains\\=equals"))
12083 containsString("prop\\=eight=contains\\=equals")
12084 not(containsString("alpha:set with a colon"))
12085 containsString("alpha:set with a colon")
12086 not(containsString("beta set with a space"))
12087 containsString("beta set with a space")
12088 readFully(isr)
12089 los.close()
12090 f.delete()
12091 los.close()
12092 f.exists()
12093 los.open()
12094 los.close()
12095 f.exists()
12096 los.write(0)
12097 los.close()
12098 f.exists()
12099 los.write(newbyte[]{0})
12100 los.close()
12101 f.exists()
12102 stream.close()
12103 writeByteArray()
12104 writeAsArray('\n')
12105 writeSingleBytes()
12106 stream.write('\n')
12107 writeByteArray()
12108 writeAsArray('\r')
12109 writeSingleBytes()
12110 stream.write('\r')
12111 writeByteArray()
12112 writeAsArray('\r')
12113 writeAsArray('\n')
12114 writeSingleBytes()
12115 stream.write('\r')
12116 stream.write('\n')
12117 writeByteArray()
12118 stream.flush()
12119 writeSingleBytes()
12120 stream.flush()
12121 writeByteArray()
12122 stream.close()
12123 writeSingleBytes()
12124 stream.close()
12125 stream.write(LINE.getBytes(),0,LINE.length())
12126 LINE.getBytes()
12127 LINE.length()
12128 LINE.getBytes()
12129 stream.write(b)
12130 stream.write(newbyte[]{(byte)c},0,1)
12131 h.put(K1,V1)
12132 h.clear()
12133 h.isEmpty()
12134 h.put(K1,V1)
12135 h.clone()
12136 instanceOf(LinkedHashtable.class)
12137 hasKey(K1)
12138 h.put(K1,V1)
12139 h.contains(K1)
12140 hasKey(K1)
12141 hasValue(V1)
12142 not(hasKey(K2))
12143 hasKey(K2)
12144 h.get(K1)
12145 h.put(K1,V1)
12146 h.get(K1)
12147 h.isEmpty()
12148 h.put(K1,V1)
12149 h.isEmpty()
12150 h.put(K1,V1)
12151 h.put(K1,V2)
12152 h.put(K1,V1)
12153 h2.putAll(h)
12154 hasKey(K1)
12155 h.put(K1,V1)
12156 h.remove(K1)
12157 h.isEmpty()
12158 h.remove(K1)
12159 h.size()
12160 h.put(K1,V1)
12161 h.size()
12162 multiSetup()
12163 Collections.list(h.keys())
12164 h.keys()
12165 Collections.list(h.keys()).iterator()
12166 multiSetup()
12167 h.keySet()
12168 h.keySet().iterator()
12169 multiSetup()
12170 Collections.list(h.elements())
12171 h.elements()
12172 Collections.list(h.elements()).iterator()
12173 multiSetup()
12174 h.values()
12175 h.values().iterator()
12176 multiSetup()
12177 h.entrySet()
12178 h.entrySet().iterator()
12179 i.hasNext()
12180 i.next()
12181 e.getKey()
12182 e.getValue()
12183 i.hasNext()
12184 i.next()
12185 e.getKey()
12186 e.getValue()
12187 i.hasNext()
12188 h.put(K1,V1)
12189 h.put(K2,V2)
12190 i.hasNext()
12191 i.next()
12192 i.hasNext()
12193 i.next()
12194 i.hasNext()
12195 i.hasNext()
12196 i.next()
12197 i.hasNext()
12198 i.next()
12199 i.hasNext()
12200 LoaderUtils.getClassSource(LoaderUtils.class)
12201 LoaderUtils.getResourceSource(null,"org/apache/tools/ant/taskdefs/defaults.properties")
12202 f1.getAbsolutePath()
12203 f2.getAbsolutePath()
12204 sb.append(i)
12205 sb.toString()
12206 Native2AsciiUtils.native2ascii(sb.toString())
12207 sb.toString()
12208 Native2AsciiUtils.native2ascii("\u00e4\u00f6\u00fc")
12209 Native2AsciiUtils.native2ascii("\u00e4\u01f6\u12fc")
12210 sb.append(i)
12211 sb.toString()
12212 Native2AsciiUtils.ascii2native(sb.toString())
12213 sb.toString()
12214 Native2AsciiUtils.ascii2native("\\u00e4\\u00f6\\u00fc")
12215 Native2AsciiUtils.ascii2native("\\abcdef")
12216 Native2AsciiUtils.ascii2native("\\u012j")
12217 Native2AsciiUtils.ascii2native("\\u00e4")
12218 Native2AsciiUtils.ascii2native("\\u00e")
12219 Native2AsciiUtils.ascii2native("\\u00")
12220 Native2AsciiUtils.ascii2native("\\u0")
12221 mapper.setFrom("*.java")
12222 mapper.setTo("TEST-*.xml")
12223 fixupPath("org/apache/tools/ant/util/PackageNameMapperTest.java")
12224 mapper.mapFileName(file)
12225 file.replace('/',File.separatorChar)
12226 PermissionUtils.modeFromPermissions(EnumSet.of(PosixFilePermission.OWNER_READ,PosixFilePermission.OWNER_WRITE,PosixFilePermission.OWNER_EXECUTE),PermissionUtils.FileType.REGULAR_FILE)
12227 EnumSet.of(PosixFilePermission.OWNER_READ,PosixFilePermission.OWNER_WRITE,PosixFilePermission.OWNER_EXECUTE)
12228 Integer.toString(mode,8)
12229 PermissionUtils.permissionsFromMode(0100753)
12230 EnumSet.of(PosixFilePermission.OWNER_READ,PosixFilePermission.OWNER_WRITE,PosixFilePermission.OWNER_EXECUTE,PosixFilePermission.GROUP_READ,PosixFilePermission.GROUP_EXECUTE,PosixFilePermission.OTHERS_WRITE,PosixFilePermission.OTHERS_EXECUTE)
12231 PermissionUtils.FileType.of(folder.newFile("ant.tst").toPath())
12232 folder.newFile("ant.tst")
12233 folder.newFile("ant.tst").toPath()
12234 PermissionUtils.FileType.of(newFileResource(folder.newFile("ant.tst")))
12235 folder.newFile("ant.tst")
12236 PermissionUtils.FileType.of(folder.newFolder("ant.tst").toPath())
12237 folder.newFolder("ant.tst")
12238 folder.newFolder("ant.tst").toPath()
12239 PermissionUtils.FileType.of(newFileResource(folder.newFolder("ant.tst")))
12240 folder.newFolder("ant.tst")
12241 folder.newFile("ant.tst")
12242 assumeNotNull(Files.getFileAttributeView(f.toPath(),PosixFileAttributeView.class))
12243 Files.getFileAttributeView(f.toPath(),PosixFileAttributeView.class)
12244 f.toPath()
12245 EnumSet.of(PosixFilePermission.OWNER_READ,PosixFilePermission.OWNER_WRITE,PosixFilePermission.OWNER_EXECUTE,PosixFilePermission.GROUP_READ)
12246 PermissionUtils.setPermissions(newFileResource(f),s,null)
12247 PermissionUtils.getPermissions(newFileResource(f),null)
12248 folder.newFile("ant.zip")
12249 os.putNextEntry(e)
12250 os.closeEntry()
12251 r.setName("foo")
12252 r.setArchive(f)
12253 EnumSet.of(PosixFilePermission.OWNER_READ,PosixFilePermission.OWNER_WRITE,PosixFilePermission.OWNER_EXECUTE,PosixFilePermission.GROUP_READ)
12254 PermissionUtils.setPermissions(r,s,null)
12255 PermissionUtils.getPermissions(r,null)
12256 folder.newFile("ant.tar")
12257 os.putNextEntry(e)
12258 os.closeEntry()
12259 r.setName("foo")
12260 r.setArchive(f)
12261 EnumSet.of(PosixFilePermission.OWNER_READ,PosixFilePermission.OWNER_WRITE,PosixFilePermission.OWNER_EXECUTE,PosixFilePermission.GROUP_READ)
12262 PermissionUtils.setPermissions(r,s,null)
12263 PermissionUtils.getPermissions(r,null)
12264 compareBytes("abc","utf-8")
12265 compareBytes("a","utf-16")
12266 r.read()
12267 "abc".getBytes(StandardCharsets.UTF_16)
12268 r.read(bytes,0,0)
12269 r.read(bytes,0,10)
12270 "abc".getBytes()
12271 "".getBytes(StandardCharsets.UTF_16)
12272 System.out.println("Preample len is "+bytes.length)
12273 r.read()
12274 actualOS.write((byte)b)
12275 r.read()
12276 utf8.read()
12277 expectedOS.write((byte)b)
12278 utf8.read()
12279 expectedOS.toByteArray()
12280 actualOS.toByteArray()
12281 s.getBytes(encoding)
12282 r.read()
12283 r.read()
12284 taskINeedForLogging.setProject(newProject())
12285 ResourceUtils.selectOutOfDateSources(taskINeedForLogging,newResource[]{r},this,this)
12286 StringUtils.split(data,',')
12287 res.size()
12288 res.elementAt(0)
12289 res.elementAt(1)
12290 res.elementAt(2)
12291 res.elementAt(3)
12292 StringUtils.lineSplit(data)
12293 res.size()
12294 res.elementAt(0)
12295 res.elementAt(1)
12296 res.elementAt(2)
12297 res.elementAt(3)
12298 res.elementAt(4)
12299 StringUtils.replace(data,"a","")
12300 StringUtils.endsWith(newStringBuffer(),"")
12301 StringUtils.endsWith(newStringBuffer("12234545"),"")
12302 StringUtils.endsWith(newStringBuffer("12345678"),"78")
12303 StringUtils.endsWith(newStringBuffer("123"),"123")
12304 StringUtils.endsWith(newStringBuffer("12"),"1245")
12305 StringUtils.endsWith(newStringBuffer("12345678"),"789")
12306 StringUtils.endsWith(newStringBuffer(),"12345667")
12307 getFilledBuffer(1024*300,'a')
12308 buf.toString()
12309 endsWith("aa")
12310 getFilledBuffer(1024*300,'a')
12311 StringUtils.endsWith(buf,"aa")
12312 buf.append(ch)
12313 StringUtils.parseHumanSizes("1K")
12314 StringUtils.parseHumanSizes("1M")
12315 StringUtils.parseHumanSizes("1G")
12316 StringUtils.parseHumanSizes("1T")
12317 StringUtils.parseHumanSizes("1P")
12318 StringUtils.parseHumanSizes("1")
12319 StringUtils.removeSuffix(input,suffix)
12320 StringUtils.removeSuffix(input,"bla")
12321 StringUtils.removePrefix(input,prefix)
12322 StringUtils.removePrefix(input,"bla")
12323 StringUtils.join(Arrays.asList("a","b","c"),", ")
12324 Arrays.asList("a","b","c")
12325 StringUtils.join(newString[]{},", ")
12326 StringUtils.join((Collection<String>)null,", ")
12327 StringUtils.join((String[])null,", ")
12328 StringUtils.join(Arrays.asList("a","b","c"),null)
12329 Arrays.asList("a","b","c")
12330 StringUtils.trimToNull(null)
12331 StringUtils.trimToNull("")
12332 StringUtils.trimToNull("   ")
12333 StringUtils.trimToNull(" aaBcDeF  ")
12334 assumeFalse("Symlink doesn't work on Windows",Os.isFamily("windows"))
12335 Os.isFamily("windows")
12336 SYMLINK_UTILS.isSymbolicLink("/")
12337 UnicodeUtil.EscapeUnicode(word.charAt(0))
12338 word.charAt(0)
12339 UnicodeUtil.EscapeUnicode(word.charAt(0)).toString()
12340 UnicodeUtil.EscapeUnicode(word.charAt(1))
12341 word.charAt(1)
12342 UnicodeUtil.EscapeUnicode(word.charAt(1)).toString()
12343 mapper.setFrom("TEST-*.xml")
12344 mapper.setTo("*.java")
12345 fixupPath("org/apache/tools/ant/util/UnPackageNameMapperTest.java")
12346 mapper.mapFileName(file)
12347 file.replace('/',File.separatorChar)
12348 v.add(O)
12349 v.add(O)
12350 v.size()
12351 v.add(0,O)
12352 v.add(1,O)
12353 v.size()
12354 v.addElement(O)
12355 v.addElement(O)
12356 v.size()
12357 v.addAll(Arrays.asList(O,O))
12358 Arrays.asList(O,O)
12359 v.size()
12360 v.addAll(0,Arrays.asList(O,O))
12361 Arrays.asList(O,O)
12362 v.size()
12363 v.add(O)
12364 v.clear()
12365 v.size()
12366 v.add(O)
12367 v.clone()
12368 instanceOf(VectorSet.class)
12369 vs.size()
12370 vs.contains(O)
12371 v.contains(O)
12372 v.add(O)
12373 v.contains(O)
12374 v.contains(null)
12375 v.containsAll(Arrays.asList(O,O))
12376 Arrays.asList(O,O)
12377 v.add(O)
12378 v.containsAll(Arrays.asList(O,O))
12379 Arrays.asList(O,O)
12380 v.containsAll(Arrays.asList(O,null))
12381 Arrays.asList(O,null)
12382 v.insertElementAt(O,0)
12383 v.insertElementAt(O,1)
12384 v.size()
12385 v.add(O)
12386 v.remove(0)
12387 v.size()
12388 v.remove(0)
12389 v.add(O)
12390 v.remove(O)
12391 v.size()
12392 v.remove(O)
12393 v.add(a)
12394 v.add(b)
12395 v.add(O)
12396 v.size()
12397 v.capacity()
12398 v.remove(O)
12399 v.size()
12400 v.remove(O)
12401 v.elementAt(0)
12402 v.elementAt(1)
12403 v.add(O)
12404 v.add(a)
12405 v.add(b)
12406 v.size()
12407 v.capacity()
12408 v.remove(O)
12409 v.size()
12410 v.remove(O)
12411 v.elementAt(0)
12412 v.elementAt(1)
12413 v.add(a)
12414 v.add(O)
12415 v.add(b)
12416 v.size()
12417 v.capacity()
12418 v.remove(O)
12419 v.size()
12420 v.remove(O)
12421 v.elementAt(0)
12422 v.elementAt(1)
12423 v.add(O)
12424 v.removeAll(Arrays.asList(O,O))
12425 Arrays.asList(O,O)
12426 v.size()
12427 v.removeAll(Arrays.asList(O,O))
12428 Arrays.asList(O,O)
12429 v.add(O)
12430 v.removeAllElements()
12431 v.size()
12432 v.add(O)
12433 v.removeElement(O)
12434 v.size()
12435 v.removeElement(O)
12436 v.add(O)
12437 v.removeElementAt(0)
12438 v.size()
12439 v.removeElementAt(0)
12440 v.addAll(Arrays.asList(O,a,b,c))
12441 Arrays.asList(O,a,b,c)
12442 v.removeRange(1,3)
12443 v.size()
12444 v.contains(O)
12445 v.contains(c)
12446 v.addAll(Arrays.asList(O,a,b,c))
12447 Arrays.asList(O,a,b,c)
12448 v.indexOf(O)
12449 v.retainAll(Arrays.asList(c,O))
12450 Arrays.asList(c,O)
12451 v.size()
12452 v.contains(O)
12453 v.contains(c)
12454 v.indexOf(O)
12455 v.add(1)
12456 v.add(2)
12457 v.add(3)
12458 v.retainAll(Arrays.asList(1,2))
12459 Arrays.asList(1,2)
12460 v.size()
12461 v.retainAll(Arrays.asList(1,2))
12462 Arrays.asList(1,2)
12463 v.size()
12464 v.retainAll(Arrays.asList(4,5))
12465 Arrays.asList(4,5)
12466 v.size()
12467 v.retainAll(Arrays.asList(4,5))
12468 Arrays.asList(4,5)
12469 v.add(O)
12470 v.set(0,a)
12471 v.get(0)
12472 v.size()
12473 v.add(O)
12474 v.setElementAt(a,0)
12475 v.get(0)
12476 v.size()
12477 v.add(i)
12478 v.add(i)
12479 v.size()
12480 list.add(i)
12481 v.add(i)
12482 v.retainAll(list)
12483 v.toString()
12484 v.size()
12485 buildRule.configureProject("src/etc/testcases/types/xmlfragment.xml")
12486 buildRule.getProject()
12487 buildRule.getProject().getReference("nested-text")
12488 x.getFragment()
12489 n.hasAttributes()
12490 n.getChildNodes()
12491 nl.getLength()
12492 nl.item(0)
12493 nl.item(0).getNodeType()
12494 nl.item(0)
12495 nl.item(0).getNodeValue()
12496 buildRule.getProject()
12497 buildRule.getProject().getReference("with-children")
12498 x.getFragment()
12499 n.hasAttributes()
12500 n.getChildNodes()
12501 nl.getLength()
12502 nl.item(0)
12503 nl.item(0).getNodeType()
12504 nl.item(0)
12505 child1.getTagName()
12506 child1.hasAttributes()
12507 child1.getChildNodes()
12508 nl2.getLength()
12509 nl2.item(0)
12510 nl2.item(0).getNodeType()
12511 nl2.item(0)
12512 nl2.item(0).getNodeValue()
12513 nl.item(1)
12514 nl.item(1).getNodeType()
12515 nl.item(1)
12516 child2.getTagName()
12517 child2.hasAttributes()
12518 child2.getChildNodes()
12519 nl2.getLength()
12520 child2.getAttribute("foo")
12521 nl.item(2)
12522 nl.item(2).getNodeType()
12523 nl.item(2)
12524 child3.getTagName()
12525 child3.hasAttributes()
12526 child3.getChildNodes()
12527 nl2.getLength()
12528 nl2.item(0)
12529 nl2.item(0).getNodeType()
12530 nl2.item(0)
12531 ((Element)nl2.item(0)).getTagName()
12532 fth.getImplementation()
12533 fth.setMagicValue("bar")
12534 fth.getImplementation()
12535 fth.getImplementation()
12536 fth.getImplementation()
12537 fth.setMagicValue("bar")
12538 fth.setImplementation("baz")
12539 fth.getImplementation()
12540 fth.hasBeenSet()
12541 fth.setMagicValue(null)
12542 fth.hasBeenSet()
12543 fth.setMagicValue("foo")
12544 fth.hasBeenSet()
12545 fth.setMagicValue(null)
12546 fth.hasBeenSet()
12547 fth.setImplementation("baz")
12548 fth.hasBeenSet()
12549 ia.setLine("A B")
12550 ia.getParts()
12551 ia.getParts(null)
12552 ia.setImplementation("foo")
12553 ia.getParts(null)
12554 ia.getParts("foo")
12555 super.testWindowsLineSeparator2()
12556 super.testUnixLineSeparator()
12557 super.testWindowsLineSeparator2()
12558 super.testUnixLineSeparator()
12559 super.testParagraphCharacter()
12560 super.testLineSeparatorCharacter()
12561 super.testStandaloneCR()
12562 super.testWindowsLineSeparator()
12563 super.testParagraphCharacter()
12564 super.testLineSeparatorCharacter()
12565 super.testStandaloneCR()
12566 super.testWindowsLineSeparator()
12567 getImplementation()
12568 reg.setPattern("aaaa")
12569 reg.matches("aaaa")
12570 reg.matches("xaaaa")
12571 reg.matches("xaaa")
12572 reg.setPattern("^aaaa")
12573 reg.matches("xaaaa")
12574 reg.matches("aaaax")
12575 reg.setPattern("aaaa$")
12576 reg.matches("aaaax")
12577 reg.matches("xaaaa")
12578 reg.setPattern("[0-9]+")
12579 reg.matches("123")
12580 reg.matches("1")
12581 reg.matches("")
12582 reg.matches("a")
12583 reg.setPattern("[0-9]*")
12584 reg.matches("123")
12585 reg.matches("1")
12586 reg.matches("")
12587 reg.matches("a")
12588 reg.setPattern("([0-9]+)=\\1")
12589 reg.matches("1=1")
12590 reg.matches("1=2")
12591 reg.setPattern("aaaa")
12592 reg.getGroups("xaaaa")
12593 v.size()
12594 v.elementAt(0)
12595 reg.setPattern("(aaaa)")
12596 reg.getGroups("xaaaa")
12597 v.size()
12598 v.elementAt(0)
12599 v.elementAt(0)
12600 reg.setPattern("(a+)b(b+)")
12601 reg.getGroups("xaabb")
12602 v.size()
12603 v.elementAt(0)
12604 v.elementAt(1)
12605 v.elementAt(2)
12606 reg.setPattern("^(.*)/src/((.*/)*)([a-zA-Z0-9_\\.]+)\\.java$")
12607 reg.getGroups("de/tom/src/Google.java")
12608 v.size()
12609 v.elementAt(1)
12610 v.elementAt(2)
12611 v.elementAt(3)
12612 v.elementAt(4)
12613 reg.setPattern("aaaa")
12614 reg.matches("AAaa")
12615 reg.matches("AAaa",RegexpMatcher.MATCH_CASE_INSENSITIVE)
12616 reg.setPattern("end of text$")
12617 reg.matches("end of text\u2029")
12618 reg.setPattern("end of text$")
12619 reg.matches("end of text\u2028")
12620 reg.setPattern("end of text$")
12621 reg.matches("end of text\u0085")
12622 reg.setPattern("end of text$")
12623 reg.matches("end of text\r")
12624 reg.setPattern("end of text$")
12625 reg.matches("end of text\r\n")
12626 reg.setPattern("end of text\r$")
12627 reg.matches("end of text\r\n")
12628 reg.setPattern("end of text$")
12629 reg.matches("end of text\n")
12630 doStartTest1(text)
12631 doStartTest2(text)
12632 doEndTest1(text)
12633 doEndTest2(text)
12634 reg.setPattern("^starttest")
12635 reg.matches(text)
12636 reg.matches(text,RegexpMatcher.MATCH_SINGLELINE)
12637 reg.matches(text,RegexpMatcher.MATCH_MULTILINE)
12638 reg.setPattern("^Line1")
12639 reg.matches(text)
12640 reg.matches(text,RegexpMatcher.MATCH_SINGLELINE)
12641 reg.matches(text,RegexpMatcher.MATCH_MULTILINE)
12642 reg.setPattern("endtest$")
12643 reg.matches(text)
12644 reg.matches(text,RegexpMatcher.MATCH_SINGLELINE)
12645 reg.matches(text,RegexpMatcher.MATCH_MULTILINE)
12646 reg.setPattern("Line4$")
12647 reg.matches(text)
12648 reg.matches(text,RegexpMatcher.MATCH_SINGLELINE)
12649 reg.matches(text,RegexpMatcher.MATCH_MULTILINE)
12650 getRegexpImplementation()
12651 getReg()
12652 reg.setPattern(pattern)
12653 reg.matches(test)
12654 reg.substitute(test,"ab\\2d\\1f",Regexp.MATCH_DEFAULT)
12655 getReg()
12656 reg.setPattern(pattern)
12657 reg.matches(test)
12658 reg.substitute(test,"ab\\2d\\1f",Regexp.REPLACE_FIRST)
12659 getReg()
12660 reg.setPattern(pattern)
12661 reg.matches(test)
12662 reg.substitute(test,"ab\\2d\\1f",Regexp.REPLACE_ALL)
12663 setUpFixture()
12664 ds.s.blockSort(ds.data,FIXTURE.length-1)
12665 setUpFixture()
12666 ds.s.mainSort(ds.data,FIXTURE.length-1)
12667 setUpFixture()
12668 ds.s.fallbackSort(ds.data,FIXTURE.length-1)
12669 setUpFixture2()
12670 ds.s.blockSort(ds.data,FIXTURE2.length-1)
12671 setUpFixture2()
12672 ds.s.mainSort(ds.data,FIXTURE2.length-1)
12673 setUpFixture2()
12674 ds.s.fallbackSort(ds.data,FIXTURE2.length-1)
12675 s.fallbackSort(fmap,FIXTURE,FIXTURE.length)
12676 setUpFixture(FIXTURE)
12677 setUpFixture(FIXTURE2)
12678 setUpFixture(FIXTURE)
12679 cb.close()
12680 InetAddress.getLocalHost()
12681 InetAddress.getLocalHost().getHostName()
12682 DummyMailServer.startMailServer(this.local)
12683 testMailServer.getPort()
12684 testMailClient.from("Mail Message <EmailTaskTest@ant.apache.org>")
12685 testMailClient.to("to@you.com")
12686 testMailClient.cc("cc1@you.com")
12687 testMailClient.cc("cc2@you.com")
12688 testMailClient.bcc("bcc@you.com")
12689 testMailClient.setSubject("Test subject")
12690 testMailClient.setMessage("test line 1\n"+"test line 2")
12691 client.start()
12692 client.join(30*1000)
12693 testMailServer.disconnect()
12694 testMailServer.getResult()
12695 testMailClient.getFailMessage()
12696 testMailClient.isFailed()
12697 DummyMailServer.startMailServer(this.local)
12698 testMailServer.getPort()
12699 testMailClient.from("Mail Message <EmailTaskTest@ant.apache.org>")
12700 testMailClient.to("to@you.com")
12701 testMailClient.setSubject("Test subject")
12702 testMailClient.setMessage("test line 1\n"+"test line 2")
12703 client.start()
12704 client.join(30*1000)
12705 testMailServer.disconnect()
12706 testMailServer.getResult()
12707 testMailClient.getFailMessage()
12708 testMailClient.isFailed()
12709 DummyMailServer.startMailServer(this.local)
12710 testMailServer.getPort()
12711 testMailClient.from("Mail Message <EmailTaskTest@ant.apache.org>")
12712 testMailClient.cc("cc@you.com")
12713 testMailClient.setSubject("Test subject")
12714 testMailClient.setMessage("test line 1\n"+"test line 2")
12715 client.start()
12716 client.join(30*1000)
12717 testMailServer.disconnect()
12718 testMailServer.getResult()
12719 testMailClient.getFailMessage()
12720 testMailClient.isFailed()
12721 DummyMailServer.startMailServer(this.local)
12722 testMailServer.getPort()
12723 testMailClient.from("Mail Message <EmailTaskTest@ant.apache.org>")
12724 testMailClient.bcc("bcc@you.com")
12725 testMailClient.setSubject("Test subject")
12726 testMailClient.setMessage("test line 1\n"+"test line 2")
12727 client.start()
12728 client.join(30*1000)
12729 testMailServer.disconnect()
12730 testMailServer.getResult()
12731 testMailClient.getFailMessage()
12732 testMailClient.isFailed()
12733 DummyMailServer.startMailServer(this.local)
12734 testMailServer.getPort()
12735 testMailClient.from("Mail Message <EmailTaskTest@ant.apache.org>")
12736 testMailClient.to("to@you.com")
12737 testMailClient.setMessage("test line 1\n"+"test line 2")
12738 client.start()
12739 client.join(30*1000)
12740 testMailServer.disconnect()
12741 testMailServer.getResult()
12742 testMailClient.getFailMessage()
12743 testMailClient.isFailed()
12744 DummyMailServer.startMailServer(this.local)
12745 testMailServer.getPort()
12746 testMailClient.from("Mail Message <EmailTaskTest@ant.apache.org>")
12747 testMailClient.to("to@you.com")
12748 testMailClient.setSubject("Test subject")
12749 testMailClient.setMessage("")
12750 client.start()
12751 client.join(30*1000)
12752 testMailServer.disconnect()
12753 testMailServer.getResult()
12754 testMailClient.getFailMessage()
12755 testMailClient.isFailed()
12756 DummyMailServer.startMailServer(this.local)
12757 testMailServer.getPort()
12758 testMailClient.from("Mail Message <EmailTaskTest@ant.apache.org>")
12759 testMailClient.to("Ceki G\u00fclc\u00fc <abuse@mail-abuse.org>")
12760 testMailClient.setSubject("Test subject")
12761 testMailClient.setMessage("")
12762 client.start()
12763 client.join(30*1000)
12764 testMailServer.disconnect()
12765 testMailServer.getResult()
12766 bos1.print(expectedResult)
12767 bos2.print(result)
12768 baos1.toString()
12769 baos2.toString()
12770 testMailClient.getFailMessage()
12771 testMailClient.isFailed()
12772 Thread.sleep(10*1000)
12773 msg.from(from)
12774 replyToList.forEach(e->msg.replyto(e))
12775 msg.replyto(e)
12776 msg.to(e)
12777 msg.cc(e)
12778 msg.bcc(e)
12779 msg.setSubject(subject)
12780 msg.getPrintStream()
12781 out.println(message)
12782 msg.sendAndClose()
12783 replyToList.add(replyTo)
12784 toList.add(to)
12785 ccList.add(cc)
12786 bccList.add(bcc)
12787 stream.close()
12788 stream.close()
12789 testLongRoundTripping(TarOutputStream.LONGFILE_GNU)
12790 testLongRoundTripping(TarOutputStream.LONGFILE_POSIX)
12791 LONG_NAME.length()
12792 original.getName()
12793 tos.setLongFileMode(mode)
12794 tos.putNextEntry(original)
12795 tos.closeEntry()
12796 tos.close()
12797 buff.toByteArray()
12798 tis.getNextEntry()
12799 tripped.getName()
12800 tis.getNextEntry()
12801 tis.close()
12802 a.setMode(0123)
12803 a.getMode()
12804 a.setDirectory(true)
12805 a.getMode()
12806 a.setLinkedFile("test")
12807 a.getMode()
12808 a.setMode(0123)
12809 a.setUserId(5)
12810 a.setGroupId(6)
12811 a.getLocalFileDataData()
12812 a.setLinkedFile("test")
12813 a.getLocalFileDataData()
12814 a.parseFromLocalFileData(data,0,data.length)
12815 a.getLocalFileDataLength()
12816 a.getLocalFileDataLength().getValue()
12817 a.isLink()
12818 a.isDirectory()
12819 a.getMode()
12820 a.getUserId()
12821 a.getGroupId()
12822 a.parseFromLocalFileData(data,0,data.length)
12823 a.getLocalFileDataLength()
12824 a.getLocalFileDataLength().getValue()
12825 a.isLink()
12826 a.isDirectory()
12827 a.getMode()
12828 a.getUserId()
12829 a.getGroupId()
12830 a.getLinkedFile()
12831 a.parseFromLocalFileData(data,0,data.length)
12832 a.getLocalFileDataLength()
12833 a.getLocalFileDataLength().getValue()
12834 a.isLink()
12835 a.isDirectory()
12836 a.getMode()
12837 a.getUserId()
12838 a.getGroupId()
12839 thrown.expect(ZipException.class)
12840 thrown.expectMessage("bad CRC checksum 0 instead of ebf018e")
12841 a.parseFromLocalFileData(data,0,data.length)
12842 a.setUserId(42)
12843 a.setGroupId(12)
12844 a.setLinkedFile("foo")
12845 a.setMode(0644)
12846 a.setDirectory(true)
12847 a.clone()
12848 a.getUserId()
12849 s2.getUserId()
12850 a.getGroupId()
12851 s2.getGroupId()
12852 a.getLinkedFile()
12853 s2.getLinkedFile()
12854 a.getMode()
12855 s2.getMode()
12856 a.isDirectory()
12857 s2.isDirectory()
12858 a.setMode(0755)
12859 a.setDirectory(true)
12860 dummy.setHeaderId(UNRECOGNIZED_HEADER)
12861 dummy.setLocalFileDataData(newbyte[]{0})
12862 dummy.setCentralDirectoryData(newbyte[]{0})
12863 a.getLocalFileDataData()
12864 dummy.getLocalFileDataData()
12865 System.arraycopy(a.getHeaderId().getBytes(),0,data,0,2)
12866 a.getHeaderId()
12867 a.getHeaderId().getBytes()
12868 System.arraycopy(a.getLocalFileDataLength().getBytes(),0,data,2,2)
12869 a.getLocalFileDataLength()
12870 a.getLocalFileDataLength().getBytes()
12871 System.arraycopy(aLocal,0,data,4,aLocal.length)
12872 System.arraycopy(dummy.getHeaderId().getBytes(),0,data,4+aLocal.length,2)
12873 dummy.getHeaderId()
12874 dummy.getHeaderId().getBytes()
12875 System.arraycopy(dummy.getLocalFileDataLength().getBytes(),0,data,4+aLocal.length+2,2)
12876 dummy.getLocalFileDataLength()
12877 dummy.getLocalFileDataLength().getBytes()
12878 System.arraycopy(dummyLocal,0,data,4+aLocal.length+4,dummyLocal.length)
12879 thrown.expect(ZipException.class)
12880 thrown.expectMessage("bad extra field starting at "+(4+aLocal.length)+".  Block length of 1 bytes exceeds remaining data of 0 bytes.")
12881 ExtraFieldUtils.parse(data)
12882 instanceOf(AsiExtraField.class)
12883 ((AsiExtraField)ze[0]).getMode()
12884 instanceOf(UnrecognizedExtraField.class)
12885 ze[1].getLocalFileDataLength()
12886 ze[1].getLocalFileDataLength().getValue()
12887 System.arraycopy(data,0,data2,0,data2.length)
12888 ExtraFieldUtils.parse(data2)
12889 ExtraFieldUtils.parse(data,true,ExtraFieldUtils.UnparseableExtraField.READ)
12890 instanceOf(AsiExtraField.class)
12891 ((AsiExtraField)ze[0]).getMode()
12892 instanceOf(UnrecognizedExtraField.class)
12893 ze[1].getLocalFileDataLength()
12894 ze[1].getLocalFileDataLength().getValue()
12895 System.arraycopy(data,0,data2,0,data2.length)
12896 ExtraFieldUtils.parse(data2,true,ExtraFieldUtils.UnparseableExtraField.READ)
12897 instanceOf(AsiExtraField.class)
12898 ((AsiExtraField)ze[0]).getMode()
12899 instanceOf(UnparseableExtraFieldData.class)
12900 ze[1].getLocalFileDataLength()
12901 ze[1].getLocalFileDataLength().getValue()
12902 ze[1].getLocalFileDataData()
12903 ExtraFieldUtils.parse(data,true,ExtraFieldUtils.UnparseableExtraField.SKIP)
12904 instanceOf(AsiExtraField.class)
12905 ((AsiExtraField)ze[0]).getMode()
12906 instanceOf(UnrecognizedExtraField.class)
12907 ze[1].getLocalFileDataLength()
12908 ze[1].getLocalFileDataLength().getValue()
12909 System.arraycopy(data,0,data2,0,data2.length)
12910 ExtraFieldUtils.parse(data2,true,ExtraFieldUtils.UnparseableExtraField.SKIP)
12911 instanceOf(AsiExtraField.class)
12912 ((AsiExtraField)ze[0]).getMode()
12913 ExtraFieldUtils.mergeLocalFileDataData(newZipExtraField[]{a,dummy})
12914 dummy.getCentralDirectoryData()
12915 System.arraycopy(data,0,data2,0,4+aLocal.length+2)
12916 System.arraycopy(dummy.getCentralDirectoryLength().getBytes(),0,data2,4+aLocal.length+2,2)
12917 dummy.getCentralDirectoryLength()
12918 dummy.getCentralDirectoryLength().getBytes()
12919 System.arraycopy(dummyCentral,0,data2,4+aLocal.length+4,dummyCentral.length)
12920 ExtraFieldUtils.mergeCentralDirectoryData(newZipExtraField[]{a,dummy})
12921 UNRECOGNIZED_HEADER.getBytes()
12922 d.parseFromLocalFileData(newbyte[]{b[0],b[1],1,0},0,4)
12923 ExtraFieldUtils.mergeLocalFileDataData(newZipExtraField[]{a,d})
12924 d.getCentralDirectoryData()
12925 System.arraycopy(data,0,data2,0,4+aLocal.length+2)
12926 System.arraycopy(dCentral,0,data2,4+aLocal.length,dCentral.length)
12927 ExtraFieldUtils.mergeCentralDirectoryData(newZipExtraField[]{a,d})
12928 testFileRoundtrip(UTF_8,true,true)
12929 testFileRoundtrip(UTF_8,false,true)
12930 testFileRoundtrip(CP437,false,true)
12931 testFileRoundtrip(US_ASCII,false,true)
12932 testFileRoundtrip(UTF_8,true,false)
12933 testFileRoundtrip(UTF_8,false,false)
12934 testFileRoundtrip(CP437,false,false)
12935 testFileRoundtrip(US_ASCII,false,false)
12936 File.createTempFile("unicode-test",".zip")
12937 createTestFile(file,US_ASCII,false,true)
12938 ZipFile.closeQuietly(zf)
12939 file.exists()
12940 file.delete()
12941 File.createTempFile(encoding+"-test",".zip")
12942 createTestFile(file,encoding,withEFS,withExplicitUnicodeExtra)
12943 testFile(file,encoding)
12944 file.exists()
12945 file.delete()
12946 ZipEncodingHelper.getZipEncoding(encoding)
12947 zos.setEncoding(encoding)
12948 zos.setUseLanguageEncodingFlag(withEFS)
12949 zos.setCreateUnicodeExtraFields(withExplicitUnicodeExtra?ZipOutputStream.UnicodeExtraFieldPolicy.NEVER:ZipOutputStream.UnicodeExtraFieldPolicy.ALWAYS)
12950 zipEncoding.canEncode(ze.getName())
12951 ze.getName()
12952 zipEncoding.encode(ze.getName())
12953 ze.getName()
12954 ze.addExtraField(newUnicodePathExtraField(ze.getName(),en.array(),en.arrayOffset(),en.limit()))
12955 ze.getName()
12956 en.array()
12957 en.arrayOffset()
12958 en.limit()
12959 zos.putNextEntry(ze)
12960 zos.write("Hello, world!".getBytes(StandardCharsets.US_ASCII))
12961 "Hello, world!".getBytes(StandardCharsets.US_ASCII)
12962 zos.closeEntry()
12963 zipEncoding.canEncode(ze.getName())
12964 ze.getName()
12965 zipEncoding.encode(ze.getName())
12966 ze.getName()
12967 ze.addExtraField(newUnicodePathExtraField(ze.getName(),en.array(),en.arrayOffset(),en.limit()))
12968 ze.getName()
12969 en.array()
12970 en.arrayOffset()
12971 en.limit()
12972 zos.putNextEntry(ze)
12973 zos.write("Give me your money!".getBytes(StandardCharsets.US_ASCII))
12974 "Give me your money!".getBytes(StandardCharsets.US_ASCII)
12975 zos.closeEntry()
12976 zipEncoding.canEncode(ze.getName())
12977 ze.getName()
12978 zipEncoding.encode(ze.getName())
12979 ze.getName()
12980 ze.addExtraField(newUnicodePathExtraField(ze.getName(),en.array(),en.arrayOffset(),en.limit()))
12981 ze.getName()
12982 en.array()
12983 en.arrayOffset()
12984 en.limit()
12985 zos.putNextEntry(ze)
12986 zos.write("ascii".getBytes(StandardCharsets.US_ASCII))
12987 "ascii".getBytes(StandardCharsets.US_ASCII)
12988 zos.closeEntry()
12989 Collections.list(zf.getEntries())
12990 zf.getEntries()
12991 ze.getName()
12992 ze.getName().endsWith("sser.txt")
12993 ze.getName()
12994 ze.getName().endsWith("_for_Dollar.txt")
12995 ze.getName()
12996 ze.getName().equals(ASCII_TXT)
12997 ze.getName()
12998 ZipFile.closeQuietly(zf)
12999 ze.getExtraField(UnicodePathExtraField.UPATH_ID)
13000 expectedName.equals(ze.getName())
13001 ze.getName()
13002 findUniCodePath(ze)
13003 ZipEncodingHelper.getZipEncoding(encoding)
13004 enc.encode(ze.getName())
13005 ze.getName()
13006 crc.update(ne.array(),ne.arrayOffset(),ne.limit())
13007 ne.array()
13008 ne.arrayOffset()
13009 ne.limit()
13010 crc.getValue()
13011 ucpf.getNameCRC32()
13012 ucpf.getUnicodeName()
13013 zf.getEntry(fileName)
13014 zf.getInputStream(entry)
13015 is.read()
13016 doSimpleEncodingTest("Cp437",null)
13017 doSimpleEncodingTest("Cp850",null)
13018 doSimpleEncodingTest("Cp1252",b)
13019 actual.limit()
13020 actual.get()
13021 ZipEncodingHelper.getZipEncoding(name)
13022 enc.decode(testBytes)
13023 enc.canEncode(decoded)
13024 enc.encode(decoded)
13025 enc.canEncode(UNENC_STRING)
13026 "%U2016".getBytes(StandardCharsets.US_ASCII)
13027 enc.encode(UNENC_STRING)
13028 enc.canEncode(BAD_STRING)
13029 BAD_STRING_ENC.getBytes(StandardCharsets.US_ASCII)
13030 enc.encode(BAD_STRING)
13031 a.setDirectory(true)
13032 a.setMode(0755)
13033 u.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER)
13034 u.setLocalFileDataData(newbyte[0])
13035 ze.setExtraFields(newZipExtraField[]{a,u})
13036 ze.getExtra()
13037 ze.getExtraFields()
13038 u2.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER)
13039 u2.setLocalFileDataData(newbyte[]{1})
13040 ze.addExtraField(u2)
13041 ze.getExtra()
13042 ze.getExtraFields()
13043 u3.setHeaderId(newZipShort(2))
13044 u3.setLocalFileDataData(newbyte[]{1})
13045 ze.addExtraField(u3)
13046 ze.getExtraFields()
13047 ze.removeExtraField(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER)
13048 ze.getExtra()
13049 ze.getExtraFields()
13050 thrown.expect(NoSuchElementException.class)
13051 ze.removeExtraField(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER)
13052 a.setDirectory(true)
13053 a.setMode(0755)
13054 u.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER)
13055 u.setLocalFileDataData(newbyte[0])
13056 ze.setExtraFields(newZipExtraField[]{a,u})
13057 ExtraFieldUtilsTest.UNRECOGNIZED_HEADER.getBytes()
13058 ze.setCentralDirectoryExtra(newbyte[]{b[0],b[1],1,0,127})
13059 ze.getExtraFields()
13060 result[1].getHeaderId()
13061 result[1].getLocalFileDataLength()
13062 result[1].getCentralDirectoryLength()
13063 ze.setCentralDirectoryExtra(newbyte[]{2,0,0,0})
13064 ze.getExtraFields()
13065 ze.setExtra(newbyte[]{2,0,1,0,127})
13066 ze.getExtraFields()
13067 result[2].getHeaderId()
13068 result[2].getLocalFileDataLength()
13069 result[2].getCentralDirectoryLength()
13070 a.setDirectory(true)
13071 a.setMode(0755)
13072 u.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER)
13073 u.setLocalFileDataData(newbyte[0])
13074 ze.setExtraFields(newZipExtraField[]{a,u})
13075 ze.getExtra()
13076 u2.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER)
13077 u2.setLocalFileDataData(newbyte[]{1})
13078 ze.addAsFirstExtraField(u2)
13079 ze.getExtra()
13080 ze.getExtraFields()
13081 u3.setHeaderId(newZipShort(2))
13082 u3.setLocalFileDataData(newbyte[]{1})
13083 ze.addAsFirstExtraField(u3)
13084 ze.getExtraFields()
13085 ze.getPlatform()
13086 ze.setUnixMode(0755)
13087 ze.getPlatform()
13088 ze.getExternalAttributes()
13089 ze.getExternalAttributes()
13090 ze.setUnixMode(0444)
13091 ze.getPlatform()
13092 ze.getExternalAttributes()
13093 ze.getExternalAttributes()
13094 ze.getPlatform()
13095 ze.setUnixMode(0777)
13096 ze.getPlatform()
13097 ze.getExternalAttributes()
13098 ze.getExternalAttributes()
13099 ze.setUnixMode(0577)
13100 ze.getPlatform()
13101 ze.getExternalAttributes()
13102 ze.getExternalAttributes()
13103 archiveEntry.setUnixMode(0664)
13104 archiveEntry.setMethod(ZipEntry.DEFLATED)
13105 archiveEntry.getGeneralPurposeBit()
13106 archiveEntry.getGeneralPurposeBit().useStrongEncryption(true)
13107 zl.getBytes()
13108 zl.getValue()
13109 zl.getValue()
13110 s1.clone()
13111 s1.getValue()
13112 s2.getValue()
13113 Calendar.getInstance()
13114 cal.setTime(time)
13115 cal.get(Calendar.YEAR)
13116 cal.get(Calendar.MONTH)
13117 cal.get(Calendar.DAY_OF_MONTH)
13118 cal.get(Calendar.HOUR_OF_DAY)
13119 cal.get(Calendar.MINUTE)
13120 cal.get(Calendar.SECOND)
13121 ZipUtil.toDosTime(time)
13122 test.getValue()
13123 zl.getValue()
13124 ZipUtil.adjustToLong(Integer.MAX_VALUE)
13125 ZipUtil.adjustToLong(Integer.MAX_VALUE+1)
13126 ZipUtil.adjustToLong(2*Integer.MAX_VALUE)
13127 zs.getBytes()
13128 zs.getValue()
13129 zs.getValue()
13130 s1.clone()
13131 s1.getValue()
13132 s2.getValue()
13133 XMLReaderFactory.createXMLReader("org.apache.xerces.parsers.SAXParser")
13134 XMLReaderFactory.createXMLReader("org.apache.xerces.parsers.SAXParser")
13135 xerces.setFeature("http://apache.org/xml/features/validation/schema",true)
13136 XMLReaderFactory.createXMLReader()
13137 xerces.setFeature("http://apache.org/xml/features/validation/schema",true)
13138 System.out.println(message)
13139 System.out.print("<some-other-message>Hello world! <!-- some comment --></some-other-message>")
13140 fail("intentionally failing")
13141 System.getProperty(SYS_PROP_ONE)
13142 fail("An error message")
13143 fail("An error message")
13144 rule.configureProject("build.xml")
13145 rule.executeTarget("use.simple")
13146 rule.getLog()
13147 rule.configureProject("build.xml")
13148 tried.expect(BuildException.class)
13149 tried.expectMessage("file not set")
13150 find.execute()
13151 tried.expect(BuildException.class)
13152 tried.expectMessage("location not set")
13153 find.setFile("ant.jar")
13154 find.execute()
13155 tried.expect(BuildException.class)
13156 tried.expectMessage("fileset not set")
13157 find.setFile("ant.jar")
13158 find.setLocation("location.ant-jar")
13159 find.execute()
13160 rule.executeTarget("testFileNotPresent")
13161 rule.getProject()
13162 rule.getProject().getProperty("location.ant-jar")
13163 rule.executeTarget("testFilePresent")
13164 rule.getProject()
13165 rule.getProject().getProperty("location.ant-jar")
13166 result.endsWith("ant.jar")
13167 rule.configureProject("build.xml")
13168 tried.expect(BuildException.class)
13169 tried.expectMessage("file not set")
13170 find.execute()
13171 tried.expect(BuildException.class)
13172 tried.expectMessage("location not set")
13173 find.setFile("ant.jar")
13174 find.execute()
13175 tried.expect(BuildException.class)
13176 tried.expectMessage("path not set")
13177 find.setFile("ant.jar")
13178 find.setLocation("location.ant-jar")
13179 find.execute()
13180 rule.executeTarget("testFileNotPresent")
13181 rule.getProject()
13182 rule.getProject().getProperty("location.ant-jar")
13183 rule.executeTarget("testFilePresent")
13184 rule.getProject()
13185 rule.getProject().getProperty("location.ant-jar")
13186 result.endsWith("ant.jar")
13187 rule.configureProject("build.xml")
13188 tried.expect(BuildException.class)
13189 tried.expectMessage("file not set")
13190 find.execute()
13191 tried.expect(BuildException.class)
13192 tried.expectMessage("location not set")
13193 find.setFile("ant.jar")
13194 find.execute()
13195 tried.expect(BuildException.class)
13196 tried.expectMessage("path not set")
13197 find.setFile("ant.jar")
13198 find.setLocation("location.ant-jar")
13199 find.execute()
13200 rule.executeTarget("testFileNotPresent")
13201 rule.getProject()
13202 rule.getProject().getProperty("location.ant-jar")
13203 rule.executeTarget("testFilePresent")
13204 rule.getProject()
13205 rule.getProject().getProperty("location.ant-jar")
13206 result.endsWith("ant.jar")
13207 rule.executeTarget("testMultipleFiles")
13208 rule.getProject()
13209 rule.getProject().getProperty("location.test")
13210 result.contains(";")
13211 rule.configureProject("build.xml")
13212 tried.expect(BuildException.class)
13213 tried.expectMessage("file not set")
13214 find.execute()
13215 tried.expect(BuildException.class)
13216 tried.expectMessage("location not set")
13217 find.setFile("ant.jar")
13218 find.execute()
13219 tried.expect(BuildException.class)
13220 tried.expectMessage("path not set")
13221 find.setFile("ant.jar")
13222 find.setLocation("location.ant-jar")
13223 find.execute()
13224 rule.executeTarget("testFileNotPresent")
13225 rule.getProject()
13226 rule.getProject().getProperty("location.ant-jar")
13227 rule.executeTarget("testFilePresent")
13228 rule.getProject()
13229 rule.getProject().getProperty("location.ant-jar")
13230 result.endsWith("ant.jar")
13231 rule.executeTarget("testMultipleFiles")
13232 rule.getProject()
13233 rule.getProject().getProperty("location.test")
13234 result.contains(";")
13235 rule.configureProject("build.xml")
13236 rule.executeTarget("use.without")
13237 rule.getLog()
13238 rule.executeTarget("use.message")
13239 rule.getLog()
13240 tried.expect(BuildException.class)
13241 tried.expectMessage("Fail requested.")
13242 rule.executeTarget("use.fail")
13243 rule.executeTarget("use.nestedText")
13244 rule.getLog()
13245 rule.executeTarget("use.nestedElement")
13246 rule.getLog()
13247 rule.getLog().contains("Nested Element 1")
13248 rule.getLog()
13249 rule.getLog().contains("Nested Element 2")
